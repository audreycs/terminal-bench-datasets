{
  "question_title": "Count Bracket Sequences",
  "question_content": "You are given a non-empty string S consisting of (, ), and ?.\r\nThere are 2^x ways to obtain a new string by replacing each ? in S with ( and ), where x is the number of occurrences of ? in S.  Among them, find the number, modulo 998244353, of ways that yield a parenthesis string.\nA string is said to be a parenthesis string if one of the following conditions is satisfied.\n\n- It is an empty string.\n- It is a concatenation of (, A, and ), for some parenthesis string A.\n- It is a concatenation of A and B, for some non-empty parenthesis strings A and B.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a non-empty string of length at most 3000 consisting of (, ), and ?.\n\nSample Input 1\n\n(???(?\n\nSample Output 1\n\n2\r\n\nReplacing S with ()()() or (())() yields a parenthesis string.\r\nThe other replacements do not yield a parenthesis string, so 2 should be printed.\n\nSample Input 2\n\n)))))\n\nSample Output 2\n\n0\n\nSample Input 3\n\n??????????????(????????(??????)?????????(?(??)\n\nSample Output 3\n\n603032273\r\n\nPrint the count modulo 998244353.",
  "platform": "atcoder",
  "question_id": "abc312_d",
  "contest_id": "abc312",
  "contest_date": "2023-07-29T00:00:00",
  "starter_code": "",
  "difficulty": "medium",
  "public_test_cases": "[{\"input\": \"(???(?\\n\", \"output\": \"2\\n\", \"testtype\": \"stdin\"}, {\"input\": \")))))\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"??????????????(????????(??????)?????????(?(??)\\n\", \"output\": \"603032273\\n\", \"testtype\": \"stdin\"}]",
  "private_test_cases": "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",
  "metadata": "{}"
}