{
  "question_title": "find-words-containing-character",
  "question_content": "You are given a 0-indexed array of strings words and a character x.\nReturn an array of indices representing the words that contain the character x.\nNote that the returned array may be in any order.\n \nExample 1:\n\nInput: words = [\"leet\",\"code\"], x = \"e\"\nOutput: [0,1]\nExplanation: \"e\" occurs in both words: \"leet\", and \"code\". Hence, we return indices 0 and 1.\n\nExample 2:\n\nInput: words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"a\"\nOutput: [0,2]\nExplanation: \"a\" occurs in \"abc\", and \"aaaa\". Hence, we return indices 0 and 2.\n\nExample 3:\n\nInput: words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"z\"\nOutput: []\nExplanation: \"z\" does not occur in any of the words. Hence, we return an empty array.\n\n \nConstraints:\n\n1 <= words.length <= 50\n1 <= words[i].length <= 50\nx is a lowercase English letter.\nwords[i] consists only of lowercase English letters.",
  "platform": "leetcode",
  "question_id": "3194",
  "contest_id": "biweekly-contest-118",
  "contest_date": "2023-11-25T00:00:00",
  "starter_code": "class Solution:\n    def findWordsContaining(self, words: List[str], x: str) -> List[int]:\n        ",
  "difficulty": "easy",
  "public_test_cases": "[{\"input\": \"[\\\"leet\\\", \\\"code\\\"]\\n\\\"e\\\"\", \"output\": \"[0, 1]\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"abc\\\", \\\"bcd\\\", \\\"aaaa\\\", \\\"cbc\\\"]\\n\\\"a\\\"\", \"output\": \"[0, 2]\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"abc\\\", \\\"bcd\\\", \\\"aaaa\\\", \\\"cbc\\\"]\\n\\\"z\\\"\", \"output\": \"[]\", \"testtype\": \"functional\"}]",
  "private_test_cases": "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",
  "metadata": "{\"func_name\": \"findWordsContaining\"}"
}