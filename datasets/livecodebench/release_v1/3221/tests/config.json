{
  "question_title": "find-the-peaks",
  "question_content": "You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array.\nReturn an array that consists of indices of peaks in the given array in any order.\nNotes:\n\nA peak is defined as an element that is strictly greater than its neighboring elements.\nThe first and last elements of the array are not a peak.\n\n \nExample 1:\n\nInput: mountain = [2,4,4]\nOutput: []\nExplanation: mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array.\nmountain[1] also can not be a peak because it is not strictly greater than mountain[2].\nSo the answer is [].\n\nExample 2:\n\nInput: mountain = [1,4,3,8,5]\nOutput: [1,3]\nExplanation: mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array.\nmountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1].\nBut mountain [1] and mountain[3] are strictly greater than their neighboring elements.\nSo the answer is [1,3].\n\n \nConstraints:\n\n3 <= mountain.length <= 100\n1 <= mountain[i] <= 100",
  "platform": "leetcode",
  "question_id": "3221",
  "contest_id": "weekly-contest-374",
  "contest_date": "2023-12-02T00:00:00",
  "starter_code": "class Solution:\n    def findPeaks(self, mountain: List[int]) -> List[int]:\n        ",
  "difficulty": "easy",
  "public_test_cases": "[{\"input\": \"[2, 4, 4]\", \"output\": \"[]\", \"testtype\": \"functional\"}, {\"input\": \"[1, 4, 3, 8, 5]\", \"output\": \"[1, 3]\", \"testtype\": \"functional\"}]",
  "private_test_cases": "eJzlVsuKFEEQ9ODNn2jm3EhXZT39EmHZg8gKCzK7YM9hEcGP0I/05ieYkZE1M+uswjAgqEM31VVdla+IjJ7Pz79+f/HMfq+/6cPVx83t9n63bl5Nm6s4T2HR+3ozT5u73TrWubDefFjXh/sbLL3bbd+ut3fbN+83n+bp2EaAjUuNiMxTyfOU2yVWSp2nrjmV5RIrTeNoTROSi8qC2mpW7cl44pm1SXrBkIaVMV04wkHXOyeUbp5i0VEHdatPUd+I7kwIQy9FChWSaFPBNLnNYIek2puqqzHwXOk610uHfpIF3tsJI5GeCro16NaIIBq9i5yDIGLLNAgDrZsL5FmF4Eb3k/TOCzPFkSKMHCaQG94HHdtiJiqmkctAV3QtZXoQTjsq4S2R8gn4hkJjMKF4ooFlRuEjLJ0D7L5z/uLxiSqJcRCtSACsXvmIHKNmIEn1uuEcYMhkoehacgoCpVTPqGuMRL1zAHfBfWMAiBJoHz4zhz64OuAFUQq3Mxd0V8dh5g3W5ML2QIejgdBI4GxFvE4l+EbOeEa+fZC3kaggMN6hEQehJR1sl9GGwrogDPhBIyCflCgACLiHwxrm4s0Atmc3A8JXDx/hsH0t/egjKyDEpXoMxe2ZLDTmANGBseoChBxyd26cisWeGe2IEu2n9hk0KMQiuXoBi+Q6NbTOwhoKpWsVTd4IeXMZQXh9YYm6dfg5uhtpHI4HJuIcQgFNPYT4ou7gMmDsex2GW5w09mUuA+W6MCWQCacM5UQJrZFp9M5bPOvgCuiEAthoruRy310MIy2I0zU5ZvAu/VBEmDC8Aokg3o/ioom9LbF4xaXReF4PnMA+hJNdbLtz1vDHAmKzlDz+4l8GI3nxLgssRff9dQTnOmwi8QstPpKY42/PkbTsORRZCuORtyPSRjrZvSFNtBYiMD55qoB4z6XIFu7lP5P5f2X8Y58r51ng/7RHXBu6lfl3zPTLuxttuuddeMy95l1vWgZx+f0n8frLyx9KXHxF",
  "metadata": "{\"func_name\": \"findPeaks\"}"
}