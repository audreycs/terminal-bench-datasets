{
  "question_title": "length-of-the-longest-subsequence-that-sums-to-target",
  "question_content": "You are given a 0-indexed array of integers nums, and an integer target.\nReturn the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n \nExample 1:\n\nInput: nums = [1,2,3,4,5], target = 9\nOutput: 3\nExplanation: There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3.\n\nExample 2:\n\nInput: nums = [4,1,3,2,1,5], target = 7\nOutput: 4\nExplanation: There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4.\n\nExample 3:\n\nInput: nums = [1,1,5,4,5], target = 3\nOutput: -1\nExplanation: It can be shown that nums has no subsequence that sums up to 3.\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\n1 <= target <= 1000",
  "platform": "leetcode",
  "question_id": "3106",
  "contest_id": "biweekly-contest-116",
  "contest_date": "2023-10-28T00:00:00",
  "starter_code": "class Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        ",
  "difficulty": "medium",
  "public_test_cases": "[{\"input\": \"[1, 2, 3, 4, 5]\\n9\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[4, 1, 3, 2, 1, 5]\\n7\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[1, 1, 5, 4, 5]\\n3\", \"output\": \"-1\", \"testtype\": \"functional\"}]",
  "private_test_cases": "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",
  "metadata": "{\"func_name\": \"lengthOfLongestSubsequence\"}"
}