{
  "question_title": "count-prefix-and-suffix-pairs-i",
  "question_content": "You are given a 0-indexed string array words.\nLet's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:\n\nisPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise.\n\nFor example, isPrefixAndSuffix(\"aba\", \"ababa\") is true because \"aba\" is a prefix of \"ababa\" and also a suffix, but isPrefixAndSuffix(\"abc\", \"abcd\") is false.\nReturn an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.\n \nExample 1:\n\nInput: words = [\"a\",\"aba\",\"ababa\",\"aa\"]\nOutput: 4\nExplanation: In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"a\", \"aba\") is true.\ni = 0 and j = 2 because isPrefixAndSuffix(\"a\", \"ababa\") is true.\ni = 0 and j = 3 because isPrefixAndSuffix(\"a\", \"aa\") is true.\ni = 1 and j = 2 because isPrefixAndSuffix(\"aba\", \"ababa\") is true.\nTherefore, the answer is 4.\nExample 2:\n\nInput: words = [\"pa\",\"papa\",\"ma\",\"mama\"]\nOutput: 2\nExplanation: In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"pa\", \"papa\") is true.\ni = 2 and j = 3 because isPrefixAndSuffix(\"ma\", \"mama\") is true.\nTherefore, the answer is 2.  \nExample 3:\n\nInput: words = [\"abab\",\"ab\"]\nOutput: 0\nExplanation: In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(\"abab\", \"ab\") is false.\nTherefore, the answer is 0.\n \nConstraints:\n\n1 <= words.length <= 50\n1 <= words[i].length <= 10\nwords[i] consists only of lowercase English letters.",
  "platform": "leetcode",
  "question_id": "3309",
  "contest_id": "weekly-contest-385",
  "contest_date": "2024-02-17T00:00:00",
  "starter_code": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:\n        ",
  "difficulty": "easy",
  "public_test_cases": "[{\"input\": \"[\\\"a\\\", \\\"aba\\\", \\\"ababa\\\", \\\"aa\\\"]\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"pa\\\", \\\"papa\\\", \\\"ma\\\", \\\"mama\\\"]\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"abab\\\", \\\"ab\\\"]\", \"output\": \"0\", \"testtype\": \"functional\"}]",
  "private_test_cases": "eJztlkuu5TQQQBkwZQ9Pd9xC0BITVoLUrwd2/I//fwchsQjYFzO2Q16l0hIgIaE7fXdwblUUV5XrY+fXr3//85uv4PfTH6fw6eeH9rHVx48vj0+vD1FfH58fH14eoVV8+t2bWnmpdUX+9kA0v1UdPLGPXz68/H19Yry8ngteH+H6I9T0Nbp6zmwgNF72BqHrkiqhxyVpQv0lWULTc55O+xuGnk/RXmI6RXaJ/RS3L37fnj7jzjhCLQZPGKEio+/zeUP5OGNKuP2qCKVP1qgLHR3aa4pU3E3gamQ9iJWYSyprMv1StkLnc14FXfPYL2ucScqIuBT1th/Yc6BRsM1gcq+/3W/P+SX7INViHaMRxBhsGxEjyQHb1XJGbFSXQl0nQtDnHPPLlsQqBtwQdu8y02M2qI+4Z1yS8788f/9/PHu+WQdA105QAsBGc7kTwKV75owHXLpxemUAVogYoQGYxdo3B8DcWZ0C4NKL2PUCXLoTPFoA2jPBJQDm4jw1FgBn3NtcAWj/3GkGYNMK2gIAC+nzsABMefc6A7CVxuE3AOaj+s0C7v2MlAFYhpk3CcDm791oAMafYpuAS2fHRhYA/fmVCgDtRX4UAOZbeqkBaE/shwBg/kmcBoAHwEFKBuAh0IvlAGwgm+wA3EfUrgMA65HC0QBYfyMXAWD+l20dgPlQ2ggA5neqogAYD51EAbBeXe0cgO8PEgMA7fU4O+DSZzd1AO54rXIArG9djgIwPzn3AUDdd7UBsN7EMQ7A9baEDMD+aT0MwHMTXdhoNtC5YRx+xmM5KQrqqY+hVxgHuetEfD3KZtodd+luBEnuOpQx874bhgeS2ZLdcmoD59A1wUPJzKA9kRatc6mM/qr3mYqyNbyatJVC51I71i2fnicxZ6tjH4rMspbprluRqjehvcU8m9p2uahduL4ZUnTeWcF45RaF2GfNuJ4bNVvpW8J4du6W9CR1rGOcZ3SGmfuyqSmlEpcxOFclsPMSJ1/quPYsOt8TQ/+L+BFHifK441kiW+kU+o+HkV4nE3HuSD3G5nKLOGdGZUmn6eKO3xNXyDnHeO5UTv1OeXLYJ4WOaeYoAuc6kJIq84Vi3/ZspFHcV3pfIDLsMrj7nJykb7TLWHH/jocWDtvvvj3bygsqbMWD385pD0Ezw/dLOzzPaTD014ZizebZcH+dzk7YIQrGb0up3Ez3xV62qnPtNeabpXYs08bdr2di9snr4vflX0beZxcJ85+U830/c479V85vg1Fjzvj+UaXue2Va3fdUiSQWleSTc9WtXCHtC+N819/1d/3S//kd+PHjD/81Wp9/+/YvNoqwbw==",
  "metadata": "{\"func_name\": \"countPrefixSuffixPairs\"}"
}