{
  "question_title": "double-modular-exponentiation",
  "question_content": "You are given a 0-indexed 2D array variables where variables[i] = [a_i, b_i, c_i, m_i], and an integer target.\nAn index i is good if the following formula holds:\n\n0 <= i < variables.length\n((a_i^bi % 10)^ci) % m_i == target\n\nReturn an array consisting of good indices in any order.\n \nExample 1:\n\nInput: variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2\nOutput: [0,2]\nExplanation: For each index i in the variables array:\n1) For the index 0, variables[0] = [2,3,3,10], (2^3 % 10)^3 % 10 = 2.\n2) For the index 1, variables[1] = [3,3,3,1], (3^3 % 10)^3 % 1 = 0.\n3) For the index 2, variables[2] = [6,1,1,4], (6^1 % 10)^1 % 4 = 2.\nTherefore we return [0,2] as the answer.\n\nExample 2:\n\nInput: variables = [[39,3,1000,1000]], target = 17\nOutput: []\nExplanation: For each index i in the variables array:\n1) For the index 0, variables[0] = [39,3,1000,1000], (39^3 % 10)^1000 % 1000 = 1.\nTherefore we return [] as the answer.\n\n \nConstraints:\n\n1 <= variables.length <= 100\nvariables[i] == [a_i, b_i, c_i, m_i]\n1 <= a_i, b_i, c_i, m_i <= 10^3\n0 <= target <= 10^3",
  "platform": "leetcode",
  "question_id": "3234",
  "contest_id": "weekly-contest-375",
  "contest_date": "2023-12-09T00:00:00",
  "starter_code": "class Solution:\n    def getGoodIndices(self, variables: List[List[int]], target: int) -> List[int]:\n        ",
  "difficulty": "medium",
  "public_test_cases": "[{\"input\": \"[[2, 3, 3, 10], [3, 3, 3, 1], [6, 1, 1, 4]]\\n2\", \"output\": \"[0, 2]\", \"testtype\": \"functional\"}, {\"input\": \"[[39, 3, 1000, 1000]]\\n17\", \"output\": \"[]\", \"testtype\": \"functional\"}]",
  "private_test_cases": "eJylmc+KZ0kRhV34HFL0upCM/J8+idD2QmSEAekZmOqFiOBD6OO580G85ztxb6m4GWqYqu6+9buRkREnTpyI+tsv//GvX/2C/377z+svn//y6fuvP357+/Sbl0+fP9fXl/H6Ml9f+pcvv/taP72+fPrh29v94y/699t3P729/fnH7/Tkj9++/uHt+x++/v5Pn/76+vJfli4z5/Vlp6X9AUtx2Xh9iXL5JVPrI6aKDV326kfdalNe9fX6ssrlYuBci/kBk+dcIXv/FqUUGY2PpWGQhvjy+vJ58teVSekfsNuxdP3fZHeBmSmX85+KcB5T/ueY8rNCcmVrXfZa1Z8yPi7T5wp46/rSk339fLfrwOtrD55cR1/XbtdXbC5+mak7kz/1pF8B7peJeXk9eNKun5/L1LnMdI7SEVNvVWWat3QpHXf9OTmqXu+364ncsp2z7VzIpYPLlx8r9C85iT/y8LJxFDY8XPqZLnp9bpOsJg/lXbsvGvt+QwjhLP1MUFHIsaPQyMNQeM5901H8tOHzuvypxZ8J/NH7Uzb0Od7aql4yqgyM27QuriANvzZsZCksPFGe5OZ6wirTCsepGOP2J6N8O6SLK8sRd+iVz+O0+hat+e7iFewqoErg6DfshJU9HAznT3Fvzt92JhTT60V9NCrRUY6bL9bL/8Wr+UeexM8iCL2h6B2d33zcUhh6l1NFWTj2vIpBlJaxqM5Mv6K5xTPDuB6TFExF89w4WQL1VtDHEvQc0ibzWzUK7g0yYnHZ1HEzUS8P974eDIBmPEyBM3TnSYztpV6SL7rTdDxlLWBCfXiES7TID2W5KrNnZZIFJyG6liZMLVeU7ilo6QbbZhu4Hqr5VvRj17ngMYCpYrtbXl8XVdGtptqwC6EbNQF4KKzbLkTp+dnQCadgt3a9vHsGcBbHqlK/gpDqbZXEpbC7KXGqyEVHVQqJvFCNRxIah2K9nK6zODggTu2sqixOBlwPAKIQO6pPu8wuyk5ha66eKgATNh82yWMtyqsO6wrIHK5ieHGuzM9ZySMK71IaFSbHvHP4UMSK7uibLThQBDeV+75AcYg1t1C8AQrBnaKUI2+nnDtmug2l6unSAcPF23XdQ9zBrItjYFGJEBtOU24TL3eFkqa43GFAm+ogFBhX8tDRjUBBfiakArco74Shu0EI1X5B/q1qXlQMGxwvgFaTFaQk36eq7+x6M9YQVy8SF4btxNYBQ4DfgVX09NnT4EoTAZ/dBFbNySUS/FyxEnwTRqqWpkSdBY2HP6rA6wW+kliVo7OxLIdNnSHOmYpDV8TrTjYX+koz/bVqZFROIFAqPNNGVzOg57qL+bIifdk8CqVPmhTRvNn8+KAiFOfVBY52B3CDWXzqTquu3fX0CPDHVhfNtoheaOiOiu7fFboOmp0BKnPVyPKcTpZit+lBi4wnsiE+kY5CU01HB55XhQ3hbhuuA67Wy0vIjGzHZnB9ViEP8xHVBiG0+h6tWuW6Qt7Vopp92LoVgGvoEWemF3iuWFGZzgPpKpe7LLXpi+0sYSmMTOGRfRSH8mpRMM9wM6ljk3S7DwcJyATMcB8oTxc8FGoJgeq4EdDNhRjo9PWAJXw+VaVeEuq2LbJz9cRvla2zHn4Lap3Kd1Amnc9IEDSOewp0PCu98G59Uy2li0bhw12mo7KsXbpSOE81wVLS6lTqn0nGB1ITXdDErlQ8VFit8eggeFDF72ukID0zb4tq5EqKsQm2ozz0bgNP9mt0VJYcBbLFM8j+yJhV1ccq0fZJzVT4cBC4slobG1AO67VlVxcadyERJBbcYhTNoOLpMyN7KhRC9xH9tuIGXvPydJ8xy4O4Tc9B5zZ3uVmT9qcUWEvEgGAlPJikXEdbxX6kAZqyNpLLdLOlvA5FflvMr/FoAF3tWPQPFLhwJ8T4CnKIIUAKYmRDDViBpifBFT6f1AsrE9Y67xhAlXOki3PADnQkfHJgRVBLlx+t3oKZwLZNmxc5bNNAQ4CozzGVWO1QMXKNizWXQVQKeKevrfkpE4Flv7DpmjuoJKVnIwazceiisAvkN+p+9EeH4OSX06XWSJOEc1It9W70q+sN5OVjdaL+66MIOmMHU8tCPPijYuYlj1pAVZgdsipl2eiJKSRrEuzcDGWpdFYicAkC1SGYiOwC45RHMNd6K9EG/bn3oiZo1lB4pFaSEomBgmrQioGsv0LvLlxrkpMABKBX27NinKm+mhrm1cesDZUAwdBaqRh0Cx8G4kFHtmyA6GmuAvIcmpXtCJB1o/sMKPOWIHW7f1HjIwfSWClE9bCTTRjVN9tgEfKk2ZqjhG0i6C5qX2cWXXc9mHxbTjKHCdMKhnYwremZmjwS07itocQsnhU3ZgmBvN4zZaS6MYxKFFtyJ1paxL5o2XaBkhdzLKW3G0pdVwfyS32sFqdX0Wf8Cjk9XA1TSrYriYMJylGsYsXKhcHDcCbhfbmKRDOaIcVYJUebDMMmeEoDo1US6CjMfWIwlECGPO5FEholbEEPd0PfM7P0W8gwcl1y50EzeA/yuOrTbPoCgqgKvsUDRmo9NkRq6V9KKpAjCzXh7J2LCIgGWR8CO6oqA9Kya+liR4Tpi/tecnR4AGS1kFy3sjUyRGVnYspTjTTuvR5WVJtA0+c4ceB/RZxvdhQFieaXzcTccJunfdUHR9YvSJA4j8IELD1OzpDHVd5FKXAtQ0o3WQ9x4RYrbsrMVS4AsLMgMUYn5w4CRqw8Z53CmKLiVTZz3h60ToqLxmjNMi1XvdY4JVsQvFVTdgwHG6m0BCKY+AzXEi3BANJnrbKp18YKCvQvdMjl6Ec2q+xYlJyxiYCvBXMpYKqNuXLzRhmpwHQ9d1vpMCY9CnJ5csj70JVUCdlqhNYKYsLc8aRwgndWaCObeM2XWdLOYpLqGWe+reUdplrigKwLG7X24IVEN9e44zrzSuENlOmBJNd7qMiByvOzHBCDdW9SmLIO2764t2uxei4rpvqwbzUnRESvJGJml8KtWGbLfHkQQKugqbXsB6qNHe9E5CoGfgwJzD45QG+Aogfk0AuiwdpGZc0QYeqOoE20HHer2SW4Z0GoP4rNKkFhGOEBwgyrQqWlnfchaUb2nVAyWvZ7Nj4dwTIeMm60CdEDo0Ub41az3XuIc68SOzEEVlRNDpWjZvqaVMe+1x3K3PIqNlo28JM5qe191AVtki8qpuqWDCmhy8KyOh4eQ+6Rw2nJ2lihjJZLp+X+T/RhsY4aye21oLahZlSOLVSElqW7UGQqV2aZVANo1STd5q3x2O1dgtAiDu10AygHliJWDREdzz7solGWimXN+REZfEuLXd3qEZIoEtqOxdn0nthazmuRVVjBlHyakwc9Mza6kWH3fYkjyE0E+j0RyioSVEZcRZ1tm5QzM5zJmds0PfCQ8x+dG3QefllgeoWZ6QIIgmOtE1ymItNZfXn12OmLSMzyoKBJXkyR3tQVjpvBZqiXy0uFuLyZiLhnFu9BXRzjsBFKJRgeYNmzDM90wO5WCbSchaq/G/ddnB2Z4S7JXo0KRTTmlMGctrjC/ZsR1CLqEkrcK9ftM+fvgLatUpjVKcBa0cwplFp+rHfOy9U3xSUi11teLcW4mzRdoiQINMpSse1du1DHHdXgfZQjwO8X6MSMBPFMLmxemU6HlSU7YSYyrz2TCJBtJZd+UXJjNFLsDvRKrumF+I6CZdV88qxbR7PkypJlAcQaJR7WxOpsLI+t2awVGVOHE2uGP7CD8tD7s2yvVAArLyncnisvQYLdzFZHyF+o8OsbevIGGJ4D2I558lbFJJHOHLqqyi4XvEJE7/wSEkbKtrETWGAuF/BVx04wRZ15mmLo7TNXue5mNO3p37SoRtzlY0SOAUwT2+8zblmSMVGhUa4x8udolC9///W/AemAfJ4=",
  "metadata": "{\"func_name\": \"getGoodIndices\"}"
}