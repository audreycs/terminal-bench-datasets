{
  "question_title": "semi-ordered-permutation",
  "question_content": "You are given a 0-indexed permutation of n integers nums.\nA permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation:\n\nPick two adjacent elements in nums, then swap them.\n\nReturn the minimum number of operations to make nums a semi-ordered permutation.\nA permutation is a sequence of integers from 1 to n of length n containing each number exactly once.\n \nExample 1:\n\nInput: nums = [2,1,4,3]\nOutput: 2\nExplanation: We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation. \n\nExample 2:\n\nInput: nums = [2,4,1,3]\nOutput: 3\nExplanation: We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.\n\nExample 3:\n\nInput: nums = [1,3,4,2,5]\nOutput: 0\nExplanation: The permutation is already a semi-ordered permutation.\n\n \nConstraints:\n\n2 <= nums.length == n <= 50\n1 <= nums[i] <= 50\nnums is a permutation.",
  "platform": "leetcode",
  "question_id": "2785",
  "contest_id": "weekly-contest-348",
  "contest_date": "2023-06-04T00:00:00",
  "starter_code": "class Solution:\n    def semiOrderedPermutation(self, nums: List[int]) -> int:\n        ",
  "difficulty": "easy",
  "public_test_cases": "[{\"input\": \"[2, 1, 4, 3]\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[2, 4, 1, 3]\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[1, 3, 4, 2, 5]\", \"output\": \"0\", \"testtype\": \"functional\"}]",
  "private_test_cases": "eJydk8FKw0AQhj3oe4Scg2RnJ9msz+DNi1B6EKlQkLbQ5CAi+BD6vs4/MwVJVdwUym4nm3/+/5vt++Xn3dWFfu5vZbN6rbe7wzTWN1W9Ck0Vm4rWdVPV+2n0csDPcXMcx5fDBoWnafc4bve7h+f6ram+C8jb4VyA/i9AKhCXO0D7c4G2yAH/aCIWmYjqg5f7EI3uN5kyK6QyEqpb7qZTJP1JaT5hLjM0iE4WRUybVTZIA0qyyjfKY0ZDqRMYSI1kz3KUcbaVGnxg7dRPREaMTdRFmGRhnMAqaoTHcppl7WRFCceiMmZYkW0y3IjXGjV5PcjDiKYwleb3si8g2FonViFLgpSaKpo39dsaHFBAcjRHSsRD6ujGkEdDDEaOnJb6j5YZHJAFIRAAdIPTBnik1iEEo5oVTdKJOFgFEWa5cyr6P/ntU9mkLbL1077kPth99e5zMN86i+B5TvPpPG/y/Nl4KBdyTuzceufolw58lTM5d/Y59D6XweaEec1zc/4r9/rj+gvHWE3v",
  "metadata": "{\"func_name\": \"semiOrderedPermutation\"}"
}