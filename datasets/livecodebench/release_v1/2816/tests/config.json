{
  "question_title": "lexicographically-smallest-palindrome",
  "question_content": "You are given a string s consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in s with another lowercase English letter.\nYour task is to make s a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nReturn the resulting palindrome string.\n \nExample 1:\n\nInput: s = \"egcfe\"\nOutput: \"efcfe\"\nExplanation: The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'.\n\nExample 2:\n\nInput: s = \"abcd\"\nOutput: \"abba\"\nExplanation: The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\".\n\nExample 3:\n\nInput: s = \"seven\"\nOutput: \"neven\"\nExplanation: The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\".\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists of only lowercase English letters.",
  "platform": "leetcode",
  "question_id": "2816",
  "contest_id": "weekly-contest-346",
  "contest_date": "2023-05-21T00:00:00",
  "starter_code": "class Solution:\n    def makeSmallestPalindrome(self, s: str) -> str:\n        ",
  "difficulty": "easy",
  "public_test_cases": "[{\"input\": \"\\\"egcfe\\\"\", \"output\": \"\\\"efcfe\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abcd\\\"\", \"output\": \"\\\"abba\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"seven\\\"\", \"output\": \"\\\"neven\\\"\", \"testtype\": \"functional\"}]",
  "private_test_cases": "eJztmEmuJEkRhllwBFawadW6xQE4CRLNwifzeXYPHxASh4D78serrpagGqlrTefivVRkpIW52f/ZkP/47b/+8PvffLz+/Du8+cvfPtlU5vj0p+8+/fBp/PDp0/fffcpz/PelofoYp6j3Is0khs2JhU9///67/zAgvzYgv8mA/9qA/yYD9LUB+iYDnH9t4cu1X2jieb428eXaLzQxfi6S3xZK9TPZVOqbTKx6v7ax6vomIzMlFS5dm+3sfhw7nNO2j2DYzJxucnOMrKvWtHhTy9pwunh4d4/kmVsVow/7FrNdKJHFLmuP6qrD95x8zt2n2Mc5k6SYyQfndUxPT3zbEUMOj7Op85xyq8yxnrNfm4JvSk5lQw9Pc6MKelh7UiqOeshcKip1nS2fpGctD4Xh0rKuhVZbvDc8OVpDlqt8uDu88sdWZvI0Zuzg1T4hchHoWKG7oOViGaaYJ29NdodoS+lBHr8PTpCqDc6GeUItIh4nd7tx2ej87GI0SXRGHeqQl53yw2PqXcngwrk72iMYPTGKtFWvvoZHmMd4m/xsviV91WYsFfEYzdOzknl6mMZTm4uLlQOJenX2oS9LYpbi1pIrzHFiSB4nfx4WSrjLTtYNbcIfZXxbpOZYw0i3zDF9rIequXYrLb3M5JUT/TB+9smKiGlXS08HX9mU1DOkaUzJ5dn1KusZCZIofXhbTyx47q6asW2Q+kEi8Z6GaXWqkc+xhbPtmo1zLdv6FQcHl+nJVlNYDC9VuKbIQ0+d1trTp5iuZ5S0yyqPnHXjsSjeu+yzbGiD7dCCQ7ylT6t2JyhrGmQTv0tCblNMGUmoe4a+yNpuHJLIXvT06B7CfZZdsfvMxc3pSWYel04IzHBF4fizra1ipxpqq4+v8/hHFy9P8kJx6eJDseUhxL0XQlxUNm121KPv0x5H0Hp2C852a5aEzgrLcXbL9qNctX0q0uIak30zNRfZnGYhyk1mQtq1mjyaK/3ZZcOFx5vYI87qzFpZdlv8ZrvvVDzladPXyCebFHlKQJh1X6yVyJdxXhrWI6cnuTrKZ4QHN6oKqNkA4ejYjwgb77MxRmhSkdkqVcc/NRH6wg2T3YhegLCTHGdxL8L6UYltGpEye+hFWADhCIRxkxKegvSfEa7+qa6GF+Fq7YtwIESVUajJbWmSTrkIHryLHwiH0PSTgvDREnEg7LnTQFgJYjILY6qEaZ4scfhLQmiUBy8j4hVMyEzzD4Rl6VwWz5t+i4sKTgdiviaBG+VqFJMN3JPmRb2qHHDKwowk9eAovX0gbJuLjH9BuCoDhHkSNIwHZozpmrRXBQhbMYCwcxSNzsobRk0qJowEwok+EIbHApknUi/CnMUgnEJOJZNaQYL4joGszYuwNAMIKzxIGvVewnVixn4gzH5EOMC3GZb8jLB4sxA80ICDQRoBhBu+8yJsXoS5NkPYxFhRXqcXYW/g6QfCOBeEgeBA60zANyCM80vVehL8UYSYkwUt4yeEPQ82RWpLOv8GBwgH7YJCtDkQ9kXyXqSNYVuuWUZuIMkIM6JqIQhI8BdhhZhXSA9hAMLIs3bcZ8U5kY1eBCD8oQkHhJ0PXJQMxRi5HXiFIl6EyZUEhCFEEaA1IBygXgnTgT4jDF0CYRzlzcLDMqFybYZaByV7ZA1al9A3KBSmA2EOhKF1i36mZMW/F2HzIgw6lQU1krnIUc1nsALC4IM0CMtlVJce4rEz8yKsnZMWCHcGOhMoVekLwr904qmpl2XQedEDtkbRTibEEIw+t8ihRHqUKehTbrCu6kBdEFKGkKPi4wTJTrO2V7TfnKJytrBmLE8n69ta2QZ1+znKmP2YxTj1HWZecV0Wi78dvf24xt5b045qXkDHij79unzEHQO1FUWnDk7od5ggeIjCuAtf5Kyrc3xmzTtCNDkbrSpXP6MlWAmhF1Q2nfwR/qTppouEUQMzyF4saj15E3I409YUp+h58yPcQZOq2UpuWmd94cmKbrkx0mK7BFYDQ/JQ//Rgsk1zhVuRrkq8FcF0GTNcc8J2hGC6elAYKNgTLFoJPo4aN2wvTh9noXYJZQfVQ9UiREdGndLZK/Shg8Tj/ExGYARokwnvEe8KDZW9IwETK4KXt7Ixt50zu9ZbMsdd00283eAkOly1VpIrl6eiFmYXHEtglRLD2wyZ16fkJdNa6ga9Brr5jTBw3TEJBl2e0+45WL3SB2HxWIp7Y1LA2Qb3XjCEnaQwafpQtgx69LD2SUlHeYxRttKpNCyKdg3rjI5sQANDx6KZlAvzng0EsnE2vYncDsdc3ICPRWk8qUtxOTS42SQbCLxD12ChYjLZaJYxIj2kRvULCWuGS5vrxkmcePKduhwxVzNuSNH41DqytS06eR4UIYmZDrLhk4ZUMJUFpkVq4/Ql60LYJRrzmMZWD6mtOmVn4zojIop7n/se4ngy6FvPGJhGsrv96AIr/E4V0VVbu6y5g7mwX48J9kL8GRroxNkyz0aIzjPUNPu9VeeTuMV8VKxTMWUhU+3WtsNkQLxVzCFITLpljKrgi0uTF6OeJNSQ5R5tAuA1aR+OYALppczC8FV/bq/5lfxfyf+V/P8T8n/hONBX2vlZPXYMFUdhdt5il2eFHVvHUhfLM+uTBjRKWCIx3V15Wo+6xTbu1hClXtqVu1LC6L5oKUyqhnc2b8gZMpB3YkLC9tgFlpLnGLoDs5THbB3iUwFgJ3d0mCHXs1K7AwTnvCfHXuHfVS8k+8ilcfraeM63WmzNfle1BOeYscJcXaCeHVQOgF7XjFoifgo3CmwpSkGbDAJI6/GLhWdbEKeepjy3gh8yeeeiRZ/v3IWd4Kz7PqjWR0yIX2FzpztFrqWsvpA3iTKpdrpGewy5AKe1SQ5Ctag/o5T5CLmHRXTgAE67MRWGdiSHBJPO8xx9gmHRxOX9xGKsZaIVVjmPWlhOF7ZnyLRC19TJ+rtyQqnAJhtFUWPyVB32ZyFqKuaWmdTBRH1BOKpg8t4yrtibSRv0Fbvn5GbNraLwGVPSE5+bWDGDxSvqwR0Z3sOgukKc1HyQQxSPrEP9Js9eC7BHeU0Ko/Y5WU7sPOkUj0I3tS1YMVGAOHa/w41wxcWN/ejdGZkNDGXhkr4XaFgH14ppQ09hj2QvltMWd+atWGkwX6MiALRjnnimKqHuWXkP9erAMSizcGIuqqA+HpQaGcbEtmNJuo5XDC26sRHrarouy9tnh9SFq749p6P0hqIztrM0y5UQ0hiS1qnFAeMI+T+jPrUMuvEst7mfccL9ZwqGHjGnI8tvytgrzUNFtYRFyRut+mWo2YcHZko3PFQb1RptV23Zc/Nt6C2lFTJ2qkRyaNbRNAK62DP78COHdXnMeFC2aLnwt/cruqu7yrJT92JfdD82sndb9d3M7c3HCB4uUXy3BhS5fOH4VNLZ55EnOjI+9ZPVvdb/3C+t3u6sco/JG3IqyYKmKNUM768TNFB0UfyIhqyKogekosmuutP53ek9tI21TzvglhzI71TV6zuW/Ekh8rUgIj9YfgY1UYg60yQJ5FusngG+g3zIjmHPAflLRVshNrQqFrhFv2FPVtpYbLi6KEWNY2XL1nELqap3qUQ5gaGXfL6RxQjyS33JV0FFjAWfyZcf5MsFOaOlZQ3wEbbP5AsyYWerRdGGV3LCDBcBGcjvaMYW356DpBUE8gdkB/IxFSjFg9ZokrxOOF3US77xNXHEzKOQ9x/Jtwin9pge8CztBTZ6Zp0OL/maQD56u2VYYQ1WXcxEBQ6gC0LlCiGJVEh79MZ3129cRpHVIC7UZ/IFyJ/ZoFGAfF+w8KIWvV0a5PshHEwKsatIjlVTWHrJT8mYJ7/kw70k6hYCmDoxPFP8nTuS1zKDfCzRGPreXzhLwqOsH05hvx4qiyh5e38YAPlew0XUWaQD5KcP8tVn8uklHxOE94vQiNGr9Eu+NsJrLiz6u9eQKkIP97TtGCq9KQF1zRuMXu4l34J8DD76JR/uBcnTS34plYSVBPLVS77otebIX/LhAFVudEHo8w6GkGJISbWqfiSfJV8wBE08Fd/GFq5f8l/BSB0hHylAPm3O0Q1AfsekxwXS8ZLv7Es+b1BV0SDfgvz8vOTbl/zsvpBfERIYdoS13lYVYchYryB++iC/iEbjyQx4yLAWj4Emy/ylR1Xq6JYuYb51wMsjOi/5MWsH+GQT1LmPpKocH+RjUAX5LVJ4yRdPkUl9kB874N4/kf+/xoG//vOP/wbNpbEz",
  "metadata": "{\"func_name\": \"makeSmallestPalindrome\"}"
}