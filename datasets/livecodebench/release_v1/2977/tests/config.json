{
  "question_title": "check-if-a-string-is-an-acronym-of-words",
  "question_content": "Given an array of strings words and a string s, determine if s is an acronym of words.\nThe string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"].\nReturn true if s is an acronym of words, and false otherwise. \n \nExample 1:\n\nInput: words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"\nOutput: true\nExplanation: The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym. \n\nExample 2:\n\nInput: words = [\"an\",\"apple\"], s = \"a\"\nOutput: false\nExplanation: The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively. \nThe acronym formed by concatenating these characters is \"aa\". \nHence, s = \"a\" is not the acronym.\n\nExample 3:\n\nInput: words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"\nOutput: true\nExplanation: By concatenating the first character of the words in the array, we get the string \"ngguoy\". \nHence, s = \"ngguoy\" is the acronym.\n\n \nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 10\n1 <= s.length <= 100\nwords[i] and s consist of lowercase English letters.",
  "platform": "leetcode",
  "question_id": "2977",
  "contest_id": "weekly-contest-359",
  "contest_date": "2023-08-20T00:00:00",
  "starter_code": "class Solution:\n    def isAcronym(self, words: List[str], s: str) -> bool:\n        ",
  "difficulty": "easy",
  "public_test_cases": "[{\"input\": \"[\\\"alice\\\", \\\"bob\\\", \\\"charlie\\\"]\\n\\\"abc\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"an\\\", \\\"apple\\\"]\\n\\\"a\\\"\", \"output\": \"false\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"never\\\", \\\"gonna\\\", \\\"give\\\", \\\"up\\\", \\\"on\\\", \\\"you\\\"]\\n\\\"ngguoy\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}]",
  "private_test_cases": "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",
  "metadata": "{\"func_name\": \"isAcronym\"}"
}