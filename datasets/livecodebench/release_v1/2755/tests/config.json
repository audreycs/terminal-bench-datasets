{
  "question_title": "extra-characters-in-a-string",
  "question_content": "You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.\nReturn the minimum number of extra characters left over if you break up s optimally.\n \nExample 1:\n\nInput: s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]\nOutput: 1\nExplanation: We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.\n\n\nExample 2:\n\nInput: s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]\nOutput: 3\nExplanation: We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.\n\n \nConstraints:\n\n1 <= s.length <= 50\n1 <= dictionary.length <= 50\n1 <= dictionary[i].length <= 50\ndictionary[i] and s consists of only lowercase English letters\ndictionary contains distinct words",
  "platform": "leetcode",
  "question_id": "2755",
  "contest_id": "biweekly-contest-105",
  "contest_date": "2023-05-27T00:00:00",
  "starter_code": "class Solution:\n    def minExtraChar(self, s: str, dictionary: List[str]) -> int:\n        ",
  "difficulty": "medium",
  "public_test_cases": "[{\"input\": \"\\\"leetscode\\\"\\n[\\\"leet\\\", \\\"code\\\", \\\"leetcode\\\"]\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"\\\"sayhelloworld\\\"\\n[\\\"hello\\\", \\\"world\\\"]\", \"output\": \"3\", \"testtype\": \"functional\"}]",
  "private_test_cases": "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",
  "metadata": "{\"func_name\": \"minExtraChar\"}"
}