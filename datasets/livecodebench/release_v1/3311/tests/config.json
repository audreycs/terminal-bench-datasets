{
  "question_title": "ant-on-the-boundary",
  "question_content": "An ant is on a boundary. It sometimes goes left and sometimes right.\nYou are given an array of non-zero integers nums. The ant starts reading nums from the first element of it to its end. At each step, it moves according to the value of the current element:\n\nIf nums[i] < 0, it moves left by -nums[i] units.\nIf nums[i] > 0, it moves right by nums[i] units.\n\nReturn the number of times the ant returns to the boundary.\nNotes:\n\nThere is an infinite space on both sides of the boundary.\nWe check whether the ant is on the boundary only after it has moved |nums[i]| units. In other words, if the ant crosses the boundary during its movement, it does not count.\n\n \nExample 1:\n\nInput: nums = [2,3,-5]\nOutput: 1\nExplanation: After the first step, the ant is 2 steps to the right of the boundary.\nAfter the second step, the ant is 5 steps to the right of the boundary.\nAfter the third step, the ant is on the boundary.\nSo the answer is 1.\n\nExample 2:\n\nInput: nums = [3,2,-3,-4]\nOutput: 0\nExplanation: After the first step, the ant is 3 steps to the right of the boundary.\nAfter the second step, the ant is 5 steps to the right of the boundary.\nAfter the third step, the ant is 2 steps to the right of the boundary.\nAfter the fourth step, the ant is 2 steps to the left of the boundary.\nThe ant never returned to the boundary, so the answer is 0.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n-10 <= nums[i] <= 10\nnums[i] != 0",
  "platform": "leetcode",
  "question_id": "3311",
  "contest_id": "weekly-contest-383",
  "contest_date": "2024-02-03T00:00:00",
  "starter_code": "class Solution:\n    def returnToBoundaryCount(self, nums: List[int]) -> int:\n        ",
  "difficulty": "easy",
  "public_test_cases": "[{\"input\": \"[2, 3, -5]\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"[3, 2, -3, -4]\", \"output\": \"0\", \"testtype\": \"functional\"}]",
  "private_test_cases": "eJylWMuKJDcQ9MHf4HPT55KRVCVVyfjmnzAsezBmDQtmdsE9B2MM/gj7f12ljAhlz/TMPnrZmlarpFQ+IiNT/c+3//303Tf9388/7oM3f53fP3x8vJx/OJ3fLG/P0+n84fGCiXh8vbz743L58+O7Y+K3x4dfL+8/PPzy+/nv6eS3zl+/NWx37E337J1O23S6w+iwTKfQptM9xtfp1A4pd4g49qfj+XoZux9CNmPCBnG7ZmG18fF1tzXF6ZS70/Z1ZZ+b7WP/tvTpULBn63uO9V1k6ztscl+52uL+eh/PJj1orvWFJhULmq3Z7NBq6tqifmjf1/94aTBnhTWNayp2NYxxzmLb5zETYJS9rLYk2TL4YJM6h7hqEumLGWJs8zG7PgnS/PlBko23nmcvwqf/PNt7e/b5khtyXl1w4+VtTV7W5hXNXxL6yaNfPvG2Zp/jvVfNeRL78gVJXjp8VkMZsAqQJsBvH0ZD72ZYAyZjB2oCmg3gxPfKhLxOnsXwW23b2ldkE1CUhaulXzL5hm9jhKa8BZmAS5CPSOaRj0UCV7KDZcyxl+ldp8FNxe2uI8HBEFWxMCfAwm0Si20wv8mmbro29XOyOzBTtUNApnqp4IndqHR4Kdpnmm2cj7l9nPbl+XiOenHE4JC1C5r3ublgXOzdkmw+Hw7dx3mxY3KBfDt9RohTcoSVuruOb7kb0xdlzXUrXdSMk81jfWk3tvuj01wHRbmay0MkvJpxfmJoElw7M5qMX+oTKQlXT+vel9AhEZhUhUITpJkRvU4gLZryZR2TixxJAQnuMd/kof0CTwHNVVmIOhCd6avgCNznvqFdyU6qHVE5wjyENqxXSelUzOHZ5pEnyHo7gelMrwwT4BuAh7CvI8msqsIQ+my2cKXBGWHzlNfELuSPTDcOZBqDNFKEMUa2LbCAwpCkgQlY+lQeii9D/2PhamMxGOMcbSmoBsS1eDITShiXxrCuxLT49XgNNRAbL2AZEFBasYMqDjtdqe2avxHidVLDsHCltgyk4bQ40Nqk5+LS2Q6mj6C93Ay3V3cQ8mhRgShDP0NDHJ4ADFegTUEgEktfnZmgoAJ4rQhfghyxPnowy88ZIoFK78KkuHbt48iuyhgjC8RDiI1Qw01VnJF56iKFi8oYMmTVyNSkQoBXE+DZIONkC5A6Uxy+uAodh3MDEU4iYCBHuSoTqzRYKQ5NBXFyRWHv7lmR6CWC87UfM8s6kFpsCT5QFGGydR/UUkTalHKsDPQW0ysTBfDLQAqJqfL6UAdHFLqMPbxLeJA8MhArxVYgGyifwXbq1FwGxclzPVIUBsFb0issjO92ReVVGGd1qL4xoj9G1qgRYw+p5qX5Hsw0aSKSerWJCREEfkKJ2GkjjAwVYhJlLXonlnfempKsj6ORnOVsiEZPhqYV4HFM2ZSTMK+KK/jMIxYIVQBFuKuZGmPStM6VYZVwYYS92UmZqtqkDgA5tTKfIi+//W1UMRBdz+ou5HSYHccmkk8ejmYu4smi2nlAVN1yJjei4MKoTaa5O8FAzywio4WbHJ4poBJVyQGJXTJj4Xvhfsg8XlDnpNIwnJEUhnGv9xhkUMFWgIwDbBacWOWz8zdLzKKrAlYEqwXuDi4nVsVnMNxGJi6spxq7wu86Md9umKNd4W/qf9nUuZ7nysO6/QQLbVQ6Mpizat6T3yaqux2p/JUr/2Xf67M5rAosGNf/aCPlcYfMdBeJDB10FFh5qSvMGk0WZeH170HmLuT74kHKXiDRQLVBg0OdCaxe7HxWMlcay1xJAghVtlSqsvxuKJ/5v+riiN7L3QwRLN2is5CJYsrUdr83paFUVCZV9RB8ICAOXCfH/YHpo6Bdt0t5uNya7TB6jE0ZWXWHfvpD5qs/ULz99/v/AdHTKbc=",
  "metadata": "{\"func_name\": \"returnToBoundaryCount\"}"
}