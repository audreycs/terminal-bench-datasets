{
  "question_title": "minimum-operations-to-form-subsequence-with-target-sum",
  "question_content": "You are given a 0-indexed array nums consisting of non-negative powers of 2, and an integer target.\nIn one operation, you must apply the following changes to the array:\n\nChoose any element of the array nums[i] such that nums[i] > 1.\nRemove nums[i] from the array.\nAdd two occurrences of nums[i] / 2 to the end of nums.\n\nReturn the minimum number of operations you need to perform so that nums contains a subsequence whose elements sum to target. If it is impossible to obtain such a subsequence, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n \nExample 1:\n\nInput: nums = [1,2,8], target = 7\nOutput: 1\nExplanation: In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4].\nAt this stage, nums contains the subsequence [1,2,4] which sums up to 7.\nIt can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7.\n\nExample 2:\n\nInput: nums = [1,32,1,2], target = 12\nOutput: 2\nExplanation: In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16].\nIn the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8]\nAt this stage, nums contains the subsequence [1,1,2,8] which sums up to 12.\nIt can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12.\nExample 3:\n\nInput: nums = [1,32,1], target = 35\nOutput: -1\nExplanation: It can be shown that no sequence of operations results in a subsequence that sums up to 35.\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 2^30\nnums consists only of non-negative powers of two.\n1 <= target < 2^31",
  "platform": "leetcode",
  "question_id": "3025",
  "contest_id": "weekly-contest-360",
  "contest_date": "2023-08-27T00:00:00",
  "starter_code": "class Solution:\n    def minOperations(self, nums: List[int], target: int) -> int:\n        ",
  "difficulty": "hard",
  "public_test_cases": "[{\"input\": \"[1, 2, 8]\\n7\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"[1, 32, 1, 2]\\n12\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[1, 32, 1]\\n35\", \"output\": \"-1\", \"testtype\": \"functional\"}]",
  "private_test_cases": "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",
  "metadata": "{\"func_name\": \"minOperations\"}"
}