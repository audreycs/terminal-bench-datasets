{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12514",
  "patch": "diff --git a/doc/whats_new/v0.20.rst b/doc/whats_new/v0.20.rst\nindex 5cd2aa13b7773..9bdc440040dda 100644\n--- a/doc/whats_new/v0.20.rst\n+++ b/doc/whats_new/v0.20.rst\n@@ -134,15 +134,20 @@ Changelog\n :mod:`sklearn.preprocessing`\n ........................\n \n+- |Fix| Fixed bug in :class:`preprocessing.OrdinalEncoder` when passing\n+  manually specified categories. :issue:`12365` by `Joris Van den Bossche`_.\n+\n+- |Fix| Fixed bug in :class:`preprocessing.KBinsDiscretizer` where the\n+  ``transform`` method mutates the ``_encoder`` attribute. The ``transform``\n+  method is now thread safe. :issue:`12514` by\n+  :user:`Hanmin Qin <qinhanmin2014>`.\n+\n - |API| The default value of the :code:`method` argument in\n   :func:`preprocessing.power_transform` will be changed from :code:`box-cox`\n   to :code:`yeo-johnson` to match :class:`preprocessing.PowerTransformer`\n   in version 0.23. A FutureWarning is raised when the default value is used.\n   :issue:`12317` by :user:`Eric Chang <chang>`.\n \n-- |Fix| Fixed bug in :class:`preprocessing.OrdinalEncoder` when passing\n-  manually specified categories. :issue:`12365` by `Joris Van den Bossche`_.\n-\n :mod:`sklearn.utils`\n ........................\n \ndiff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py\nindex e10aa51d31a10..da6a8308abe21 100644\n--- a/sklearn/preprocessing/_discretization.py\n+++ b/sklearn/preprocessing/_discretization.py\n@@ -192,6 +192,9 @@ def fit(self, X, y=None):\n             self._encoder = OneHotEncoder(\n                 categories=[np.arange(i) for i in self.n_bins_],\n                 sparse=self.encode == 'onehot')\n+            # Fit the OneHotEncoder with toy datasets\n+            # so that it's ready for use after the KBinsDiscretizer is fitted\n+            self._encoder.fit(np.zeros((1, len(self.n_bins_)), dtype=int))\n \n         return self\n \n@@ -267,7 +270,7 @@ def transform(self, X):\n         if self.encode == 'ordinal':\n             return Xt\n \n-        return self._encoder.fit_transform(Xt)\n+        return self._encoder.transform(Xt)\n \n     def inverse_transform(self, Xt):\n         \"\"\"Transforms discretized data back to original feature space.\n",
  "test_patch": "",
  "base_commit": "6d9acd7de67fcdcddbf4e2a462270e2ef90f39c9",
  "head_commit": "84b3db6a87cae25ae57217508215eb96eee6f041",
  "created_at": 1541298055000,
  "version": "0.21",
  "duration_changes": "[{\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.036375049501657486, \"head\": 0.19740809872746468}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.004617553204298019, \"head\": 0.003478582948446274}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.015472088009119034, \"head\": 0.0077032484114170074}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.008351344615221024, \"head\": 0.008420243859291077}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.02216343954205513, \"head\": 0.022068332880735397}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.06424032896757126, \"head\": 0.013631787151098251}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.030202049762010574, \"head\": 0.04769940674304962}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.026174865663051605, \"head\": 0.1394999846816063}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.05536668002605438, \"head\": 0.003361932933330536}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.007962666451931, \"head\": 0.005606893450021744}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.09438978508114815, \"head\": 0.00673685222864151}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.026309829205274582, \"head\": 0.01733679324388504}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.015745099633932114, \"head\": 0.009923644363880157}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.04339456930756569, \"head\": 0.050440169870853424}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.17786115035414696, \"head\": 0.18692348524928093}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.004580892622470856, \"head\": 0.004136186093091965}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.006786644458770752, \"head\": 0.006251376122236252}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.008148785680532455, \"head\": 0.008418392390012741}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.017666317522525787, \"head\": 0.02244182676076889}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.010455381125211716, \"head\": 0.009932830929756165}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.05259448289871216, \"head\": 0.10114724561572075}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.15461283922195435, \"head\": 0.036321721971035004}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.010814659297466278, \"head\": 0.004490021616220474}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.006399556994438171, \"head\": 0.06205029785633087}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.006676021963357925, \"head\": 0.008785735815763474}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.017219875007867813, \"head\": 0.017398688942193985}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.010292217135429382, \"head\": 0.010417122393846512}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.045544181019067764, \"head\": 0.07507366314530373}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.029735371470451355, \"head\": 0.14940349012613297}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.03174329921603203, \"head\": 0.0034651868045330048}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.010809730738401413, \"head\": 0.05298873409628868}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.01168568804860115, \"head\": 0.017290491610765457}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.09058891609311104, \"head\": 0.022195082157850266}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.015247125178575516, \"head\": 0.012509413063526154}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.041196078062057495, \"head\": 0.046000201255083084}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.12505404651165009, \"head\": 0.13728663325309753}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.0037098675966262817, \"head\": 0.0036973506212234497}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.007861476391553879, \"head\": 0.0058623552322387695}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.008467406034469604, \"head\": 0.006674241274595261}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.022068604826927185, \"head\": 0.017283055931329727}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.05355149507522583, \"head\": 0.009991347789764404}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.031760651618242264, \"head\": 0.060006532818078995}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.18439745157957077, \"head\": 0.13487713038921356}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.0036910325288772583, \"head\": 0.004218112677335739}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.007762189954519272, \"head\": 0.051411084830760956}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.008345693349838257, \"head\": 0.0090421661734581}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.021844882518053055, \"head\": 0.0281883142888546}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.012274142354726791, \"head\": 0.013769164681434631}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.04331628233194351, \"head\": 0.05223899707198143}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.045366592705249786, \"head\": 0.17844842374324799}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.0043488480150699615, \"head\": 0.003763485699892044}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.08492136746644974, \"head\": 0.008624128997325897}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.014330901205539703, \"head\": 0.006948787719011307}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.02190057933330536, \"head\": 0.017311349511146545}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.01368740200996399, \"head\": 0.010182477533817291}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.05956573411822319, \"head\": 0.0354933999478817}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.13518543913960457, \"head\": 0.0480794757604599}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.004672568291425705, \"head\": 0.0047151148319244385}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.00839933380484581, \"head\": 0.0769723542034626}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.0069919005036354065, \"head\": 0.008462563157081604}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.05627408251166344, \"head\": 0.018881067633628845}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.010581310838460922, \"head\": 0.010030727833509445}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.029998138546943665, \"head\": 0.060454703867435455}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.19097643718123436, \"head\": 0.16174106672406197}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.004147391766309738, \"head\": 0.0035378150641918182}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.006179429590702057, \"head\": 0.008284639567136765}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.0068649426102638245, \"head\": 0.009569358080625534}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.017602235078811646, \"head\": 0.02348378300666809}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.010430682450532913, \"head\": 0.013451356440782547}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.03078756108880043, \"head\": 0.0535232312977314}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.15410587564110756, \"head\": 0.024185191839933395}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.00460328534245491, \"head\": 0.003399871289730072}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.0077563561499118805, \"head\": 0.005707055330276489}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.0067970529198646545, \"head\": 0.006761763244867325}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.022104300558567047, \"head\": 0.017272762954235077}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.009968578815460205, \"head\": 0.038198839873075485}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.05441499873995781, \"head\": 0.03007761761546135}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.0333390012383461, \"head\": 0.07345545291900635}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.004682786762714386, \"head\": 0.03168727457523346}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.07484257221221924, \"head\": 0.009883496910333633}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.008426107466220856, \"head\": 0.0082838274538517}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.02143102139234543, \"head\": 0.07369296625256538}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.01311241090297699, \"head\": 0.013526037335395813}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.03415495529770851, \"head\": 0.03033207356929779}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.12752988561987877, \"head\": 0.14356445893645287}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.004283193498849869, \"head\": 0.003646746277809143}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.007577192038297653, \"head\": 0.007639165967702866}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.008257970213890076, \"head\": 0.008369650691747665}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.021866053342819214, \"head\": 0.022078219801187515}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.013400405645370483, \"head\": 0.030455082654953003}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.062496576458215714, \"head\": 0.038778338581323624}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.11328843981027603, \"head\": 0.12690594792366028}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.00403716042637825, \"head\": 0.003941301256418228}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.0063003189861774445, \"head\": 0.006246738135814667}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.064638152718544, \"head\": 0.0067949071526527405}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.020150817930698395, \"head\": 0.017633888870477676}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.010110557079315186, \"head\": 0.030222967267036438}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.029602043330669403, \"head\": 0.04331051558256149}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.14619572460651398, \"head\": 0.03818581625819206}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.005056858062744141, \"head\": 0.0049263425171375275}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.026786163449287415, \"head\": 0.00880809873342514}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.006999652832746506, \"head\": 0.010613478720188141}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.017822742462158203, \"head\": 0.027003906667232513}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.01069849357008934, \"head\": 0.07150980830192566}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.029771070927381516, \"head\": 0.04939737170934677}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.16888680681586266, \"head\": 0.05388977751135826}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.0043345242738723755, \"head\": 0.0036940686404705048}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.007823716849088669, \"head\": 0.04785173386335373}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.008403483778238297, \"head\": 0.006887394934892654}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.02074507623910904, \"head\": 0.01751277595758438}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.009982515126466751, \"head\": 0.05638793855905533}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.03808874264359474, \"head\": 0.03462861478328705}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.18076523393392563, \"head\": 0.03177190199494362}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.0043851882219314575, \"head\": 0.003479551523923874}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.005619451403617859, \"head\": 0.005625810474157333}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.006737429648637772, \"head\": 0.006970908492803574}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.017106492072343826, \"head\": 0.05089322477579117}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.009914401918649673, \"head\": 0.01355663686990738}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.04795507341623306, \"head\": 0.036073312163352966}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.1900290809571743, \"head\": 0.14641400054097176}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.004074703902006149, \"head\": 0.0034655556082725525}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.007601868361234665, \"head\": 0.005609199404716492}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.008281055837869644, \"head\": 0.006831038743257523}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.02096588909626007, \"head\": 0.017289988696575165}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.010000526905059814, \"head\": 0.010016679763793945}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.05242767930030823, \"head\": 0.05211428180336952}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.20175020024180412, \"head\": 0.02552887797355652}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.0034850910305976868, \"head\": 0.049228865653276443}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.005567390471696854, \"head\": 0.0100637786090374}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.006830304861068726, \"head\": 0.006974756717681885}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.01743185520172119, \"head\": 0.09920470416545868}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.009962636977434158, \"head\": 0.010019201785326004}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.049957022070884705, \"head\": 0.029096942394971848}}, {\"sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization\": {\"base\": 0.18916340544819832, \"head\": 0.09462447464466095}, \"sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler\": {\"base\": 0.005387172102928162, \"head\": 0.008175782859325409}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.00838565081357956, \"head\": 0.008465498685836792}, \"sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component\": {\"base\": 0.009089924395084381, \"head\": 0.07995250448584557}, \"sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification\": {\"base\": 0.023545511066913605, \"head\": 0.02482042834162712}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]\": {\"base\": 0.027456484735012054, \"head\": 0.01040739193558693}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]\": {\"base\": 0.040549296885728836, \"head\": 0.02914760634303093}}]",
  "efficiency_test": [
    "sklearn/decomposition/tests/test_nmf.py::test_nmf_regularization",
    "sklearn/kernel_approximation.py::sklearn.kernel_approximation.RBFSampler",
    "sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso",
    "sklearn/mixture/tests/test_gaussian_mixture.py::test_bic_1d_1component",
    "sklearn/model_selection/tests/test_validation.py::test_cross_val_score_with_score_func_classification",
    "sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_nan_inf]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[MLPRegressor-MLPRegressor-check_fit2d_predict1d]"
  ],
  "patch_functions": "{\"sklearn/preprocessing/_discretization.py\": [\"KBinsDiscretizer.transform\", \"KBinsDiscretizer.fit\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sklearn/preprocessing/_discretization.py': ['KBinsDiscretizer.transform', 'KBinsDiscretizer.fit']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sklearn/mixture/gaussian_mixture.py\": [\"GaussianMixture\", \"GaussianMixture.bic\"], \"sklearn/decomposition/nmf.py\": [\"NMF.fit_transform\", \"NMF\"], \"sklearn/utils/validation.py\": [\"check_array\", \"check_is_fitted\", \"check_random_state\"], \"sklearn/cluster/k_means_.py\": [\"KMeans.fit\"], \"sklearn/model_selection/_validation.py\": [\"cross_val_score\"], \"sklearn/utils/extmath.py\": [\"safe_sparse_dot\"], \"sklearn/linear_model/coordinate_descent.py\": [\"MultiTaskLasso\"], \"sklearn/mixture/base.py\": [\"GaussianMixture.fit\"], \"sklearn/utils/estimator_checks.py\": [\"_yield_all_checks\", \"set_checking_parameters\"], \"sklearn/utils/deprecation.py\": [\"wrapped\"], \"sklearn/svm/classes.py\": [\"SVC\"], \"sklearn/datasets/base.py\": [\"load_iris\"], \"sklearn/base.py\": [\"AdaBoostClassifier.get_params\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sklearn/mixture/gaussian_mixture.py': ['GaussianMixture', 'GaussianMixture.bic'], 'sklearn/decomposition/nmf.py': ['NMF.fit_transform', 'NMF'], 'sklearn/utils/validation.py': ['check_array', 'check_is_fitted', 'check_random_state'], 'sklearn/cluster/k_means_.py': ['KMeans.fit'], 'sklearn/model_selection/_validation.py': ['cross_val_score'], 'sklearn/utils/extmath.py': ['safe_sparse_dot'], 'sklearn/linear_model/coordinate_descent.py': ['MultiTaskLasso'], 'sklearn/mixture/base.py': ['GaussianMixture.fit'], 'sklearn/utils/estimator_checks.py': ['_yield_all_checks', 'set_checking_parameters'], 'sklearn/utils/deprecation.py': ['wrapped'], 'sklearn/svm/classes.py': ['SVC'], 'sklearn/datasets/base.py': ['load_iris'], 'sklearn/base.py': ['AdaBoostClassifier.get_params']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.011428571428571437
}