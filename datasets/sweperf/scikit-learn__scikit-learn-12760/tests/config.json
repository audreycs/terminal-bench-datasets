{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12760",
  "patch": "diff --git a/sklearn/metrics/cluster/unsupervised.py b/sklearn/metrics/cluster/unsupervised.py\nindex 1b2ae8b4c79c1..19954e84f9f7b 100644\n--- a/sklearn/metrics/cluster/unsupervised.py\n+++ b/sklearn/metrics/cluster/unsupervised.py\n@@ -299,8 +299,12 @@ def calinski_harabaz_score(X, labels):\n def davies_bouldin_score(X, labels):\n     \"\"\"Computes the Davies-Bouldin score.\n \n-    The score is defined as the ratio of within-cluster distances to\n-    between-cluster distances.\n+    The score is defined as the average similarity measure of each cluster with\n+    its most similar cluster, where similarity is the ratio of within-cluster\n+    distances to between-cluster distances. Thus, clusters which are farther\n+    apart and less dispersed will result in a better score.\n+\n+    The minimum score is zero, with lower values indicating better clustering.\n \n     Read more in the :ref:`User Guide <davies-bouldin_index>`.\n \n@@ -347,6 +351,7 @@ def davies_bouldin_score(X, labels):\n     if np.allclose(intra_dists, 0) or np.allclose(centroid_distances, 0):\n         return 0.0\n \n-    score = (intra_dists[:, None] + intra_dists) / centroid_distances\n-    score[score == np.inf] = np.nan\n-    return np.mean(np.nanmax(score, axis=1))\n+    centroid_distances[centroid_distances == 0] = np.inf\n+    combined_intra_dists = intra_dists[:, None] + intra_dists\n+    scores = np.max(combined_intra_dists / centroid_distances, axis=1)\n+    return np.mean(scores)\n",
  "test_patch": "diff --git a/sklearn/metrics/cluster/tests/test_unsupervised.py b/sklearn/metrics/cluster/tests/test_unsupervised.py\nindex d0db9b5027f6f..4b061313794e0 100644\n--- a/sklearn/metrics/cluster/tests/test_unsupervised.py\n+++ b/sklearn/metrics/cluster/tests/test_unsupervised.py\n@@ -234,6 +234,15 @@ def test_davies_bouldin_score():\n     labels = [0] * 10 + [1] * 10 + [2] * 10 + [3] * 10\n     pytest.approx(davies_bouldin_score(X, labels), 2 * np.sqrt(0.5) / 3)\n \n+    # Ensure divide by zero warning is not raised in general case\n+    with pytest.warns(None) as record:\n+        davies_bouldin_score(X, labels)\n+    div_zero_warnings = [\n+        warning for warning in record\n+        if \"divide by zero encountered\" in warning.message.args[0]\n+    ]\n+    assert len(div_zero_warnings) == 0\n+\n     # General case - cluster have one sample\n     X = ([[0, 0], [2, 2], [3, 3], [5, 5]])\n     labels = [0, 0, 1, 2]\n",
  "base_commit": "e73acef80de4159722b11e3cd6c20920382b9728",
  "head_commit": "86c54bf8d182c2351967d3ea8eb7e8c4864e831c",
  "created_at": 1544626989000,
  "version": "0.21",
  "duration_changes": "[{\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.02680174633860588, \"head\": 0.02669631317257881}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006005551666021347, \"head\": 0.005942001938819885}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.01110951229929924, \"head\": 0.011154428124427795}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.036199070513248444, \"head\": 0.028714902698993683}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.01587086170911789, \"head\": 0.01031813770532608}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.08065381646156311, \"head\": 0.6317780651152134}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.009535122662782669, \"head\": 0.02684802934527397}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.09477777406573296, \"head\": 0.19727086275815964}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.09901349991559982, \"head\": 0.09504227340221405}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.020447757095098495, \"head\": 0.01901444047689438}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026734746992588043, \"head\": 0.026160448789596558}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.0059144943952560425, \"head\": 0.005976911634206772}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011073391884565353, \"head\": 0.01111862063407898}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.03939708322286606, \"head\": 0.03600689768791199}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.01038547232747078, \"head\": 0.013365156948566437}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.6705244891345501, \"head\": 0.6758063472807407}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.10391858965158463, \"head\": 0.017800655215978622}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.19456243887543678, \"head\": 0.10472507774829865}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.10265068337321281, \"head\": 0.09442271664738655}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.01978227123618126, \"head\": 0.018967613577842712}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.02672377973794937, \"head\": 0.026697438210248947}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.00616917759180069, \"head\": 0.0060399919748306274}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011352837085723877, \"head\": 0.011276628822088242}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.029367458075284958, \"head\": 0.03218178451061249}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.011191114783287048, \"head\": 0.010565318167209625}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.20105531066656113, \"head\": 0.37814395129680634}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.08600941672921181, \"head\": 0.010010968893766403}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.037261977791786194, \"head\": 0.10467410832643509}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.10286212712526321, \"head\": 0.10253432393074036}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.0194704569876194, \"head\": 0.019124247133731842}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026454895734786987, \"head\": 0.026921387761831284}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006117548793554306, \"head\": 0.005978666245937347}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011375844478607178, \"head\": 0.01130242645740509}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.029384851455688477, \"head\": 0.03165679797530174}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.011109504848718643, \"head\": 0.010548565536737442}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.11545374244451523, \"head\": 0.6650703623890877}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.009665459394454956, \"head\": 0.016824673861265182}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.09562353789806366, \"head\": 0.1888960562646389}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.09646527096629143, \"head\": 0.09737186133861542}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019078329205513, \"head\": 0.019247718155384064}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.035801202058792114, \"head\": 0.026180289685726166}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.00838276743888855, \"head\": 0.005908932536840439}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.014104627072811127, \"head\": 0.011102721095085144}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.03440750762820244, \"head\": 0.02833421528339386}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.01031840592622757, \"head\": 0.0103231742978096}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.65835065767169, \"head\": 0.6078140959143639}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.08377338200807571, \"head\": 0.010581109672784805}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.10709519311785698, \"head\": 0.09276985004544258}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.09414581581950188, \"head\": 0.10311035066843033}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.022058654576539993, \"head\": 0.02136411890387535}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026816796511411667, \"head\": 0.02657831460237503}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.00606396421790123, \"head\": 0.005943752825260162}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011301189661026001, \"head\": 0.018755875527858734}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.02955392375588417, \"head\": 0.02840159460902214}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.011059559881687164, \"head\": 0.010475941002368927}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.6077294796705246, \"head\": 0.6573234237730503}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.09086232259869576, \"head\": 0.014871083199977875}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.10927456989884377, \"head\": 0.09113781154155731}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.11205556988716125, \"head\": 0.11191356182098389}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.018981028348207474, \"head\": 0.01920069009065628}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026830162853002548, \"head\": 0.027171719819307327}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006052602082490921, \"head\": 0.005949400365352631}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011105053126811981, \"head\": 0.011286266148090363}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.02953892946243286, \"head\": 0.028525888919830322}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.010524380952119827, \"head\": 0.010784279555082321}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.4743153713643551, \"head\": 0.4344281703233719}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.01491856575012207, \"head\": 0.009485401213169098}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.10728519782423973, \"head\": 0.09186756238341331}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.11846943199634552, \"head\": 0.11211665347218513}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.025629080832004547, \"head\": 0.019030749797821045}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.02655244618654251, \"head\": 0.026819180697202682}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.005975816398859024, \"head\": 0.006558254361152649}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011032279580831528, \"head\": 0.011129703372716904}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.02848108485341072, \"head\": 0.02927183359861374}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.010301832109689713, \"head\": 0.012759104371070862}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.5706679821014404, \"head\": 0.42602580413222313}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.07100309804081917, \"head\": 0.010778281837701797}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.11552166938781738, \"head\": 0.09465774148702621}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.08793247863650322, \"head\": 0.11080671846866608}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019213702529668808, \"head\": 0.019667569547891617}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.02843216061592102, \"head\": 0.027159620076417923}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.005924481898546219, \"head\": 0.005957663059234619}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011309720575809479, \"head\": 0.01117108017206192}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.02922121062874794, \"head\": 0.028495222330093384}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.010571572929620743, \"head\": 0.010731112211942673}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.36994292214512825, \"head\": 0.696070346981287}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.1001475416123867, \"head\": 0.08215846493840218}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.1199883446097374, \"head\": 0.09677594527602196}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.11467026546597481, \"head\": 0.09208095073699951}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.022920534014701843, \"head\": 0.02463645115494728}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.03569744527339935, \"head\": 0.02649647369980812}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.007253330200910568, \"head\": 0.005978323519229889}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011636242270469666, \"head\": 0.011555179953575134}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.029091831296682358, \"head\": 0.05366375297307968}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.011024471372365952, \"head\": 0.010890491306781769}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.9269364960491657, \"head\": 0.6700511686503887}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.07123636081814766, \"head\": 0.0783892460167408}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.12331300228834152, \"head\": 0.13074221462011337}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.10012879967689514, \"head\": 0.11104553192853928}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019269607961177826, \"head\": 0.019430946558713913}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.032565366476774216, \"head\": 0.026505667716264725}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.005906261503696442, \"head\": 0.006012678146362305}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.01103207841515541, \"head\": 0.012382987886667252}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.02886061742901802, \"head\": 0.02875247225165367}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.010381385684013367, \"head\": 0.010970525443553925}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.7032761201262474, \"head\": 0.13489774614572525}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.009963050484657288, \"head\": 0.05302264913916588}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.08920484408736229, \"head\": 0.034263089299201965}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.04103242978453636, \"head\": 0.10679508000612259}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.022336337715387344, \"head\": 0.019950222223997116}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026862237602472305, \"head\": 0.02645310014486313}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006123315542936325, \"head\": 0.005895860493183136}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011249136179685593, \"head\": 0.011975061148405075}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.028938502073287964, \"head\": 0.040244657546281815}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.010918766260147095, \"head\": 0.015850730240345}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.819895800203085, \"head\": 0.34462422877550125}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.0848136879503727, \"head\": 0.022492513060569763}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.09888967126607895, \"head\": 0.09616298228502274}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.04712684080004692, \"head\": 0.105597835034132}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.0189894400537014, \"head\": 0.023317020386457443}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026791825890541077, \"head\": 0.0293760783970356}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006024971604347229, \"head\": 0.0059312134981155396}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011071119457483292, \"head\": 0.011180859059095383}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.028822917491197586, \"head\": 0.03124077618122101}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.01061740517616272, \"head\": 0.011464037001132965}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.24270571023225784, \"head\": 0.24880224466323853}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.09188199043273926, \"head\": 0.010499749332666397}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.19250697270035744, \"head\": 0.0613832101225853}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.08920136839151382, \"head\": 0.11801708117127419}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.03013564646244049, \"head\": 0.019263356924057007}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026639800518751144, \"head\": 0.0321713462471962}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006182774901390076, \"head\": 0.0058852992951869965}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011076930910348892, \"head\": 0.011085599660873413}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.029336441308259964, \"head\": 0.02941831573843956}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.010865934193134308, \"head\": 0.014325249940156937}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.6123918928205967, \"head\": 0.3084730692207813}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.011215534061193466, \"head\": 0.011042878031730652}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.17900758981704712, \"head\": 0.21093377843499184}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.041210275143384933, \"head\": 0.07427741214632988}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019233189523220062, \"head\": 0.02025286853313446}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026634491980075836, \"head\": 0.028396718204021454}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.0060496143996715546, \"head\": 0.006105061620473862}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011085957288742065, \"head\": 0.011291414499282837}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.028261661529541016, \"head\": 0.028627190738916397}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.011135190725326538, \"head\": 0.010963000357151031}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 1.2326357811689377, \"head\": 0.31641367450356483}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.09008651599287987, \"head\": 0.01365567371249199}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.18734003603458405, \"head\": 0.12634402140974998}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.09283588454127312, \"head\": 0.10047236829996109}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019932307302951813, \"head\": 0.029360748827457428}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.028696879744529724, \"head\": 0.02641107141971588}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006302922964096069, \"head\": 0.005925461649894714}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011457622051239014, \"head\": 0.011081598699092865}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.03626279905438423, \"head\": 0.04283979907631874}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.011927634477615356, \"head\": 0.010545268654823303}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.5742592290043831, \"head\": 0.4596795476973057}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.010572392493486404, \"head\": 0.018306128680706024}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.09259243682026863, \"head\": 0.09837933257222176}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.11099344864487648, \"head\": 0.10949534922838211}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019271600991487503, \"head\": 0.019312292337417603}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.02824247255921364, \"head\": 0.026835929602384567}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.008800391107797623, \"head\": 0.00615527480840683}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.014085330069065094, \"head\": 0.011103134602308273}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.03083384782075882, \"head\": 0.028478827327489853}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.01035676896572113, \"head\": 0.010461203753948212}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.6701965443789959, \"head\": 0.9051721282303333}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.08606644347310066, \"head\": 0.08001333102583885}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.11376142874360085, \"head\": 0.12215302512049675}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.09970735758543015, \"head\": 0.08426221832633018}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019312061369419098, \"head\": 0.02316075563430786}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.026380162686109543, \"head\": 0.026785854250192642}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.009277809411287308, \"head\": 0.006242971867322922}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.01408986747264862, \"head\": 0.011402707546949387}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.02864222601056099, \"head\": 0.029127486050128937}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.010609004646539688, \"head\": 0.011189814656972885}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.43537015467882156, \"head\": 0.25586873292922974}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.01098627969622612, \"head\": 0.012804985046386719}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.11559969559311867, \"head\": 0.11002377048134804}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.10496624559164047, \"head\": 0.11609324440360069}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019518829882144928, \"head\": 0.03171052411198616}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.02638162299990654, \"head\": 0.027470383793115616}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006140809506177902, \"head\": 0.006773941218852997}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.01106702908873558, \"head\": 0.011830296367406845}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.02840111404657364, \"head\": 0.029914848506450653}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.010388564318418503, \"head\": 0.012432590126991272}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.24269308522343636, \"head\": 0.4852681867778301}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.08981595560908318, \"head\": 0.024251267313957214}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.03367110341787338, \"head\": 0.06317438185214996}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.09580224007368088, \"head\": 0.10888509824872017}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.01906997337937355, \"head\": 0.02024836838245392}}, {\"sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank\": {\"base\": 0.02657407894730568, \"head\": 0.026441186666488647}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement\": {\"base\": 0.006171904504299164, \"head\": 0.005998190492391586}, \"sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]\": {\"base\": 0.011071380227804184, \"head\": 0.011080048978328705}, \"sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]\": {\"base\": 0.03337760269641876, \"head\": 0.04074025899171829}, \"sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]\": {\"base\": 0.013140544295310974, \"head\": 0.010430354624986649}, \"sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits\": {\"base\": 0.21903900057077408, \"head\": 0.37228111177682877}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]\": {\"base\": 0.11169089376926422, \"head\": 0.013231832534074783}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]\": {\"base\": 0.1012534461915493, \"head\": 0.11318331211805344}, \"sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]\": {\"base\": 0.09402331709861755, \"head\": 0.05390768125653267}, \"sklearn/tests/test_multiclass.py::test_ovr_partial_fit\": {\"base\": 0.019604939967393875, \"head\": 0.019021503627300262}}]",
  "efficiency_test": [
    "sklearn/decomposition/tests/test_incremental_pca.py::test_incremental_pca_batch_rank",
    "sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_convergence_with_regularizer_decrement",
    "sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]",
    "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]",
    "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]",
    "sklearn/neighbors/tests/test_neighbors.py::test_neighbors_digits",
    "sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_pickle]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_methods_subset_invariance]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[Lars-Lars-check_estimator_sparse_data]",
    "sklearn/tests/test_multiclass.py::test_ovr_partial_fit"
  ],
  "patch_functions": "{\"sklearn/metrics/cluster/unsupervised.py\": [\"davies_bouldin_score\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sklearn/metrics/cluster/unsupervised.py': ['davies_bouldin_score']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sklearn/datasets/base.py\": [\"load_boston\", \"load_iris\", \"load_digits\"], \"sklearn/multiclass.py\": [\"OneVsRestClassifier\", \"OneVsRestClassifier.fit\", \"OneVsRestClassifier.predict\", \"OneVsRestClassifier.partial_fit\"], \"sklearn/utils/estimator_checks.py\": [\"_yield_all_checks\", \"check_estimator_sparse_data\", \"set_checking_parameters\"], \"sklearn/utils/__init__.py\": [\"shuffle\"], \"sklearn/linear_model/logistic.py\": [\"_log_reg_scoring_path\", \"LogisticRegression.fit\", \"LogisticRegression\"], \"sklearn/utils/deprecation.py\": [\"wrapped\"], \"sklearn/linear_model/stochastic_gradient.py\": [\"SGDClassifier.partial_fit\", \"SGDClassifier\", \"SGDClassifier.fit\"], \"sklearn/svm/classes.py\": [\"SVC\"], \"sklearn/decomposition/incremental_pca.py\": [\"IncrementalPCA\", \"IncrementalPCA.fit\"], \"sklearn/base.py\": [\"ElasticNet.set_params\", \"AdaBoostClassifier.get_params\", \"KNeighborsClassifier.score\", \"LogisticRegression.get_params\"], \"sklearn/preprocessing/label.py\": [\"LabelBinarizer.fit\", \"LabelEncoder.fit\"], \"sklearn/linear_model/coordinate_descent.py\": [\"ElasticNet\", \"ElasticNet.fit\"], \"sklearn/naive_bayes.py\": [\"MultinomialNB.partial_fit\", \"MultinomialNB.fit\", \"MultinomialNB\"], \"sklearn/datasets/samples_generator.py\": [\"make_classification\"], \"sklearn/metrics/scorer.py\": [\"get_scorer\"], \"sklearn/neighbors/base.py\": [\"KNeighborsClassifier.fit\"], \"sklearn/utils/metaestimators.py\": [\"<lambda>\"], \"sklearn/neighbors/classification.py\": [\"KNeighborsClassifier\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sklearn/datasets/base.py': ['load_boston', 'load_iris', 'load_digits'], 'sklearn/multiclass.py': ['OneVsRestClassifier', 'OneVsRestClassifier.fit', 'OneVsRestClassifier.predict', 'OneVsRestClassifier.partial_fit'], 'sklearn/utils/estimator_checks.py': ['_yield_all_checks', 'check_estimator_sparse_data', 'set_checking_parameters'], 'sklearn/utils/__init__.py': ['shuffle'], 'sklearn/linear_model/logistic.py': ['_log_reg_scoring_path', 'LogisticRegression.fit', 'LogisticRegression'], 'sklearn/utils/deprecation.py': ['wrapped'], 'sklearn/linear_model/stochastic_gradient.py': ['SGDClassifier.partial_fit', 'SGDClassifier', 'SGDClassifier.fit'], 'sklearn/svm/classes.py': ['SVC'], 'sklearn/decomposition/incremental_pca.py': ['IncrementalPCA', 'IncrementalPCA.fit'], 'sklearn/base.py': ['ElasticNet.set_params', 'AdaBoostClassifier.get_params', 'KNeighborsClassifier.score', 'LogisticRegression.get_params'], 'sklearn/preprocessing/label.py': ['LabelBinarizer.fit', 'LabelEncoder.fit'], 'sklearn/linear_model/coordinate_descent.py': ['ElasticNet', 'ElasticNet.fit'], 'sklearn/naive_bayes.py': ['MultinomialNB.partial_fit', 'MultinomialNB.fit', 'MultinomialNB'], 'sklearn/datasets/samples_generator.py': ['make_classification'], 'sklearn/metrics/scorer.py': ['get_scorer'], 'sklearn/neighbors/base.py': ['KNeighborsClassifier.fit'], 'sklearn/utils/metaestimators.py': ['<lambda>'], 'sklearn/neighbors/classification.py': ['KNeighborsClassifier']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.06910000000000005
}