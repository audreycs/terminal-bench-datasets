{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-15228",
  "patch": "diff --git a/astropy/units/quantity_helper/function_helpers.py b/astropy/units/quantity_helper/function_helpers.py\nindex 47cd662f3fdf..908844c13dbe 100644\n--- a/astropy/units/quantity_helper/function_helpers.py\n+++ b/astropy/units/quantity_helper/function_helpers.py\n@@ -82,7 +82,7 @@\n     np.isposinf, np.isneginf, np.isreal, np.iscomplex,\n     np.average, np.mean, np.std, np.var, np.trace,\n     np.nanmax, np.nanmin, np.nanargmin, np.nanargmax, np.nanmean,\n-    np.nanmedian, np.nansum, np.nancumsum, np.nanstd, np.nanvar,\n+    np.nansum, np.nancumsum, np.nanstd, np.nanvar,\n     np.nanprod, np.nancumprod,\n     np.einsum_path, np.trapz, np.linspace,\n     np.sort, np.partition, np.meshgrid,\n@@ -562,6 +562,11 @@ def percentile(a, q, *args, **kwargs):\n     return quantile(a, q, *args, _q_unit=percent, **kwargs)\n \n \n+@function_helper\n+def nanmedian(a, axis=None, out=None, **kwargs):\n+    return _iterable_helper(a, axis=axis, out=out, **kwargs)\n+\n+\n @function_helper\n def count_nonzero(a, *args, **kwargs):\n     return (a.value,) + args, kwargs, None, None\ndiff --git a/docs/changes/units/15228.bugfix.rst b/docs/changes/units/15228.bugfix.rst\nnew file mode 100644\nindex 000000000000..677d5dc13e54\n--- /dev/null\n+++ b/docs/changes/units/15228.bugfix.rst\n@@ -0,0 +1,3 @@\n+Fixed ``astropy.units.Quantity``'s implementation of ``numpy.nanmedian()``,\n+where for Numpy >= 1.25 an exception was raised for some array shapes and axis\n+combinations.\n",
  "test_patch": "diff --git a/astropy/units/tests/test_quantity_non_ufuncs.py b/astropy/units/tests/test_quantity_non_ufuncs.py\nindex cc96024c14c9..ed27f764210b 100644\n--- a/astropy/units/tests/test_quantity_non_ufuncs.py\n+++ b/astropy/units/tests/test_quantity_non_ufuncs.py\n@@ -1006,8 +1006,15 @@ def test_nanargmax(self):\n     def test_nanmean(self):\n         self.check(np.nanmean)\n \n-    def test_nanmedian(self):\n-        self.check(np.nanmedian)\n+    @pytest.mark.parametrize(\"axis\", [None, 0, 1, -1])\n+    def test_nanmedian(self, axis):\n+        self.check(np.nanmedian, axis=axis)\n+\n+    def test_nanmedian_out(self):\n+        out = np.empty_like(self.q)\n+        o = np.nanmedian(self.q, out=out)\n+        assert o is out\n+        assert np.all(o == np.nanmedian(self.q))\n \n     def test_nansum(self):\n         self.check(np.nansum)\n",
  "base_commit": "1d11e15e73fbe5b5f39612611da740c9489c2833",
  "head_commit": "42d12de648e2232856079e9bc4a756f2bd716827",
  "created_at": 1692920102000,
  "version": "5.2",
  "duration_changes": "[{\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.01116998866200447, \"head\": 0.011310148984193802}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011151432991027832, \"head\": 0.011110875755548477}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011143989861011505, \"head\": 0.011228229850530624}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011337701231241226, \"head\": 0.011009063571691513}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011407807469367981, \"head\": 0.01106693223118782}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011339664459228516, \"head\": 0.01103171706199646}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.012905359268188477, \"head\": 0.011139005422592163}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.01115349680185318, \"head\": 0.01122971996665001}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011284895241260529, \"head\": 0.01110801100730896}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011056721210479736, \"head\": 0.010985519737005234}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.01137903705239296, \"head\": 0.011018019169569016}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011029090732336044, \"head\": 0.01111694797873497}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.010940350592136383, \"head\": 0.01114385575056076}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.01497708261013031, \"head\": 0.011066652834415436}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011144246906042099, \"head\": 0.01101769134402275}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.01121893897652626, \"head\": 0.011157222092151642}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011446405202150345, \"head\": 0.011048417538404465}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011183146387338638, \"head\": 0.011016085743904114}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011205784976482391, \"head\": 0.011087954044342041}}, {\"astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]\": {\"base\": 0.011096559464931488, \"head\": 0.011129211634397507}}]",
  "efficiency_test": [
    "astropy/timeseries/periodograms/lombscargle/tests/test_lombscargle.py::test_nterms_methods[psd-4-none-True-False-fastchi2]"
  ],
  "patch_functions": "{}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"astropy/timeseries/periodograms/lombscargle/core.py\": [\"LombScargle.power\", \"LombScargle\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'astropy/timeseries/periodograms/lombscargle/core.py': ['LombScargle.power', 'LombScargle']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.005
}