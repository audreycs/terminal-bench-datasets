{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14331",
  "patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 7b50fd7e013d..7b0391f318a3 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -2517,10 +2517,14 @@ def _jblock_exponential(b):\n \n         blocks = list(map(_jblock_exponential, cells))\n         from sympy.matrices import diag\n+        from sympy import re\n         eJ = diag(*blocks)\n         # n = self.rows\n         ret = P * eJ * P.inv()\n-        return type(self)(ret)\n+        if all(value.is_real for value in self.values()):\n+            return type(self)(re(ret))\n+        else:\n+            return type(self)(ret)\n \n     def gauss_jordan_solve(self, b, freevar=False):\n         \"\"\"\n",
  "test_patch": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 4293a91ea91b..fdbae5649c7f 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1777,6 +1777,9 @@ def test_exp():\n     assert m.exp() == Matrix([[E, 0], [0, E]])\n     assert exp(m) == Matrix([[E, 0], [0, E]])\n \n+    m = Matrix([[1, -1], [1, 1]])\n+    assert m.exp() == Matrix([[E*cos(1), -E*sin(1)], [E*sin(1), E*cos(1)]])\n+\n \n def test_has():\n     A = Matrix(((x, y), (2, 3)))\n",
  "base_commit": "84a58dd33abb1de9e9cf5b06e2a50d01477831c1",
  "head_commit": "e8e2f34fc60dbee637b87e397c5a975410923345",
  "created_at": 1519549466000,
  "version": "1.1",
  "duration_changes": "[{\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6368745304644108, \"head\": 0.1602443791925907}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6112875007092953, \"head\": 0.16155534237623215}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6233575120568275, \"head\": 0.16189712658524513}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6323819197714329, \"head\": 0.1627286821603775}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6082161515951157, \"head\": 0.15934490412473679}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6154709085822105, \"head\": 0.16222809627652168}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.5913691632449627, \"head\": 0.15912458673119545}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6137536205351353, \"head\": 0.16372037678956985}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6188986226916313, \"head\": 0.16040068492293358}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.607022687792778, \"head\": 0.1594911515712738}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6124389953911304, \"head\": 0.16090204194188118}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.5987087897956371, \"head\": 0.16322200745344162}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6240963451564312, \"head\": 0.15785492956638336}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6079517155885696, \"head\": 0.1595252938568592}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6120225563645363, \"head\": 0.16259100288152695}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.5975315421819687, \"head\": 0.16081825643777847}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.5985938161611557, \"head\": 0.16054443269968033}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.5936819054186344, \"head\": 0.1580151431262493}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.6146142669022083, \"head\": 0.16252130642533302}}, {\"sympy/utilities/tests/test_wester.py::test_P32\": {\"base\": 0.5914380624890327, \"head\": 0.1615147665143013}}]",
  "efficiency_test": [
    "sympy/utilities/tests/test_wester.py::test_P32"
  ],
  "patch_functions": "{\"sympy/matrices/matrices.py\": [\"MatrixBase.exp\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/matrices/matrices.py': ['MatrixBase.exp']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/sets/ordinals.py\": [\"OmegaPower.exp\"], \"sympy/utilities/pytest.py\": [\"XFAIL\", \"SKIP\", \"wrapper\", \"slow\"], \"sympy/functions/elementary/exponential.py\": [\"exp.exp\", \"exp\"], \"sympy/core/cache.py\": [\"wrapper\"], \"sympy/matrices/common.py\": [\"ImmutableDenseMatrix.simplify\"], \"sympy/core/expr.py\": [\"Add.simplify\"], \"sympy/core/symbol.py\": [\"symbols\"], \"sympy/core/power.py\": [\"Pow.exp\"], \"sympy/matrices/matrices.py\": [\"ImmutableDenseMatrix.exp\"], \"sympy/functions/elementary/trigonometric.py\": [\"cos\", \"sin\"], \"sympy/simplify/simplify.py\": [\"simplify\"], \"sympy/core/basic.py\": [\"ImmutableDenseMatrix.rewrite\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/sets/ordinals.py': ['OmegaPower.exp'], 'sympy/utilities/pytest.py': ['XFAIL', 'SKIP', 'wrapper', 'slow'], 'sympy/functions/elementary/exponential.py': ['exp.exp', 'exp'], 'sympy/core/cache.py': ['wrapper'], 'sympy/matrices/common.py': ['ImmutableDenseMatrix.simplify'], 'sympy/core/expr.py': ['Add.simplify'], 'sympy/core/symbol.py': ['symbols'], 'sympy/core/power.py': ['Pow.exp'], 'sympy/matrices/matrices.py': ['ImmutableDenseMatrix.exp'], 'sympy/functions/elementary/trigonometric.py': ['cos', 'sin'], 'sympy/simplify/simplify.py': ['simplify'], 'sympy/core/basic.py': ['ImmutableDenseMatrix.rewrite']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.7330000000000005
}