{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12859",
  "patch": "diff --git a/sklearn/svm/classes.py b/sklearn/svm/classes.py\nindex 81980de2703fe..a9f5f5ad4ed99 100644\n--- a/sklearn/svm/classes.py\n+++ b/sklearn/svm/classes.py\n@@ -563,10 +563,9 @@ class SVC(BaseSVC):\n         probability=False, an empty array. Platt scaling uses the logistic\n         function\n         ``1 / (1 + exp(decision_value * probA_ + probB_))``\n-        where ``probA_`` and ``probB_`` are learned from the dataset. For more\n-        information on the multiclass case and training procedure see section\n-        8 of LIBSVM: A Library for Support Vector Machines (in References)\n-        for more.\n+        where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For\n+        more information on the multiclass case and training procedure see\n+        section 8 of [1]_.\n \n     Examples\n     --------\n@@ -593,11 +592,14 @@ class SVC(BaseSVC):\n         implemented using liblinear. Check the See also section of\n         LinearSVC for more comparison element.\n \n-    Notes\n-    -----\n-    **References:**\n-    `LIBSVM: A Library for Support Vector Machines\n-    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`__\n+    References\n+    ----------\n+    .. [1] `LIBSVM: A Library for Support Vector Machines\n+        <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n+\n+    .. [2] `Platt, John (1999). \"Probabilistic outputs for support vector\n+        machines and comparison to regularizedlikelihood methods.\"\n+        <http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.1639>`_\n     \"\"\"\n \n     _impl = 'c_svc'\n",
  "test_patch": "",
  "base_commit": "8d7e849428a4edd16c3e2a7dc8a088f108986a17",
  "head_commit": "42b9f1ed0d84d49c317a03aa10079e1ee27f6438",
  "created_at": 1545681532000,
  "version": "0.21",
  "duration_changes": "[{\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 4.987751297652721, \"head\": 5.8523416966199875}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.13654319196939468, \"head\": 0.004344731569290161}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.014690987765789032, \"head\": 0.1030239425599575}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.06482338160276413, \"head\": 0.02510157600045204}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 4.678271405398846, \"head\": 3.488905370235443}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.007571008056402206, \"head\": 0.10017522796988487}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.018473293632268906, \"head\": 0.014425814151763916}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.0780668817460537, \"head\": 0.021240685135126114}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 2.298372231423855, \"head\": 4.2774035930633545}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.09952215105295181, \"head\": 0.006055038422346115}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.015858568251132965, \"head\": 0.014714144170284271}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.09516293182969093, \"head\": 0.021899688988924026}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 2.856607750058174, \"head\": 2.5547303557395935}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.08554642647504807, \"head\": 0.10256645828485489}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.014700543135404587, \"head\": 0.02166636660695076}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.08482322469353676, \"head\": 0.07067437469959259}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 2.7394372820854187, \"head\": 5.63027785345912}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.10169941186904907, \"head\": 0.008946724236011505}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.024875812232494354, \"head\": 0.09080511331558228}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.08125857263803482, \"head\": 0.033763255923986435}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 1.886499758809805, \"head\": 3.27045139670372}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.005252264440059662, \"head\": 0.007522307336330414}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.09074456989765167, \"head\": 0.01300724595785141}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.02205575257539749, \"head\": 0.10202901437878609}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 1.1346222385764122, \"head\": 3.2599472254514694}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.08745521679520607, \"head\": 0.08320978656411171}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.005535300821065903, \"head\": 0.01948484405875206}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.12122468277812004, \"head\": 0.023601196706295013}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 3.1230785362422466, \"head\": 6.247772138565779}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.010163392871618271, \"head\": 0.0032884925603866577}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.09343817457556725, \"head\": 0.008010607212781906}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.024094272404909134, \"head\": 0.02107270061969757}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 3.5073946714401245, \"head\": 4.137018222361803}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.008429192006587982, \"head\": 0.0974271111190319}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.024345777928829193, \"head\": 0.02084938809275627}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.09390736743807793, \"head\": 0.07142709940671921}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 2.3565065898001194, \"head\": 6.676503203809261}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.012753065675497055, \"head\": 0.007867202162742615}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.08818953856825829, \"head\": 0.02052340656518936}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.03738664463162422, \"head\": 0.0773978903889656}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 2.4585402235388756, \"head\": 2.506805032491684}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.11864138394594193, \"head\": 0.09248542413115501}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.015126127749681473, \"head\": 0.007033955305814743}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.06044328212738037, \"head\": 0.021264754235744476}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 2.1456928700208664, \"head\": 2.8677735775709152}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.10555572807788849, \"head\": 0.02072494477033615}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.008247852325439453, \"head\": 0.08518846705555916}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.09258517995476723, \"head\": 0.02933373674750328}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 3.181147836148739, \"head\": 5.838426351547241}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.09057005494832993, \"head\": 0.009292736649513245}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.028167013078927994, \"head\": 0.07648370787501335}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.07966144382953644, \"head\": 0.03592558205127716}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 2.4396461211144924, \"head\": 1.7776900343596935}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.03642520308494568, \"head\": 0.011862251907587051}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.08128512278199196, \"head\": 0.08425604552030563}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.03447360545396805, \"head\": 0.043482448905706406}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 4.550528272986412, \"head\": 2.563126988708973}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.005243267863988876, \"head\": 0.0901852697134018}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.025945935398340225, \"head\": 0.017439160495996475}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.08332864940166473, \"head\": 0.02760270982980728}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 1.3291648402810097, \"head\": 2.9950297996401787}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.003178730607032776, \"head\": 0.00342380627989769}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.007992871105670929, \"head\": 0.1035337746143341}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.09641464427113533, \"head\": 0.022664114832878113}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 5.910432156175375, \"head\": 4.901149574667215}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.008345313370227814, \"head\": 0.007421661168336868}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.020010866224765778, \"head\": 0.11161044239997864}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.0779288113117218, \"head\": 0.022354230284690857}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 3.67865439504385, \"head\": 1.8027987107634544}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.0065605901181697845, \"head\": 0.010163664817810059}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.09249471127986908, \"head\": 0.017275679856538773}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.022039297968149185, \"head\": 0.021460898220539093}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 6.2143863923847675, \"head\": 2.1820934861898422}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.010489396750926971, \"head\": 0.010930083692073822}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.08527495339512825, \"head\": 0.09627293795347214}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.02491861581802368, \"head\": 0.024236030876636505}}, {\"sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments\": {\"base\": 3.3555422946810722, \"head\": 1.6321052871644497}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]\": {\"base\": 0.011341370642185211, \"head\": 0.09338922426104546}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]\": {\"base\": 0.10399981960654259, \"head\": 0.030153539031744003}, \"sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]\": {\"base\": 0.027181055396795273, \"head\": 0.08677324280142784}}]",
  "efficiency_test": [
    "sklearn/cluster/tests/test_k_means.py::test_minibatch_with_many_reassignments",
    "sklearn/decomposition/tests/test_truncated_svd.py::test_sparse_formats[coo]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_regressors_no_decision_function]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[NMF-NMF-check_transformer_general]"
  ],
  "patch_functions": "{}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sklearn/datasets/samples_generator.py\": [\"make_blobs\"], \"sklearn/decomposition/truncated_svd.py\": [\"TruncatedSVD.transform\", \"TruncatedSVD\", \"TruncatedSVD.fit_transform\"], \"sklearn/cluster/k_means_.py\": [\"MiniBatchKMeans.fit\", \"MiniBatchKMeans\"], \"sklearn/utils/estimator_checks.py\": [\"_yield_all_checks\", \"set_checking_parameters\"], \"sklearn/utils/deprecation.py\": [\"wrapped\"], \"sklearn/base.py\": [\"AdaBoostClassifier.get_params\"], \"sklearn/utils/validation.py\": [\"check_random_state\"], \"sklearn/utils/_pprint.py\": [\"_EstimatorPrettyPrinter.format\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sklearn/datasets/samples_generator.py': ['make_blobs'], 'sklearn/decomposition/truncated_svd.py': ['TruncatedSVD.transform', 'TruncatedSVD', 'TruncatedSVD.fit_transform'], 'sklearn/cluster/k_means_.py': ['MiniBatchKMeans.fit', 'MiniBatchKMeans'], 'sklearn/utils/estimator_checks.py': ['_yield_all_checks', 'set_checking_parameters'], 'sklearn/utils/deprecation.py': ['wrapped'], 'sklearn/base.py': ['AdaBoostClassifier.get_params'], 'sklearn/utils/validation.py': ['check_random_state'], 'sklearn/utils/_pprint.py': ['_EstimatorPrettyPrinter.format']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.059750000000000046
}