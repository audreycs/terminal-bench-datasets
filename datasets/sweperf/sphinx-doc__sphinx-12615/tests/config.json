{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-12615",
  "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex a77bb761d79..02cdd53ad31 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -7,6 +7,8 @@ Bugs fixed\n * #12859, #9743, #12609: autosummary: Do not add the package prefix when\n   generating autosummary directives for modules within a package.\n   Patch by Adam Turner.\n+* #12613: Reduce log severity for ambiguity detection during inventory loading.\n+  Patch by James Addison.\n \n Release 7.4.5 (released Jul 16, 2024)\n =====================================\ndiff --git a/sphinx/util/inventory.py b/sphinx/util/inventory.py\nindex 9065d31c971..bb0eca6a5cb 100644\n--- a/sphinx/util/inventory.py\n+++ b/sphinx/util/inventory.py\n@@ -172,8 +172,8 @@ def load_v2(\n             inv_item: InventoryItem = projname, version, location, dispname\n             invdata.setdefault(type, {})[name] = inv_item\n         for ambiguity in actual_ambiguities:\n-            logger.warning(__(\"inventory <%s> contains multiple definitions for %s\"),\n-                           uri, ambiguity, type='intersphinx',  subtype='external')\n+            logger.info(__(\"inventory <%s> contains multiple definitions for %s\"),\n+                        uri, ambiguity, type='intersphinx',  subtype='external')\n         return invdata\n \n     @classmethod\n",
  "test_patch": "diff --git a/tests/test_util/test_util_inventory.py b/tests/test_util/test_util_inventory.py\nindex d01785fda24..211dc17e7a6 100644\n--- a/tests/test_util/test_util_inventory.py\n+++ b/tests/test_util/test_util_inventory.py\n@@ -49,12 +49,22 @@ def test_read_inventory_v2_not_having_version():\n         ('foo', '', '/util/foo.html#module-module1', 'Long Module desc')\n \n \n-def test_ambiguous_definition_warning(warning):\n+def test_ambiguous_definition_warning(warning, status):\n     f = BytesIO(INVENTORY_V2_AMBIGUOUS_TERMS)\n     InventoryFile.load(f, '/util', posixpath.join)\n \n-    assert 'contains multiple definitions for std:term:a' not in warning.getvalue().lower()\n-    assert 'contains multiple definitions for std:term:b' in warning.getvalue().lower()\n+    def _multiple_defs_notice_for(entity: str) -> str:\n+        return f'contains multiple definitions for {entity}'\n+\n+    # was warning-level; reduced to info-level - see https://github.com/sphinx-doc/sphinx/issues/12613\n+    mult_defs_a, mult_defs_b = (\n+        _multiple_defs_notice_for('std:term:a'),\n+        _multiple_defs_notice_for('std:term:b'),\n+    )\n+    assert mult_defs_a not in warning.getvalue().lower()\n+    assert mult_defs_a not in status.getvalue().lower()\n+    assert mult_defs_b not in warning.getvalue().lower()\n+    assert mult_defs_b in status.getvalue().lower()\n \n \n def _write_appconfig(dir, language, prefix=None):\n",
  "base_commit": "e61f56950d624f5fa540a1c8d4e3baedd2889bd0",
  "head_commit": "8e44fa716544383e017051193d7ab84ee5eaa598",
  "created_at": 1721302932000,
  "version": "7.4",
  "duration_changes": "[{\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3458353579044342, \"head\": 0.3382778763771057}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015613716095685959, \"head\": 0.016130954027175903}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.014375369995832443, \"head\": 0.013331595808267593}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007832583039999008, \"head\": 0.0073000118136405945}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.16638203337788582, \"head\": 0.1653529852628708}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.35070986673235893, \"head\": 0.35796837136149406}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.02118406817317009, \"head\": 0.014798544347286224}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.023290198296308517, \"head\": 0.012824714183807373}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.00908549502491951, \"head\": 0.007330212742090225}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.17135414481163025, \"head\": 0.17046603187918663}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3361489921808243, \"head\": 0.3425154946744442}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.014676898717880249, \"head\": 0.015296433120965958}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.012181613594293594, \"head\": 0.012406393885612488}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007203109562397003, \"head\": 0.007331188768148422}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.1637945920228958, \"head\": 0.16704396530985832}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3456571027636528, \"head\": 0.33820949494838715}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015886962413787842, \"head\": 0.013847015798091888}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.013043452054262161, \"head\": 0.01199910044670105}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.00821579247713089, \"head\": 0.007213916629552841}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.17545105889439583, \"head\": 0.1648484170436859}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3367154374718666, \"head\": 0.34816741570830345}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015124998986721039, \"head\": 0.020076286047697067}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.013412807136774063, \"head\": 0.014692485332489014}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.009060733020305634, \"head\": 0.007287897169589996}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.1731353923678398, \"head\": 0.16522061452269554}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3489921763539314, \"head\": 0.3513287641108036}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015853039920330048, \"head\": 0.03553653508424759}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.014462042599916458, \"head\": 0.012294530868530273}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007471643388271332, \"head\": 0.007317505776882172}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.17377549782395363, \"head\": 0.16466853395104408}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.33970650285482407, \"head\": 0.34133782982826233}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015400376170873642, \"head\": 0.01458495482802391}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.012273799628019333, \"head\": 0.012018118053674698}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.0072212256491184235, \"head\": 0.007140368223190308}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.1734219416975975, \"head\": 0.1628551483154297}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3616686910390854, \"head\": 0.3434481881558895}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015067681670188904, \"head\": 0.01601983606815338}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.01305297389626503, \"head\": 0.014248210936784744}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007374510169029236, \"head\": 0.007782138884067535}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.17464663833379745, \"head\": 0.16728955879807472}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.33825159445405006, \"head\": 0.34145959839224815}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015178799629211426, \"head\": 0.017120249569416046}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.01311865821480751, \"head\": 0.01324734091758728}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007270637899637222, \"head\": 0.007349945604801178}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.16435164958238602, \"head\": 0.16449474170804024}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3670719787478447, \"head\": 0.3382481597363949}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015044428408145905, \"head\": 0.014004100114107132}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.014469727873802185, \"head\": 0.011906616389751434}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007347140461206436, \"head\": 0.007237445563077927}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.16404854133725166, \"head\": 0.16333900392055511}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3362533822655678, \"head\": 0.34548579156398773}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015420816838741302, \"head\": 0.014464717358350754}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.013283547013998032, \"head\": 0.013573389500379562}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007231801748275757, \"head\": 0.0072212815284729}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.17449824884533882, \"head\": 0.18217971548438072}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3427507095038891, \"head\": 0.3360212408006191}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015242058783769608, \"head\": 0.0155225470662117}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.014820683747529984, \"head\": 0.014175284653902054}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007354233413934708, \"head\": 0.007701568305492401}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.17348941788077354, \"head\": 0.17001841217279434}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3345993049442768, \"head\": 0.34078871458768845}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.015042692422866821, \"head\": 0.015554696321487427}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.012965619564056396, \"head\": 0.013285893946886063}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007178198546171188, \"head\": 0.007386352866888046}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.16354525834321976, \"head\": 0.16562404483556747}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3563343733549118, \"head\": 0.3358119763433933}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.016424987465143204, \"head\": 0.014115743339061737}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.012856122106313705, \"head\": 0.011885467916727066}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.015405084937810898, \"head\": 0.007433991879224777}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.19302138313651085, \"head\": 0.16374161466956139}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3581066019833088, \"head\": 0.34064512699842453}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.01808162033557892, \"head\": 0.015985120087862015}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.015685271471738815, \"head\": 0.015971239656209946}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007432751357555389, \"head\": 0.007238075137138367}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.16604694724082947, \"head\": 0.17187285795807838}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3738510012626648, \"head\": 0.33447157591581345}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.016677942126989365, \"head\": 0.021029815077781677}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.02383030205965042, \"head\": 0.013241585344076157}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.0071128979325294495, \"head\": 0.0073196664452552795}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.17977647483348846, \"head\": 0.16363843902945518}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3453500457108021, \"head\": 0.34907572343945503}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.014936298131942749, \"head\": 0.015742328017950058}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.015503600239753723, \"head\": 0.016954362392425537}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007463809102773666, \"head\": 0.007605966180562973}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.16512375324964523, \"head\": 0.17060783877968788}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.35340480878949165, \"head\": 0.34539634361863136}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.014253340661525726, \"head\": 0.015246108174324036}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.011980634182691574, \"head\": 0.012601945549249649}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007841184735298157, \"head\": 0.007266167551279068}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.17213936150074005, \"head\": 0.1684049367904663}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.35168202593922615, \"head\": 0.3537472113966942}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.01601121574640274, \"head\": 0.01559697836637497}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.013747438788414001, \"head\": 0.013368334621191025}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.009156163781881332, \"head\": 0.007768601179122925}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.19644411653280258, \"head\": 0.16787255555391312}}, {\"tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn\": {\"base\": 0.3788105733692646, \"head\": 0.34013061225414276}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]\": {\"base\": 0.0179508738219738, \"head\": 0.013911064714193344}, \"tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay\": {\"base\": 0.015312403440475464, \"head\": 0.01303541287779808}, \"tests/test_domains/test_domain_py.py::test_short_literal_types\": {\"base\": 0.007343262434005737, \"head\": 0.007180247455835342}, \"tests/test_search.py::test_stemmer_does_not_remove_short_words\": {\"base\": 0.16856744140386581, \"head\": 0.16433723643422127}}]",
  "efficiency_test": [
    "tests/test_builders/test_build_html_numfig.py::test_numfig_with_prefix_warn",
    "tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date[GMT+3]",
    "tests/test_builders/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay",
    "tests/test_domains/test_domain_py.py::test_short_literal_types",
    "tests/test_search.py::test_stemmer_does_not_remove_short_words"
  ],
  "patch_functions": "{\"sphinx/util/inventory.py\": [\"InventoryFile.load_v2\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sphinx/util/inventory.py': ['InventoryFile.load_v2']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sphinx/builders/__init__.py\": [\"CheckExternalLinksBuilder.build\", \"StandaloneHTMLBuilder.build\"], \"sphinx/testing/util.py\": [\"assert_node\", \"SphinxTestAppWrapperForSkipBuilding.build\", \"SphinxTestApp.build\"], \"sphinx/application.py\": [\"SphinxTestApp.disconnect\", \"SphinxTestAppWrapperForSkipBuilding.build\", \"SphinxTestApp.build\", \"SphinxTestApp.connect\"], \"sphinx/events.py\": [\"EventManager.disconnect\", \"EventManager.connect\"], \"sphinx/util/console.py\": [\"strip_colors\"], \"sphinx/testing/restructuredtext.py\": [\"parse\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sphinx/builders/__init__.py': ['CheckExternalLinksBuilder.build', 'StandaloneHTMLBuilder.build'], 'sphinx/testing/util.py': ['assert_node', 'SphinxTestAppWrapperForSkipBuilding.build', 'SphinxTestApp.build'], 'sphinx/application.py': ['SphinxTestApp.disconnect', 'SphinxTestAppWrapperForSkipBuilding.build', 'SphinxTestApp.build', 'SphinxTestApp.connect'], 'sphinx/events.py': ['EventManager.disconnect', 'EventManager.connect'], 'sphinx/util/console.py': ['strip_colors'], 'sphinx/testing/restructuredtext.py': ['parse']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.004
}