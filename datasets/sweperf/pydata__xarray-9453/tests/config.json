{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-9453",
  "patch": "diff --git a/xarray/core/datatree.py b/xarray/core/datatree.py\nindex 458d0efa0c3..7eb491da43d 100644\n--- a/xarray/core/datatree.py\n+++ b/xarray/core/datatree.py\n@@ -910,6 +910,24 @@ def __setitem__(\n         else:\n             raise ValueError(\"Invalid format for key\")\n \n+    def __delitem__(self, key: str) -> None:\n+        \"\"\"Remove a variable or child node from this datatree node.\"\"\"\n+        if key in self.children:\n+            super().__delitem__(key)\n+\n+        elif key in self._node_coord_variables:\n+            if key in self._node_indexes:\n+                del self._node_indexes[key]\n+            del self._node_coord_variables[key]\n+            self._node_dims = calculate_dimensions(self.variables)\n+\n+        elif key in self._data_variables:\n+            del self._data_variables[key]\n+            self._node_dims = calculate_dimensions(self.variables)\n+\n+        else:\n+            raise KeyError(key)\n+\n     @overload\n     def update(self, other: Dataset) -> None: ...\n \ndiff --git a/xarray/core/treenode.py b/xarray/core/treenode.py\nindex 9dfd346508a..84ce392ad32 100644\n--- a/xarray/core/treenode.py\n+++ b/xarray/core/treenode.py\n@@ -559,14 +559,14 @@ def _set_item(\n         else:\n             current_node._set(name, item)\n \n-    def __delitem__(self: Tree, key: str):\n+    def __delitem__(self: Tree, key: str) -> None:\n         \"\"\"Remove a child node from this tree object.\"\"\"\n         if key in self.children:\n             child = self._children[key]\n             del self._children[key]\n             child.orphan()\n         else:\n-            raise KeyError(\"Cannot delete\")\n+            raise KeyError(key)\n \n     def same_tree(self, other: Tree) -> bool:\n         \"\"\"True if other node is in the same tree as this node.\"\"\"\n",
  "test_patch": "diff --git a/xarray/tests/test_datatree.py b/xarray/tests/test_datatree.py\nindex 3368dd1f19b..20bea8fd81b 100644\n--- a/xarray/tests/test_datatree.py\n+++ b/xarray/tests/test_datatree.py\n@@ -7,6 +7,7 @@\n import pytest\n \n import xarray as xr\n+from xarray import Dataset\n from xarray.core.datatree import DataTree\n from xarray.core.datatree_ops import _MAPPED_DOCSTRING_ADDENDUM, insert_doc_addendum\n from xarray.core.treenode import NotFoundInTreeError\n@@ -525,7 +526,39 @@ def test_setitem_dataarray_replace_existing_node(self):\n         assert_identical(results.to_dataset(), expected)\n \n \n-class TestDictionaryInterface: ...\n+def test_delitem():\n+    ds = Dataset({\"a\": 0}, coords={\"x\": (\"x\", [1, 2]), \"z\": \"a\"})\n+    dt = DataTree(ds, children={\"c\": DataTree()})\n+\n+    with pytest.raises(KeyError):\n+        del dt[\"foo\"]\n+\n+    # test delete children\n+    del dt[\"c\"]\n+    assert dt.children == {}\n+    assert set(dt.variables) == {\"x\", \"z\", \"a\"}\n+    with pytest.raises(KeyError):\n+        del dt[\"c\"]\n+\n+    # test delete variables\n+    del dt[\"a\"]\n+    assert set(dt.coords) == {\"x\", \"z\"}\n+    with pytest.raises(KeyError):\n+        del dt[\"a\"]\n+\n+    # test delete coordinates\n+    del dt[\"z\"]\n+    assert set(dt.coords) == {\"x\"}\n+    with pytest.raises(KeyError):\n+        del dt[\"z\"]\n+\n+    # test delete indexed coordinates\n+    del dt[\"x\"]\n+    assert dt.variables == {}\n+    assert dt.coords == {}\n+    assert dt.indexes == {}\n+    with pytest.raises(KeyError):\n+        del dt[\"x\"]\n \n \n class TestTreeFromDict:\n",
  "base_commit": "0af197985840a715c3566b6bdb5f355b21224e92",
  "head_commit": "88f5f9df4740603949b68e18e9c244990c8d85ce",
  "created_at": 1725766831000,
  "version": "2024.05",
  "duration_changes": "[{\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.03123880922794342, \"head\": 0.10748756676912308}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.015827007591724396, \"head\": 0.01569879800081253}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009164195507764816, \"head\": 0.009151093661785126}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.02262474223971367, \"head\": 0.023430760949850082}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.00984535738825798, \"head\": 0.009382568299770355}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.010244637727737427, \"head\": 0.013078790158033371}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.1042134054005146, \"head\": 0.02629244700074196}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.01517176628112793, \"head\": 0.0770445466041565}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.008447729051113129, \"head\": 0.011283822357654572}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.020811043679714203, \"head\": 0.02960292249917984}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.00907483696937561, \"head\": 0.013585422188043594}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009203102439641953, \"head\": 0.01123078539967537}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.009682971984148026, \"head\": 0.12316213920712471}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.015151355415582657, \"head\": 0.015265081077814102}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009343210607767105, \"head\": 0.008227266371250153}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.02064782753586769, \"head\": 0.020030666142702103}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.008983001112937927, \"head\": 0.012156691402196884}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009182088077068329, \"head\": 0.012608896940946579}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.020134422928094864, \"head\": 0.07154934853315353}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.014587607234716415, \"head\": 0.014382701367139816}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.008720532059669495, \"head\": 0.009598452597856522}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.02164117619395256, \"head\": 0.020757954567670822}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.008918896317481995, \"head\": 0.009309325367212296}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009107541292905807, \"head\": 0.00933300331234932}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.018238335847854614, \"head\": 0.10354792699217796}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.0986776053905487, \"head\": 0.017194971442222595}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009010307490825653, \"head\": 0.009661592543125153}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.021696608513593674, \"head\": 0.02242131531238556}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009189464151859283, \"head\": 0.009108435362577438}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009296014904975891, \"head\": 0.00932694599032402}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.009955987334251404, \"head\": 0.08977425843477249}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.015887122601270676, \"head\": 0.014364644885063171}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009426962584257126, \"head\": 0.008552875369787216}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.023535337299108505, \"head\": 0.022935688495635986}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009323496371507645, \"head\": 0.009403448551893234}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009170878678560257, \"head\": 0.010342441499233246}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.010866839438676834, \"head\": 0.16075019910931587}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.01655641198158264, \"head\": 0.014840662479400635}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009318739175796509, \"head\": 0.008964240550994873}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.023524999618530273, \"head\": 0.021594248712062836}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.01111423596739769, \"head\": 0.009506672620773315}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009899679571390152, \"head\": 0.00946224108338356}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.08932508528232574, \"head\": 0.00993882492184639}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.016977675259113312, \"head\": 0.014980658888816833}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.008931286633014679, \"head\": 0.009480543434619904}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.02148841693997383, \"head\": 0.02139553427696228}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009163174778223038, \"head\": 0.009092241525650024}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.00930829718708992, \"head\": 0.009170781821012497}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.009312033653259277, \"head\": 0.010102953761816025}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.01473153755068779, \"head\": 0.014705672860145569}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009016379714012146, \"head\": 0.008809611201286316}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.02164500206708908, \"head\": 0.020491279661655426}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009074438363313675, \"head\": 0.00911075621843338}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009230934083461761, \"head\": 0.009230311959981918}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.09261363744735718, \"head\": 0.009736623615026474}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.11015539616346359, \"head\": 0.10048257932066917}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.008894942700862885, \"head\": 0.008720491081476212}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.021371297538280487, \"head\": 0.02011978253722191}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009116023778915405, \"head\": 0.009068064391613007}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009315531700849533, \"head\": 0.009126715362071991}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.009222347289323807, \"head\": 0.08180441707372665}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.0976206474006176, \"head\": 0.014902263879776001}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009025275707244873, \"head\": 0.009318236261606216}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.021469444036483765, \"head\": 0.022012952715158463}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.00897107645869255, \"head\": 0.009073209017515182}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009082116186618805, \"head\": 0.009243790060281754}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.19596806168556213, \"head\": 0.009905561804771423}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.018666479736566544, \"head\": 0.08598040044307709}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.008735321462154388, \"head\": 0.009407643228769302}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.02072615548968315, \"head\": 0.021707627922296524}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009024091064929962, \"head\": 0.008986551314592361}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.012543752789497375, \"head\": 0.009151190519332886}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.08310611546039581, \"head\": 0.08428628742694855}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.11099613457918167, \"head\": 0.12289063259959221}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009123299270868301, \"head\": 0.009465724229812622}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.020259715616703033, \"head\": 0.023223906755447388}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.00892331451177597, \"head\": 0.009456444531679153}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.00909869372844696, \"head\": 0.009284164756536484}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.009204793721437454, \"head\": 0.08442715927958488}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.014372531324625015, \"head\": 0.01571204885840416}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009023036807775497, \"head\": 0.009263575077056885}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.020682722330093384, \"head\": 0.020796634256839752}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009013064205646515, \"head\": 0.009089358150959015}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009108852595090866, \"head\": 0.009149789810180664}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.0153367780148983, \"head\": 0.18732822686433792}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.01819348707795143, \"head\": 0.014331698417663574}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.011038944125175476, \"head\": 0.008800223469734192}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.024671975523233414, \"head\": 0.02039969712495804}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009772282093763351, \"head\": 0.00892544910311699}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009289581328630447, \"head\": 0.009125426411628723}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.00974685326218605, \"head\": 0.1056574173271656}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.08845112845301628, \"head\": 0.020543448626995087}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.010076019912958145, \"head\": 0.012967295944690704}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.022831518203020096, \"head\": 0.02963642030954361}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009366534650325775, \"head\": 0.00899270549416542}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009280163794755936, \"head\": 0.009251490235328674}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.1092376746237278, \"head\": 0.06611326336860657}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.019384611397981644, \"head\": 0.014686767011880875}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.00927199050784111, \"head\": 0.008688565343618393}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.02013615518808365, \"head\": 0.08046114444732666}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.008946459740400314, \"head\": 0.009001132100820541}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009135734289884567, \"head\": 0.009108643978834152}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.01968187838792801, \"head\": 0.11612335219979286}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.015557501465082169, \"head\": 0.01793854311108589}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.009809821844100952, \"head\": 0.008730489760637283}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.022983480244874954, \"head\": 0.02167704701423645}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.00979641079902649, \"head\": 0.009515594691038132}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009665880352258682, \"head\": 0.009923145174980164}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.09814289212226868, \"head\": 0.009186852723360062}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.014878876507282257, \"head\": 0.014350399374961853}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.008855435997247696, \"head\": 0.008609533309936523}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.021613724529743195, \"head\": 0.021086648106575012}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.009175997227430344, \"head\": 0.008953787386417389}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.009298339486122131, \"head\": 0.009149674326181412}}, {\"xarray/tests/test_computation.py::test_autocov[None-1]\": {\"base\": 0.09714531153440475, \"head\": 0.10078821703791618}, \"xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]\": {\"base\": 0.08819209411740303, \"head\": 0.027999773621559143}, \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\": {\"base\": 0.012129392474889755, \"head\": 0.008342523127794266}, \"xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]\": {\"base\": 0.02107527107000351, \"head\": 0.020006567239761353}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]\": {\"base\": 0.00928523764014244, \"head\": 0.008915670216083527}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]\": {\"base\": 0.0095493383705616, \"head\": 0.009173654019832611}}]",
  "efficiency_test": [
    "xarray/tests/test_computation.py::test_autocov[None-1]",
    "xarray/tests/test_dask.py::TestVariable::test_setitem_dask_array[expected_data1-index1]",
    "xarray/tests/test_dask.py::test_dataarray_with_dask_coords",
    "xarray/tests/test_interp.py::test_interpolate_1d[chunk_y-y-linear]",
    "xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-min]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-None-False-min]"
  ],
  "patch_functions": "{\"xarray/core/treenode.py\": [\"TreeNode.__delitem__\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/core/treenode.py': ['TreeNode.__delitem__']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/common.py\": [\"DataArray.where\", \"DataArray.notnull\", \"DataArray.get_axis_num\"], \"xarray/core/dataset.py\": [\"Dataset.chunk\", \"Dataset.rolling\", \"Dataset.coords\", \"Dataset.attrs\", \"Dataset.compute\", \"Dataset.variables\", \"Dataset.interp\"], \"xarray/core/duck_array_ops.py\": [\"where\", \"notnull\", \"mean\"], \"xarray/core/dataarray.py\": [\"DataArray.values\", \"DataArray.data\", \"DataArray.rolling\", \"DataArray.isel\", \"DataArray.attrs\", \"DataArray.coords\", \"DataArray.chunk\", \"DataArray.interp\", \"DataArray.compute\", \"DataArray\"], \"xarray/core/variable.py\": [\"IndexVariable.data\", \"IndexVariable.chunk\", \"Variable\", \"Variable.chunk\"], \"xarray/core/rolling.py\": [\"DatasetRolling.method\", \"DataArrayRolling.method\"], \"xarray/core/computation.py\": [\"cov\"], \"xarray/core/_aggregations.py\": [\"DataArray.sum\", \"DataArray.mean\"], \"xarray/util/deprecation_helpers.py\": [\"inner\"], \"xarray/namedarray/daskmanager.py\": [\"DaskManager.compute\"], \"xarray/core/missing.py\": [\"interp\"], \"xarray/namedarray/utils.py\": [\"is_dask_collection\"], \"xarray/namedarray/core.py\": [\"Variable.chunk\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/common.py': ['DataArray.where', 'DataArray.notnull', 'DataArray.get_axis_num'], 'xarray/core/dataset.py': ['Dataset.chunk', 'Dataset.rolling', 'Dataset.coords', 'Dataset.attrs', 'Dataset.compute', 'Dataset.variables', 'Dataset.interp'], 'xarray/core/duck_array_ops.py': ['where', 'notnull', 'mean'], 'xarray/core/dataarray.py': ['DataArray.values', 'DataArray.data', 'DataArray.rolling', 'DataArray.isel', 'DataArray.attrs', 'DataArray.coords', 'DataArray.chunk', 'DataArray.interp', 'DataArray.compute', 'DataArray'], 'xarray/core/variable.py': ['IndexVariable.data', 'IndexVariable.chunk', 'Variable', 'Variable.chunk'], 'xarray/core/rolling.py': ['DatasetRolling.method', 'DataArrayRolling.method'], 'xarray/core/computation.py': ['cov'], 'xarray/core/_aggregations.py': ['DataArray.sum', 'DataArray.mean'], 'xarray/util/deprecation_helpers.py': ['inner'], 'xarray/namedarray/daskmanager.py': ['DaskManager.compute'], 'xarray/core/missing.py': ['interp'], 'xarray/namedarray/utils.py': ['is_dask_collection'], 'xarray/namedarray/core.py': ['Variable.chunk']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.0056666666666666705
}