{
  "repo": "sphinx-doc/sphinx",
  "instance_id": "sphinx-doc__sphinx-11861",
  "patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 27aa454dc6c..1f5b5d864be 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -3,10 +3,11 @@\n from __future__ import annotations\n \n import sys\n+import types\n import typing\n from collections.abc import Sequence\n+from contextvars import Context, ContextVar, Token\n from struct import Struct\n-from types import TracebackType\n from typing import TYPE_CHECKING, Any, Callable, ForwardRef, TypedDict, TypeVar, Union\n \n from docutils import nodes\n@@ -22,17 +23,40 @@\n else:\n     UnionType = None\n \n-# classes that have incorrect __module__\n-INVALID_BUILTIN_CLASSES = {\n+# classes that have an incorrect .__module__ attribute\n+_INVALID_BUILTIN_CLASSES = {\n+    Context: 'contextvars.Context',  # Context.__module__ == '_contextvars'\n+    ContextVar: 'contextvars.ContextVar',  # ContextVar.__module__ == '_contextvars'\n+    Token: 'contextvars.Token',  # Token.__module__ == '_contextvars'\n     Struct: 'struct.Struct',  # Struct.__module__ == '_struct'\n-    TracebackType: 'types.TracebackType',  # TracebackType.__module__ == 'builtins'\n+    # types in 'types' with <type>.__module__ == 'builtins':\n+    types.AsyncGeneratorType: 'types.AsyncGeneratorType',\n+    types.BuiltinFunctionType: 'types.BuiltinFunctionType',\n+    types.BuiltinMethodType: 'types.BuiltinMethodType',\n+    types.CellType: 'types.CellType',\n+    types.ClassMethodDescriptorType: 'types.ClassMethodDescriptorType',\n+    types.CodeType: 'types.CodeType',\n+    types.CoroutineType: 'types.CoroutineType',\n+    types.FrameType: 'types.FrameType',\n+    types.FunctionType: 'types.FunctionType',\n+    types.GeneratorType: 'types.GeneratorType',\n+    types.GetSetDescriptorType: 'types.GetSetDescriptorType',\n+    types.LambdaType: 'types.LambdaType',\n+    types.MappingProxyType: 'types.MappingProxyType',\n+    types.MemberDescriptorType: 'types.MemberDescriptorType',\n+    types.MethodDescriptorType: 'types.MethodDescriptorType',\n+    types.MethodType: 'types.MethodType',\n+    types.MethodWrapperType: 'types.MethodWrapperType',\n+    types.ModuleType: 'types.ModuleType',\n+    types.TracebackType: 'types.TracebackType',\n+    types.WrapperDescriptorType: 'types.WrapperDescriptorType',\n }\n \n \n def is_invalid_builtin_class(obj: Any) -> bool:\n     \"\"\"Check *obj* is an invalid built-in class.\"\"\"\n     try:\n-        return obj in INVALID_BUILTIN_CLASSES\n+        return obj in _INVALID_BUILTIN_CLASSES\n     except TypeError:  # unhashable type\n         return False\n \n@@ -143,7 +167,7 @@ def restify(cls: type | None, mode: str = 'fully-qualified-except-typing') -> st\n         elif ismock(cls):\n             return f':py:class:`{modprefix}{cls.__module__}.{cls.__name__}`'\n         elif is_invalid_builtin_class(cls):\n-            return f':py:class:`{modprefix}{INVALID_BUILTIN_CLASSES[cls]}`'\n+            return f':py:class:`{modprefix}{_INVALID_BUILTIN_CLASSES[cls]}`'\n         elif inspect.isNewType(cls):\n             if sys.version_info[:2] >= (3, 10):\n                 # newtypes have correct module info since Python 3.10+\n@@ -300,7 +324,7 @@ def stringify_annotation(\n     elif ismock(annotation):\n         return module_prefix + f'{annotation_module}.{annotation_name}'\n     elif is_invalid_builtin_class(annotation):\n-        return module_prefix + INVALID_BUILTIN_CLASSES[annotation]\n+        return module_prefix + _INVALID_BUILTIN_CLASSES[annotation]\n     elif str(annotation).startswith('typing.Annotated'):  # for py310+\n         pass\n     elif annotation_module == 'builtins' and annotation_qualname:\n",
  "test_patch": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex d79852e8bd4..1c66a49d68c 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,10 +1,32 @@\n \"\"\"Tests util.typing functions.\"\"\"\n \n import sys\n+from contextvars import Context, ContextVar, Token\n from enum import Enum\n from numbers import Integral\n from struct import Struct\n-from types import TracebackType\n+from types import (\n+    AsyncGeneratorType,\n+    BuiltinFunctionType,\n+    BuiltinMethodType,\n+    CellType,\n+    ClassMethodDescriptorType,\n+    CodeType,\n+    CoroutineType,\n+    FrameType,\n+    FunctionType,\n+    GeneratorType,\n+    GetSetDescriptorType,\n+    LambdaType,\n+    MappingProxyType,\n+    MemberDescriptorType,\n+    MethodDescriptorType,\n+    MethodType,\n+    MethodWrapperType,\n+    ModuleType,\n+    TracebackType,\n+    WrapperDescriptorType,\n+)\n from typing import (\n     Any,\n     Callable,\n@@ -21,7 +43,7 @@\n import pytest\n \n from sphinx.ext.autodoc import mock\n-from sphinx.util.typing import INVALID_BUILTIN_CLASSES, restify, stringify_annotation\n+from sphinx.util.typing import _INVALID_BUILTIN_CLASSES, restify, stringify_annotation\n \n \n class MyClass1:\n@@ -76,11 +98,55 @@ def test_restify():\n \n def test_is_invalid_builtin_class():\n     # if these tests start failing, it means that the __module__\n-    # of one of these classes has changed, and INVALID_BUILTIN_CLASSES\n+    # of one of these classes has changed, and _INVALID_BUILTIN_CLASSES\n     # in sphinx.util.typing needs to be updated.\n-    assert INVALID_BUILTIN_CLASSES.keys() == {Struct, TracebackType}\n+    assert _INVALID_BUILTIN_CLASSES.keys() == {\n+        Context,\n+        ContextVar,\n+        Token,\n+        Struct,\n+        AsyncGeneratorType,\n+        BuiltinFunctionType,\n+        BuiltinMethodType,\n+        CellType,\n+        ClassMethodDescriptorType,\n+        CodeType,\n+        CoroutineType,\n+        FrameType,\n+        FunctionType,\n+        GeneratorType,\n+        GetSetDescriptorType,\n+        LambdaType,\n+        MappingProxyType,\n+        MemberDescriptorType,\n+        MethodDescriptorType,\n+        MethodType,\n+        MethodWrapperType,\n+        ModuleType,\n+        TracebackType,\n+        WrapperDescriptorType,\n+    }\n     assert Struct.__module__ == '_struct'\n+    assert AsyncGeneratorType.__module__ == 'builtins'\n+    assert BuiltinFunctionType.__module__ == 'builtins'\n+    assert BuiltinMethodType.__module__ == 'builtins'\n+    assert CellType.__module__ == 'builtins'\n+    assert ClassMethodDescriptorType.__module__ == 'builtins'\n+    assert CodeType.__module__ == 'builtins'\n+    assert CoroutineType.__module__ == 'builtins'\n+    assert FrameType.__module__ == 'builtins'\n+    assert FunctionType.__module__ == 'builtins'\n+    assert GeneratorType.__module__ == 'builtins'\n+    assert GetSetDescriptorType.__module__ == 'builtins'\n+    assert LambdaType.__module__ == 'builtins'\n+    assert MappingProxyType.__module__ == 'builtins'\n+    assert MemberDescriptorType.__module__ == 'builtins'\n+    assert MethodDescriptorType.__module__ == 'builtins'\n+    assert MethodType.__module__ == 'builtins'\n+    assert MethodWrapperType.__module__ == 'builtins'\n+    assert ModuleType.__module__ == 'builtins'\n     assert TracebackType.__module__ == 'builtins'\n+    assert WrapperDescriptorType.__module__ == 'builtins'\n \n \n def test_restify_type_hints_containers():\n",
  "base_commit": "ea9c61fb38453e8a4798bcb4c5c9ab2972af03ba",
  "head_commit": "043e1337d0a2958e1e4e7a2f6413cd704af3503f",
  "created_at": 1704737022000,
  "version": "7.3",
  "duration_changes": "[{\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.03614114224910736, \"head\": 0.041214071214199066}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06709504500031471, \"head\": 0.06615537777543068}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.0397881381213665, \"head\": 0.03560280799865723}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.0727381594479084, \"head\": 0.06624982506036758}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.03862646594643593, \"head\": 0.03675670921802521}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.07374671474099159, \"head\": 0.06648172065615654}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.036039870232343674, \"head\": 0.03630224987864494}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06682503968477249, \"head\": 0.06603865325450897}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.03722396492958069, \"head\": 0.04624861478805542}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06968366727232933, \"head\": 0.08520098030567169}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.0507563017308712, \"head\": 0.03669740632176399}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06701021268963814, \"head\": 0.06695260107517242}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.037184301763772964, \"head\": 0.05936582759022713}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06663905456662178, \"head\": 0.06654515117406845}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.03783837705850601, \"head\": 0.03761563450098038}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.09957665205001831, \"head\": 0.06746408343315125}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.03680022060871124, \"head\": 0.03913818672299385}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06594230234622955, \"head\": 0.06710253655910492}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.035978756844997406, \"head\": 0.034650810062885284}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.0677342638373375, \"head\": 0.06638713553547859}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.03919317200779915, \"head\": 0.03671126440167427}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06682737171649933, \"head\": 0.06646640226244926}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.036260202527046204, \"head\": 0.06220383569598198}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.0665273666381836, \"head\": 0.07698451727628708}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.03815970569849014, \"head\": 0.03529597818851471}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.07145380228757858, \"head\": 0.06668220832943916}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.036570049822330475, \"head\": 0.0344630628824234}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06726599857211113, \"head\": 0.06677457317709923}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.035678599029779434, \"head\": 0.047410860657691956}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06883669272065163, \"head\": 0.06651030480861664}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.0382075272500515, \"head\": 0.036019712686538696}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.06628728657960892, \"head\": 0.06653540208935738}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.03557199984788895, \"head\": 0.035836394876241684}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.0666295699775219, \"head\": 0.06626858934760094}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.036117635667324066, \"head\": 0.035353150218725204}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.0659165270626545, \"head\": 0.06607985496520996}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.035996560007333755, \"head\": 0.0354703813791275}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.07045275345444679, \"head\": 0.06693612411618233}}, {\"tests/test_build_linkcheck.py::test_linkcheck_request_headers\": {\"base\": 0.035308271646499634, \"head\": 0.03624792397022247}, \"tests/test_ext_autodoc.py::test_autodoc_ignore_module_all\": {\"base\": 0.0667218528687954, \"head\": 0.06844635680317879}}]",
  "efficiency_test": [
    "tests/test_build_linkcheck.py::test_linkcheck_request_headers",
    "tests/test_ext_autodoc.py::test_autodoc_ignore_module_all"
  ],
  "patch_functions": "{\"sphinx/util/typing.py\": [\"restify\", \"stringify_annotation\", \"is_invalid_builtin_class\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sphinx/util/typing.py': ['restify', 'stringify_annotation', 'is_invalid_builtin_class']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sphinx/builders/__init__.py\": [\"CheckExternalLinksBuilder.build\"], \"sphinx/ext/autodoc/directive.py\": [\"DocumenterBridge\", \"process_documenter_options\"], \"sphinx/config.py\": [\"Config.filter\"], \"sphinx/ext/autodoc/__init__.py\": [\"ClassDocumenter.generate\", \"ModuleDocumenter.generate\"], \"sphinx/util/parallel.py\": [\"SerialTasks.join\"], \"sphinx/application.py\": [\"SphinxTestApp.build\"], \"sphinx/util/logging.py\": [\"InfoFilter.filter\", \"InfoLogRecordTranslator.filter\"], \"sphinx/testing/util.py\": [\"SphinxTestApp.build\"], \"sphinx/util/docutils.py\": [\"LoggingReporter\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sphinx/builders/__init__.py': ['CheckExternalLinksBuilder.build'], 'sphinx/ext/autodoc/directive.py': ['DocumenterBridge', 'process_documenter_options'], 'sphinx/config.py': ['Config.filter'], 'sphinx/ext/autodoc/__init__.py': ['ClassDocumenter.generate', 'ModuleDocumenter.generate'], 'sphinx/util/parallel.py': ['SerialTasks.join'], 'sphinx/application.py': ['SphinxTestApp.build'], 'sphinx/util/logging.py': ['InfoFilter.filter', 'InfoLogRecordTranslator.filter'], 'sphinx/testing/util.py': ['SphinxTestApp.build'], 'sphinx/util/docutils.py': ['LoggingReporter']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.002
}