{
  "repo": "astropy/astropy",
  "instance_id": "astropy__astropy-13745",
  "patch": "diff --git a/astropy/coordinates/angles.py b/astropy/coordinates/angles.py\nindex 8e3f56abd266..a78efbf04f58 100644\n--- a/astropy/coordinates/angles.py\n+++ b/astropy/coordinates/angles.py\n@@ -587,7 +587,7 @@ def _validate_angles(self, angles=None):\n         if angles.unit is u.deg:\n             limit = 90\n         elif angles.unit is u.rad:\n-            limit = 0.5 * np.pi\n+            limit = self.dtype.type(0.5 * np.pi)\n         else:\n             limit = u.degree.to(angles.unit, 90.0)\n \ndiff --git a/docs/changes/coordinates/13745.bugfix.rst b/docs/changes/coordinates/13745.bugfix.rst\nnew file mode 100644\nindex 000000000000..8c5d77de4272\n--- /dev/null\n+++ b/docs/changes/coordinates/13745.bugfix.rst\n@@ -0,0 +1,4 @@\n+Fixed the check for invalid ``Latitude`` values for float32 values.\n+``Latitude`` now accepts the float32 value of pi/2, which was rejected\n+before because a comparison was made using the slightly smaller float64 representation.\n+See issue #13708.\n",
  "test_patch": "diff --git a/astropy/coordinates/tests/test_angles.py b/astropy/coordinates/tests/test_angles.py\nindex b44e7492269b..4ee4bf566fa7 100644\n--- a/astropy/coordinates/tests/test_angles.py\n+++ b/astropy/coordinates/tests/test_angles.py\n@@ -1092,3 +1092,54 @@ def test_str_repr_angles_nan(cls, input, expstr, exprepr):\n     # Deleting whitespaces since repr appears to be adding them for some values\n     # making the test fail.\n     assert repr(q).replace(\" \", \"\") == f'<{cls.__name__}{exprepr}>'.replace(\" \",\"\")\n+\n+\n+@pytest.mark.parametrize(\"sign\", (-1, 1))\n+@pytest.mark.parametrize(\n+    \"value,expected_value,dtype,expected_dtype\",\n+    [\n+        (np.pi / 2, np.pi / 2, None, np.float64),\n+        (np.pi / 2, np.pi / 2, np.float64, np.float64),\n+        (np.float32(np.pi / 2), np.float32(np.pi / 2), None, np.float32),\n+        (np.float32(np.pi / 2), np.float32(np.pi / 2), np.float32, np.float32),\n+        # these cases would require coercing the float32 value to the float64 value\n+        # making validate have side effects, so it's not implemented for now\n+        # (np.float32(np.pi / 2), np.pi / 2, np.float64, np.float64),\n+        # (np.float32(-np.pi / 2), -np.pi / 2, np.float64, np.float64),\n+    ]\n+)\n+def test_latitude_limits(value, expected_value, dtype, expected_dtype, sign):\n+    \"\"\"\n+    Test that the validation of the Latitude value range in radians works\n+    in both float32 and float64.\n+\n+    As discussed in issue #13708, before, the float32 represenation of pi/2\n+    was rejected as invalid because the comparison always used the float64\n+    representation.\n+    \"\"\"\n+    # this prevents upcasting to float64 as sign * value would do\n+    if sign < 0:\n+        value = -value\n+        expected_value = -expected_value\n+\n+    result = Latitude(value, u.rad, dtype=dtype)\n+    assert result.value == expected_value\n+    assert result.dtype == expected_dtype\n+    assert result.unit == u.rad\n+\n+\n+@pytest.mark.parametrize(\n+    \"value,dtype\",\n+    [\n+        (0.50001 * np.pi, np.float32),\n+        (np.float32(0.50001 * np.pi), np.float32),\n+        (0.50001 * np.pi, np.float64),\n+    ]\n+)\n+def test_latitude_out_of_limits(value, dtype):\n+    \"\"\"\n+    Test that values slightly larger than pi/2 are rejected for different dtypes.\n+    Test cases for issue #13708\n+    \"\"\"\n+    with pytest.raises(ValueError, match=r\"Latitude angle\\(s\\) must be within.*\"):\n+        Latitude(value, u.rad, dtype=dtype)\n",
  "base_commit": "0446f168dc6e34996482394f00770b52756b8f9c",
  "head_commit": "4d0ededa242a4f59149abcbd03d6030521f4d25c",
  "created_at": 1663934087000,
  "version": "5.0",
  "duration_changes": "[{\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015155822038650513, \"head\": 0.01496456190943718}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015163354575634003, \"head\": 0.014745045453310013}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015146669000387192, \"head\": 0.017818555235862732}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015128076076507568, \"head\": 0.015090808272361755}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015133026987314224, \"head\": 0.015370924025774002}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.01493886113166809, \"head\": 0.014952115714550018}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015243176370859146, \"head\": 0.014871224761009216}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015021566301584244, \"head\": 0.01505802571773529}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015178781002759933, \"head\": 0.014806460589170456}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015012931078672409, \"head\": 0.015039030462503433}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.0148838572204113, \"head\": 0.01478802040219307}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.014972444623708725, \"head\": 0.014660097658634186}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.01503407210111618, \"head\": 0.014815021306276321}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.01518658921122551, \"head\": 0.014426939189434052}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.014958307147026062, \"head\": 0.014818836003541946}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.01525905728340149, \"head\": 0.01490742340683937}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.014997903257608414, \"head\": 0.014851175248622894}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.01517452672123909, \"head\": 0.015220914036035538}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.01527354121208191, \"head\": 0.014825891703367233}}, {\"astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]\": {\"base\": 0.015285443514585495, \"head\": 0.015308056026697159}}]",
  "efficiency_test": [
    "astropy/table/tests/test_operations.py::TestHStack::test_stack_basic[Table]"
  ],
  "patch_functions": "{\"astropy/coordinates/angles.py\": [\"Latitude._validate_angles\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'astropy/coordinates/angles.py': ['Latitude._validate_angles']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"astropy/table/table.py\": [\"Table.masked\", \"Table.pformat\"], \"astropy/table/operations.py\": [\"hstack\"], \"astropy/io/ascii/fastbasic.py\": [\"FastBasic.read\"], \"astropy/io/registry/core.py\": [\"UnifiedIORegistry.read\"], \"astropy/io/ascii/core.py\": [\"Ecsv.read\"], \"astropy/io/ascii/ui.py\": [\"read\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'astropy/table/table.py': ['Table.masked', 'Table.pformat'], 'astropy/table/operations.py': ['hstack'], 'astropy/io/ascii/fastbasic.py': ['FastBasic.read'], 'astropy/io/registry/core.py': ['UnifiedIORegistry.read'], 'astropy/io/ascii/core.py': ['Ecsv.read'], 'astropy/io/ascii/ui.py': ['read']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.008
}