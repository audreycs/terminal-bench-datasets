{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12567",
  "patch": "diff --git a/sklearn/utils/fixes.py b/sklearn/utils/fixes.py\nindex 24554fe68a4ad..c92a91ad0a0d1 100644\n--- a/sklearn/utils/fixes.py\n+++ b/sklearn/utils/fixes.py\n@@ -309,18 +309,13 @@ def nanmedian(a, axis=None):\n # Fix for behavior inconsistency on numpy.equal for object dtypes.\n # For numpy versions < 1.13, numpy.equal tests element-wise identity of objects\n # instead of equality. This fix returns the mask of NaNs in an array of\n-# numerical or object values for all nupy versions.\n-\n-_nan_object_array = np.array([np.nan], dtype=object)\n-_nan_object_mask = _nan_object_array != _nan_object_array\n-\n-if np.array_equal(_nan_object_mask, np.array([True])):\n+# numerical or object values for all numpy versions.\n+if np_version < (1, 13):\n     def _object_dtype_isnan(X):\n-        return X != X\n-\n+        return np.frompyfunc(lambda x: x != x, 1, 1)(X).astype(bool)\n else:\n     def _object_dtype_isnan(X):\n-        return np.frompyfunc(lambda x: x != x, 1, 1)(X).astype(bool)\n+        return X != X\n \n \n # To be removed once this fix is included in six\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_fixes.py b/sklearn/utils/tests/test_fixes.py\nindex 5b7b960fa129f..1fee7224675f5 100644\n--- a/sklearn/utils/tests/test_fixes.py\n+++ b/sklearn/utils/tests/test_fixes.py\n@@ -17,6 +17,7 @@\n from sklearn.utils.fixes import nanmedian\n from sklearn.utils.fixes import nanpercentile\n from sklearn.utils.fixes import _joblib_parallel_args\n+from sklearn.utils.fixes import _object_dtype_isnan\n \n \n def test_divide():\n@@ -88,3 +89,18 @@ def test_joblib_parallel_args(monkeypatch, joblib_version):\n             _joblib_parallel_args(verbose=True)\n     else:\n         raise ValueError\n+\n+\n+@pytest.mark.parametrize(\"dtype, val\", ([object, 1],\n+                                        [object, \"a\"],\n+                                        [float, 1]))\n+def test_object_dtype_isnan(dtype, val):\n+    X = np.array([[val, np.nan],\n+                  [np.nan, val]], dtype=dtype)\n+\n+    expected_mask = np.array([[False, True],\n+                              [True, False]])\n+\n+    mask = _object_dtype_isnan(X)\n+\n+    assert_array_equal(mask, expected_mask)\n",
  "base_commit": "7c2b47a3c194387e19eed99e6fe58370a5f9594e",
  "head_commit": "fe60f230bc344759d0148186012b12e8458ade06",
  "created_at": 1542014402000,
  "version": "0.21",
  "duration_changes": "[{\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.17069591581821442, \"head\": 0.20674358680844307}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008683394640684128, \"head\": 0.008504223078489304}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.7938278838992119, \"head\": 1.3819859623908997}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.19879598170518875, \"head\": 0.1436471864581108}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.01405365765094757, \"head\": 0.00867459550499916}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.7401464097201824, \"head\": 0.8520113788545132}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.15432631596922874, \"head\": 0.17551379650831223}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008598841726779938, \"head\": 0.008426446467638016}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 1.0640494339168072, \"head\": 0.45928458869457245}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.21669260039925575, \"head\": 0.21150972321629524}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008801493793725967, \"head\": 0.0087120421230793}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.8953351676464081, \"head\": 0.3827468007802963}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.14335701614618301, \"head\": 0.21367504447698593}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008710462599992752, \"head\": 0.010386813431978226}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.8769978508353233, \"head\": 0.46170857548713684}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.22637176513671875, \"head\": 0.14102225750684738}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.00904081016778946, \"head\": 0.009176023304462433}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.5481844879686832, \"head\": 0.5121652781963348}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.24176916107535362, \"head\": 0.19535111263394356}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008831512182950974, \"head\": 0.00886695459485054}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.45527181774377823, \"head\": 0.29179834946990013}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.20681427419185638, \"head\": 0.16473253071308136}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008445445448160172, \"head\": 0.008899405598640442}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.6689659915864468, \"head\": 0.4851873852312565}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.17105763405561447, \"head\": 0.2426498979330063}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.009689141064882278, \"head\": 0.008467644453048706}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.49896756932139397, \"head\": 0.5418926067650318}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.2332041710615158, \"head\": 0.20992353558540344}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008639547973871231, \"head\": 0.008466720581054688}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.9533579386770725, \"head\": 0.6803581044077873}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.14403706789016724, \"head\": 0.22760488092899323}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008732061833143234, \"head\": 0.008826330304145813}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.9500084295868874, \"head\": 0.651803981512785}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.16063590347766876, \"head\": 0.21484077721834183}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.00860254094004631, \"head\": 0.012701459228992462}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 1.8540168106555939, \"head\": 0.5452757813036442}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.2126867137849331, \"head\": 0.20275042951107025}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008509363979101181, \"head\": 0.008859679102897644}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.6819481663405895, \"head\": 1.0634397566318512}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.19491754099726677, \"head\": 0.17633523046970367}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008419342339038849, \"head\": 0.008507926017045975}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.9596678651869297, \"head\": 1.2744522467255592}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.1947813630104065, \"head\": 0.1873730793595314}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008555762469768524, \"head\": 0.008812695741653442}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.7900124415755272, \"head\": 0.36892183497548103}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.19793083518743515, \"head\": 0.213988795876503}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.010913357138633728, \"head\": 0.008691854774951935}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.31428925693035126, \"head\": 0.7736568674445152}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.15981688350439072, \"head\": 0.20007894188165665}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008356664329767227, \"head\": 0.008870713412761688}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.8439765870571136, \"head\": 0.8696058802306652}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.22067559882998466, \"head\": 0.23730113729834557}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008812583982944489, \"head\": 0.008552566170692444}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.8545840680599213, \"head\": 0.8275486193597317}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.14819638058543205, \"head\": 0.21073899045586586}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008739355951547623, \"head\": 0.008517492562532425}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.37749214097857475, \"head\": 0.8577357158064842}}, {\"sklearn/decomposition/tests/test_fastica.py::test_inverse_transform\": {\"base\": 0.133272472769022, \"head\": 0.1923079863190651}, \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\": {\"base\": 0.008565928786993027, \"head\": 0.008560869842767715}, \"sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler\": {\"base\": 0.3746527321636677, \"head\": 0.4823066219687462}}]",
  "efficiency_test": [
    "sklearn/decomposition/tests/test_fastica.py::test_inverse_transform",
    "sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]",
    "sklearn/tests/test_kernel_approximation.py::test_skewed_chi2_sampler"
  ],
  "patch_functions": "{\"sklearn/utils/fixes.py\": [\"_object_dtype_isnan\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sklearn/utils/fixes.py': ['_object_dtype_isnan']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sklearn/base.py\": [\"SkewedChi2Sampler.fit_transform\"], \"sklearn/decomposition/fastica_.py\": [\"FastICA\", \"FastICA.fit_transform\", \"FastICA.inverse_transform\"], \"sklearn/kernel_approximation.py\": [\"SkewedChi2Sampler\", \"SkewedChi2Sampler.transform\"], \"sklearn/gaussian_process/gpr.py\": [\"GaussianProcessRegressor.predict\", \"GaussianProcessRegressor\", \"GaussianProcessRegressor.fit\"], \"sklearn/utils/_unittest_backport.py\": [\"TestCase.assertRaises\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sklearn/base.py': ['SkewedChi2Sampler.fit_transform'], 'sklearn/decomposition/fastica_.py': ['FastICA', 'FastICA.fit_transform', 'FastICA.inverse_transform'], 'sklearn/kernel_approximation.py': ['SkewedChi2Sampler', 'SkewedChi2Sampler.transform'], 'sklearn/gaussian_process/gpr.py': ['GaussianProcessRegressor.predict', 'GaussianProcessRegressor', 'GaussianProcessRegressor.fit'], 'sklearn/utils/_unittest_backport.py': ['TestCase.assertRaises']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.0026666666666666666
}