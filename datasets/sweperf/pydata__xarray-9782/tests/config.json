{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-9782",
  "patch": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex b74b0fb84de..ee826e6e56f 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -64,6 +64,8 @@ Bug fixes\n   By `Pascal Bourgault <https://github.com/aulemahal>`_.\n - Fix CF decoding of ``grid_mapping`` to allow all possible formats, add tests (:issue:`9761`, :pull:`9765`).\n   By `Kai M\u00fchlbauer <https://github.com/kmuehlbauer>`_.\n+- Add `User-Agent` to request-headers when retrieving tutorial data (:issue:`9774`, :pull:`9782`)\n+  By `Kai M\u00fchlbauer <https://github.com/kmuehlbauer>`_.\n \n Documentation\n ~~~~~~~~~~~~~\ndiff --git a/xarray/tutorial.py b/xarray/tutorial.py\nindex ccdb0d8e031..9a5d52ed285 100644\n--- a/xarray/tutorial.py\n+++ b/xarray/tutorial.py\n@@ -10,6 +10,7 @@\n \n import os\n import pathlib\n+import sys\n from typing import TYPE_CHECKING\n \n import numpy as np\n@@ -157,8 +158,13 @@ def open_dataset(\n \n         url = f\"{base_url}/raw/{version}/{path.name}\"\n \n+    headers = {\"User-Agent\": f\"xarray {sys.modules['xarray'].__version__}\"}\n+    downloader = pooch.HTTPDownloader(headers=headers)\n+\n     # retrieve the file\n-    filepath = pooch.retrieve(url=url, known_hash=None, path=cache_dir)\n+    filepath = pooch.retrieve(\n+        url=url, known_hash=None, path=cache_dir, downloader=downloader\n+    )\n     ds = _open_dataset(filepath, engine=engine, **kws)\n     if not cache:\n         ds = ds.load()\n",
  "test_patch": "",
  "base_commit": "4c8b03bdc2ffa03bc5721768e5547572ef1e65a5",
  "head_commit": "24b4ff68743b299d1690305bd218476b7d86132f",
  "created_at": 1731658488000,
  "version": "2024.05",
  "duration_changes": "[{\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.19041147455573082, \"head\": 0.18774819374084473}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022386647760868073, \"head\": 0.02632175013422966}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.0958983078598976, \"head\": 1.0981290601193905}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.04429895803332329, \"head\": 0.04335879161953926}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.029598388820886612, \"head\": 0.03017330914735794}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4283176325261593, \"head\": 1.532535258680582}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.17844391241669655, \"head\": 0.18779103085398674}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.021250993013381958, \"head\": 0.02793627232313156}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.0291315093636513, \"head\": 0.9834338277578354}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.12640832364559174, \"head\": 0.13749117031693459}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.029754474759101868, \"head\": 0.030139237642288208}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4509648643434048, \"head\": 1.4219283014535904}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.1871306598186493, \"head\": 0.191580381244421}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.02290627360343933, \"head\": 0.022198837250471115}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 0.9662237800657749, \"head\": 1.0403121076524258}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.13106707483530045, \"head\": 0.1267818585038185}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.03057866171002388, \"head\": 0.03016645833849907}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.443061612546444, \"head\": 1.4419109225273132}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.18699393421411514, \"head\": 0.1871534138917923}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.023212693631649017, \"head\": 0.022174019366502762}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.044368103146553, \"head\": 1.0815206579864025}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.04345853999257088, \"head\": 0.13367999717593193}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.061520010232925415, \"head\": 0.029812388122081757}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4719353094696999, \"head\": 1.5299015082418919}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.18607836216688156, \"head\": 0.18733131512999535}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022295508533716202, \"head\": 0.021858610212802887}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.1126722246408463, \"head\": 1.0896309055387974}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.043228086084127426, \"head\": 0.11644573509693146}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.03649793192744255, \"head\": 0.029423628002405167}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.5398770906031132, \"head\": 1.364495426416397}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.19297094270586967, \"head\": 0.19010286033153534}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.027249082922935486, \"head\": 0.022226136177778244}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.114924531430006, \"head\": 1.1588498018682003}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.042042527347803116, \"head\": 0.04309803992509842}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.04158493131399155, \"head\": 0.030245967209339142}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4746462181210518, \"head\": 1.4079810790717602}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.19339240342378616, \"head\": 0.1992589645087719}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022202756255865097, \"head\": 0.022171687334775925}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 0.9964677728712559, \"head\": 1.1070461869239807}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.10060489922761917, \"head\": 0.04355286434292793}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.07910716161131859, \"head\": 0.07609343528747559}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.404829390347004, \"head\": 1.38203139975667}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.18676692992448807, \"head\": 0.18674543872475624}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.021817781031131744, \"head\": 0.022320475429296494}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 0.9574764631688595, \"head\": 1.141832821071148}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.044686026871204376, \"head\": 0.04426285997033119}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.030323423445224762, \"head\": 0.03419641777873039}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4303157590329647, \"head\": 1.5005223415791988}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.18688053265213966, \"head\": 0.19500232115387917}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.02194417640566826, \"head\": 0.023815065622329712}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.0585650987923145, \"head\": 1.1339526511728764}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.05139954015612602, \"head\": 0.05152205005288124}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.031631823629140854, \"head\": 0.030520763248205185}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.494420986622572, \"head\": 1.4217245280742645}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.19281041994690895, \"head\": 0.19134552776813507}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022180430591106415, \"head\": 0.02308071404695511}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 0.9617519117891788, \"head\": 1.0238416083157063}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.13750090077519417, \"head\": 0.05091256648302078}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.030309636145830154, \"head\": 0.03082912415266037}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.423465758562088, \"head\": 1.5130999758839607}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.1954129859805107, \"head\": 0.18216440826654434}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.02211489900946617, \"head\": 0.021830834448337555}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.1345535144209862, \"head\": 1.0253602899610996}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.04643315076828003, \"head\": 0.04659754037857056}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.02999335154891014, \"head\": 0.030276436358690262}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.6030212715268135, \"head\": 1.4253245033323765}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.18993888050317764, \"head\": 0.18811234831809998}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022885829210281372, \"head\": 0.022181082516908646}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.0128738693892956, \"head\": 0.9808872304856777}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.18491362407803535, \"head\": 0.12209710851311684}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.029712773859500885, \"head\": 0.0300506092607975}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.5505886003375053, \"head\": 1.5574733689427376}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.21150067821145058, \"head\": 0.19143681973218918}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022266846150159836, \"head\": 0.02233494445681572}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.1237279288470745, \"head\": 1.0904824063181877}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.0490693561732769, \"head\": 0.12545162811875343}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.030864711850881577, \"head\": 0.03327793627977371}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.5160613842308521, \"head\": 1.604890938848257}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.19100990891456604, \"head\": 0.1871083900332451}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.021725207567214966, \"head\": 0.022322360426187515}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.0700450167059898, \"head\": 1.0458371564745903}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.12082771211862564, \"head\": 0.12567875534296036}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.03040415421128273, \"head\": 0.039124950766563416}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4257961139082909, \"head\": 1.4944987744092941}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.18688785657286644, \"head\": 0.18465915694832802}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022528026252985, \"head\": 0.02243966981768608}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.0807037726044655, \"head\": 1.1136683076620102}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.05854468420147896, \"head\": 0.05913456156849861}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.031049348413944244, \"head\": 0.03007030487060547}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.5156890340149403, \"head\": 1.5922030098736286}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.19021675363183022, \"head\": 0.1972627341747284}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.02192522957921028, \"head\": 0.0221933051943779}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.1434337608516216, \"head\": 1.1302129216492176}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.042734090238809586, \"head\": 0.044388577342033386}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.03473810479044914, \"head\": 0.033101215958595276}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4898687899112701, \"head\": 1.496600478887558}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.1865810602903366, \"head\": 0.1899997740983963}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.027795810252428055, \"head\": 0.023339852690696716}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 1.05198809877038, \"head\": 1.0023290552198887}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.059929776936769485, \"head\": 0.10894989222288132}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.03090634196996689, \"head\": 0.029732350260019302}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4953012727200985, \"head\": 1.4634542167186737}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.19423429667949677, \"head\": 0.1857588104903698}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022495266050100327, \"head\": 0.021646540611982346}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 0.9851085655391216, \"head\": 1.1315889842808247}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.18636614456772804, \"head\": 0.04413860663771629}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.030785169452428818, \"head\": 0.029885679483413696}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.5561311915516853, \"head\": 1.5124203711748123}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.19016144424676895, \"head\": 0.190655168145895}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.023283082991838455, \"head\": 0.02247031405568123}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 0.975983452051878, \"head\": 1.0656228847801685}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.04848800599575043, \"head\": 0.06157998740673065}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.03042088821530342, \"head\": 0.04843525588512421}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.4220356307923794, \"head\": 1.373904250562191}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]\": {\"base\": 0.18694183975458145, \"head\": 0.19220196828246117}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]\": {\"base\": 0.022456951439380646, \"head\": 0.023068632930517197}, \"xarray/tests/test_groupby.py::test_groupby_math_dim_order\": {\"base\": 0.9518594443798065, \"head\": 1.0526876486837864}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]\": {\"base\": 0.14692126214504242, \"head\": 0.05239318683743477}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]\": {\"base\": 0.03409738838672638, \"head\": 0.029729876667261124}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]\": {\"base\": 1.505593553185463, \"head\": 1.6173693500459194}}]",
  "efficiency_test": [
    "xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-prod-True-bool-1]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-float-1]",
    "xarray/tests/test_groupby.py::test_groupby_math_dim_order",
    "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quintic]",
    "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quintic]",
    "xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-sum-1-1-True-1]"
  ],
  "patch_functions": "{\"xarray/tutorial.py\": [\"open_dataset\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/tutorial.py': ['open_dataset']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/dataset.py\": [\"Dataset.chunk\", \"Dataset.isel\", \"Dataset.interp\"], \"xarray/core/common.py\": [\"DataArray.isnull\", \"DataArray.sizes\"], \"xarray/core/dataarray.py\": [\"DataArray.reduce\", \"DataArray.groupby\", \"DataArray.dims\", \"DataArray.rolling\", \"DataArray.isel\", \"DataArray.to_series\", \"DataArray.chunk\", \"DataArray.coords\", \"DataArray.to_dataset\", \"DataArray.interp\", \"DataArray.compute\", \"DataArray\", \"DataArray.ndim\"], \"xarray/core/variable.py\": [\"Variable.compute\", \"IndexVariable.chunk\", \"Variable.isel\", \"Variable.reduce\", \"Variable.chunk\"], \"xarray/core/_aggregations.py\": [\"DataArray.prod\", \"DataArrayGroupBy.mean\", \"DataArray.sum\"], \"xarray/coding/cftime_offsets.py\": [\"date_range\"], \"xarray/core/indexes.py\": [\"PandasIndex.isel\"], \"xarray/namedarray/daskmanager.py\": [\"DaskManager.compute\"], \"xarray/util/deprecation_helpers.py\": [\"inner\"], \"xarray/core/missing.py\": [\"interp\"], \"xarray/core/dtypes.py\": [\"maybe_promote\"], \"xarray/core/ops.py\": [\"DataArray.func\"], \"xarray/core/rolling.py\": [\"DataArrayRolling.method\", \"DataArrayRolling.reduce\"], \"xarray/namedarray/core.py\": [\"Variable.chunk\", \"Variable.reduce\"], \"xarray/namedarray/pycompat.py\": [\"array_type\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/dataset.py': ['Dataset.chunk', 'Dataset.isel', 'Dataset.interp'], 'xarray/core/common.py': ['DataArray.isnull', 'DataArray.sizes'], 'xarray/core/dataarray.py': ['DataArray.reduce', 'DataArray.groupby', 'DataArray.dims', 'DataArray.rolling', 'DataArray.isel', 'DataArray.to_series', 'DataArray.chunk', 'DataArray.coords', 'DataArray.to_dataset', 'DataArray.interp', 'DataArray.compute', 'DataArray', 'DataArray.ndim'], 'xarray/core/variable.py': ['Variable.compute', 'IndexVariable.chunk', 'Variable.isel', 'Variable.reduce', 'Variable.chunk'], 'xarray/core/_aggregations.py': ['DataArray.prod', 'DataArrayGroupBy.mean', 'DataArray.sum'], 'xarray/coding/cftime_offsets.py': ['date_range'], 'xarray/core/indexes.py': ['PandasIndex.isel'], 'xarray/namedarray/daskmanager.py': ['DaskManager.compute'], 'xarray/util/deprecation_helpers.py': ['inner'], 'xarray/core/missing.py': ['interp'], 'xarray/core/dtypes.py': ['maybe_promote'], 'xarray/core/ops.py': ['DataArray.func'], 'xarray/core/rolling.py': ['DataArrayRolling.method', 'DataArrayRolling.reduce'], 'xarray/namedarray/core.py': ['Variable.chunk', 'Variable.reduce'], 'xarray/namedarray/pycompat.py': ['array_type']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.0003333333333333333
}