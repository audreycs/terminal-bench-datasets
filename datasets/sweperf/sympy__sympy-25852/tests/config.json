{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-25852",
  "patch": "diff --git a/.mailmap b/.mailmap\nindex cbc670d32cea..facfbd7520a8 100644\n--- a/.mailmap\n+++ b/.mailmap\n@@ -342,6 +342,7 @@ Arie Bovenberg <a.c.bovenberg@gmail.com>\n Arif Ahmed <arif.ahmed.5.10.1995@gmail.com>\n Arighna Chakrabarty <arighna.chakrabarty100@gmail.com>\n Arihant Parsoya <parsoyaarihant@gmail.com>\n+Arnab Nandi <arnabnandi2002@gmail.com>\n Arpan Chattopadhyay <f20180319@pilani.bits-pilani.ac.in> Arpan612 <f20180319@pilani.bits-pilani.ac.in>\n Arpit Goyal <agmps18@gmail.com>\n Arshdeep Singh <singh.arshdeep1999@gmail.com>\ndiff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex d350c948cbd6..aed28b86d05f 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -2734,10 +2734,8 @@ def _eval_rewrite_as_log(self, x, **kwargs):\n     _eval_rewrite_as_tractable = _eval_rewrite_as_log\n \n     def _eval_aseries(self, n, args0, x, logx):\n-        if args0[0] is S.Infinity:\n+        if args0[0] in [S.Infinity, S.NegativeInfinity]:\n             return (pi/2 - atan(1/self.args[0]))._eval_nseries(x, n, logx)\n-        elif args0[0] is S.NegativeInfinity:\n-            return (-pi/2 - atan(1/self.args[0]))._eval_nseries(x, n, logx)\n         else:\n             return super()._eval_aseries(n, args0, x, logx)\n \n@@ -2947,12 +2945,10 @@ def _eval_nseries(self, x, n, logx, cdir=0):  # acot\n         return res\n \n     def _eval_aseries(self, n, args0, x, logx):\n-        if args0[0] is S.Infinity:\n-            return (pi/2 - acot(1/self.args[0]))._eval_nseries(x, n, logx)\n-        elif args0[0] is S.NegativeInfinity:\n-            return (pi*Rational(3, 2) - acot(1/self.args[0]))._eval_nseries(x, n, logx)\n+        if args0[0] in [S.Infinity, S.NegativeInfinity]:\n+            return atan(1/self.args[0])._eval_nseries(x, n, logx)\n         else:\n-            return super(atan, self)._eval_aseries(n, args0, x, logx)\n+            return super()._eval_aseries(n, args0, x, logx)\n \n     def _eval_rewrite_as_log(self, x, **kwargs):\n         return S.ImaginaryUnit/2*(log(1 - S.ImaginaryUnit/x)\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_trigonometric.py b/sympy/functions/elementary/tests/test_trigonometric.py\nindex 4541c0a76024..a85ea7e13bd8 100644\n--- a/sympy/functions/elementary/tests/test_trigonometric.py\n+++ b/sympy/functions/elementary/tests/test_trigonometric.py\n@@ -2192,3 +2192,16 @@ def test_issue_25847():\n     #acsc\n     assert acsc(sin(x)/x).as_leading_term(x) == pi/2\n     raises(PoleError, lambda: acsc(exp(1/x)).as_leading_term(x))\n+\n+def test_issue_23843():\n+    #atan\n+    assert atan(x + I).series(x, oo) == -16/(5*x**5) - 2*I/x**4 + 4/(3*x**3) + I/x**2 - 1/x + pi/2 + O(x**(-6), (x, oo))\n+    assert atan(x + I).series(x, -oo) == -16/(5*x**5) - 2*I/x**4 + 4/(3*x**3) + I/x**2 - 1/x - pi/2 + O(x**(-6), (x, -oo))\n+    assert atan(x - I).series(x, oo) == -16/(5*x**5) + 2*I/x**4 + 4/(3*x**3) - I/x**2 - 1/x + pi/2 + O(x**(-6), (x, oo))\n+    assert atan(x - I).series(x, -oo) == -16/(5*x**5) + 2*I/x**4 + 4/(3*x**3) - I/x**2 - 1/x - pi/2 + O(x**(-6), (x, -oo))\n+\n+    #acot\n+    assert acot(x + I).series(x, oo) == 16/(5*x**5) + 2*I/x**4 - 4/(3*x**3) - I/x**2 + 1/x + O(x**(-6), (x, oo))\n+    assert acot(x + I).series(x, -oo) == 16/(5*x**5) + 2*I/x**4 - 4/(3*x**3) - I/x**2 + 1/x + O(x**(-6), (x, -oo))\n+    assert acot(x - I).series(x, oo) == 16/(5*x**5) - 2*I/x**4 - 4/(3*x**3) + I/x**2 + 1/x + O(x**(-6), (x, oo))\n+    assert acot(x - I).series(x, -oo) == 16/(5*x**5) - 2*I/x**4 - 4/(3*x**3) + I/x**2 + 1/x + O(x**(-6), (x, -oo))\n",
  "base_commit": "39594aacd4fd678e9ab0fe27d8de76445eaf1880",
  "head_commit": "4b61a1045474c70dd6896f3ee5feae6b8499c6fc",
  "created_at": 1698769405000,
  "version": "1.13",
  "duration_changes": "[{\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.35840918123722076, \"head\": 0.21424287930130959}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3612130656838417, \"head\": 0.21758539602160454}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3632836975157261, \"head\": 0.21458274871110916}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3610719405114651, \"head\": 0.22020354121923447}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.36308320239186287, \"head\": 0.21105755493044853}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.36876192316412926, \"head\": 0.21083663031458855}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3763487972319126, \"head\": 0.21060480177402496}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3594922684133053, \"head\": 0.2100895531475544}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.364250298589468, \"head\": 0.21455365046858788}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.36272551119327545, \"head\": 0.2221924513578415}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.359522707760334, \"head\": 0.2073386088013649}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.35978207364678383, \"head\": 0.2111244723200798}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.361189279705286, \"head\": 0.2092609740793705}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3628490939736366, \"head\": 0.2102808989584446}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.36484627798199654, \"head\": 0.21148063242435455}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3562721647322178, \"head\": 0.2113121934235096}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.35884692519903183, \"head\": 0.21128028258681297}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.37192660570144653, \"head\": 0.20844443887472153}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3721364922821522, \"head\": 0.20801735296845436}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_aseries\": {\"base\": 0.3599234074354172, \"head\": 0.21447937935590744}}]",
  "efficiency_test": [
    "sympy/functions/elementary/tests/test_trigonometric.py::test_aseries"
  ],
  "patch_functions": "{\"sympy/functions/elementary/trigonometric.py\": [\"acot._eval_aseries\", \"atan._eval_aseries\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/functions/elementary/trigonometric.py': ['acot._eval_aseries', 'atan._eval_aseries']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/core/expr.py\": [\"Dummy.removeO\", \"atan.series\"], \"sympy/core/evalf.py\": [\"evalf\", \"Half.evalf\"], \"sympy/core/cache.py\": [\"wrapper\"], \"sympy/core/basic.py\": [\"atan.subs\"], \"sympy/core/symbol.py\": [\"symbols\"], \"sympy/core/decorators.py\": [\"Symbol._func\"], \"sympy/core/add.py\": [\"Add.removeO\"], \"sympy/polys/domains/domain.py\": [\"IntegerRing.abs\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/core/expr.py': ['Dummy.removeO', 'atan.series'], 'sympy/core/evalf.py': ['evalf', 'Half.evalf'], 'sympy/core/cache.py': ['wrapper'], 'sympy/core/basic.py': ['atan.subs'], 'sympy/core/symbol.py': ['symbols'], 'sympy/core/decorators.py': ['Symbol._func'], 'sympy/core/add.py': ['Add.removeO'], 'sympy/polys/domains/domain.py': ['IntegerRing.abs']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.4120000000000003
}