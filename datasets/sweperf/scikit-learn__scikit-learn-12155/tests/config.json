{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12155",
  "patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 75c8e5d239d08..954a6c2bd443e 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -422,7 +422,7 @@ class KFold(_BaseKFold):\n \n     def __init__(self, n_splits='warn', shuffle=False,\n                  random_state=None):\n-        if n_splits is 'warn':\n+        if n_splits == 'warn':\n             warnings.warn(NSPLIT_WARNING, FutureWarning)\n             n_splits = 3\n         super(KFold, self).__init__(n_splits, shuffle, random_state)\n@@ -493,7 +493,7 @@ class GroupKFold(_BaseKFold):\n         stratification of the dataset.\n     \"\"\"\n     def __init__(self, n_splits='warn'):\n-        if n_splits is 'warn':\n+        if n_splits == 'warn':\n             warnings.warn(NSPLIT_WARNING, FutureWarning)\n             n_splits = 3\n         super(GroupKFold, self).__init__(n_splits, shuffle=False,\n@@ -594,7 +594,7 @@ class StratifiedKFold(_BaseKFold):\n     \"\"\"\n \n     def __init__(self, n_splits='warn', shuffle=False, random_state=None):\n-        if n_splits is 'warn':\n+        if n_splits == 'warn':\n             warnings.warn(NSPLIT_WARNING, FutureWarning)\n             n_splits = 3\n         super(StratifiedKFold, self).__init__(n_splits, shuffle, random_state)\n@@ -748,7 +748,7 @@ class TimeSeriesSplit(_BaseKFold):\n     where ``n_samples`` is the number of samples.\n     \"\"\"\n     def __init__(self, n_splits='warn', max_train_size=None):\n-        if n_splits is 'warn':\n+        if n_splits == 'warn':\n             warnings.warn(NSPLIT_WARNING, FutureWarning)\n             n_splits = 3\n         super(TimeSeriesSplit, self).__init__(n_splits,\n@@ -1939,7 +1939,7 @@ def check_cv(cv='warn', y=None, classifier=False):\n         The return value is a cross-validator which generates the train/test\n         splits via the ``split`` method.\n     \"\"\"\n-    if cv is None or cv is 'warn':\n+    if cv is None or cv == 'warn':\n         warnings.warn(CV_WARNING, FutureWarning)\n         cv = 3\n \n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_validation.py b/sklearn/model_selection/tests/test_validation.py\nindex 0d7a05f39d714..4d83db99d64c9 100644\n--- a/sklearn/model_selection/tests/test_validation.py\n+++ b/sklearn/model_selection/tests/test_validation.py\n@@ -281,6 +281,17 @@ def test_cross_val_score():\n                   error_score='raise')\n \n \n+@pytest.mark.filterwarnings('ignore:You should specify a value for')  # 0.22\n+def test_cross_validate_many_jobs():\n+    # regression test for #12154: cv='warn' with n_jobs>1 trigger a copy of\n+    # the parameters leading to a failure in check_cv due to cv is 'warn'\n+    # instead of cv == 'warn'.\n+    X, y = load_iris(return_X_y=True)\n+    clf = SVC(gamma='auto')\n+    grid = GridSearchCV(clf, param_grid={'C': [1, 10]})\n+    cross_validate(grid, X, y, n_jobs=2)\n+\n+\n @pytest.mark.filterwarnings('ignore: You should specify a value')  # 0.22\n def test_cross_validate_invalid_scoring_param():\n     X, y = make_classification(random_state=0)\n",
  "base_commit": "fc7d6e698668b983cee2867b1bf3c65f1384e4cf",
  "head_commit": "16290cdb8f00162e97fe2416be75643b19cd243e",
  "created_at": 1537865408000,
  "version": "0.21",
  "duration_changes": "[{\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.003338109701871872, \"head\": 0.00305088609457016}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.01100972667336464, \"head\": 0.011123310774564743}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.46888090670108795, \"head\": 0.4251052550971508}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.01474476233124733, \"head\": 0.014783121645450592}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.00937490165233612, \"head\": 0.009453170001506805}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006431445479393005, \"head\": 0.05244043841958046}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.007376570254564285, \"head\": 0.012107804417610168}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.012786965817213058, \"head\": 0.013492509722709656}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.03620167449116707, \"head\": 0.025095082819461823}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029197752475738525, \"head\": 0.03096148744225502}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0033243633806705475, \"head\": 0.003986146301031113}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011173862963914871, \"head\": 0.012001588940620422}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.5918979793787003, \"head\": 0.8161935172975063}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.01503542810678482, \"head\": 0.01509317010641098}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009563904255628586, \"head\": 0.009586349129676819}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006822578608989716, \"head\": 0.007551573216915131}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.007574174553155899, \"head\": 0.00932290405035019}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.012473490089178085, \"head\": 0.007402632385492325}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.024256497621536255, \"head\": 0.0211317278444767}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.03512846678495407, \"head\": 0.029856540262699127}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0033178403973579407, \"head\": 0.0030833296477794647}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011288128793239594, \"head\": 0.011170528829097748}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.19299942627549171, \"head\": 0.3490333668887615}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.015866421163082123, \"head\": 0.014720998704433441}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.010605394840240479, \"head\": 0.009457528591156006}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006701942533254623, \"head\": 0.006307564675807953}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.0076456218957901, \"head\": 0.009039431810379028}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.017863553017377853, \"head\": 0.007223676890134811}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.027660641819238663, \"head\": 0.02666441723704338}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.042736925184726715, \"head\": 0.029467910528182983}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.003083515912294388, \"head\": 0.003120630979537964}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.01091098040342331, \"head\": 0.011273115873336792}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.5384876914322376, \"head\": 0.41395195573568344}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.014741137623786926, \"head\": 0.014823023229837418}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009346816688776016, \"head\": 0.009437944740056992}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.0066240280866622925, \"head\": 0.006343081593513489}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.009309757500886917, \"head\": 0.008755221962928772}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.0072312504053115845, \"head\": 0.0072786398231983185}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.021187175065279007, \"head\": 0.020809393376111984}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029386475682258606, \"head\": 0.02923191711306572}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.003271903842687607, \"head\": 0.0033801496028900146}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.01094486191868782, \"head\": 0.011209972202777863}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.2937196046113968, \"head\": 0.9169889949262142}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.07839036732912064, \"head\": 0.057656772434711456}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.011518646031618118, \"head\": 0.014870639890432358}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006734717637300491, \"head\": 0.007189955562353134}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.009238313883543015, \"head\": 0.007368892431259155}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.007193237543106079, \"head\": 0.012480579316616058}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.020643044263124466, \"head\": 0.024437949061393738}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029278412461280823, \"head\": 0.053942956030368805}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0032620877027511597, \"head\": 0.0032418183982372284}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011216241866350174, \"head\": 0.010970238596200943}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.4241652861237526, \"head\": 0.40448643267154694}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.015194684267044067, \"head\": 0.014577921479940414}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009501058608293533, \"head\": 0.00932350754737854}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.008067451417446136, \"head\": 0.006643638014793396}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.01165628433227539, \"head\": 0.00745299831032753}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.007531743496656418, \"head\": 0.010276835411787033}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.02197471633553505, \"head\": 0.02089013159275055}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.033316176384687424, \"head\": 0.029239118099212646}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0034189708530902863, \"head\": 0.003775864839553833}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011134259402751923, \"head\": 0.013524889945983887}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.5001553110778332, \"head\": 0.5592074692249298}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.014798924326896667, \"head\": 0.015108972787857056}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009370222687721252, \"head\": 0.009553611278533936}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006662327796220779, \"head\": 0.006569437682628632}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.009223215281963348, \"head\": 0.0073690712451934814}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.009742643684148788, \"head\": 0.012376349419355392}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.02657467871904373, \"head\": 0.027431078255176544}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.02913913130760193, \"head\": 0.02966207265853882}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0042976029217243195, \"head\": 0.003193434327840805}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.013569209724664688, \"head\": 0.011183615773916245}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.38976389914751053, \"head\": 0.2230338715016842}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.0761823020875454, \"head\": 0.01471884548664093}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.010070491582155228, \"head\": 0.009336132556200027}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.007105432450771332, \"head\": 0.006277337670326233}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.009690605103969574, \"head\": 0.007405828684568405}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.007464047521352768, \"head\": 0.013402849435806274}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.02167453244328499, \"head\": 0.021252084523439407}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029977422207593918, \"head\": 0.029561515897512436}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.003314543515443802, \"head\": 0.004037223756313324}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011065088212490082, \"head\": 0.012932516634464264}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.4945787712931633, \"head\": 0.8362532369792461}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.014817818999290466, \"head\": 0.014871492981910706}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009431447833776474, \"head\": 0.009496580809354782}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006781399250030518, \"head\": 0.006497923284769058}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.009023338556289673, \"head\": 0.007393479347229004}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.007266644388437271, \"head\": 0.01164037361741066}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.035096216946840286, \"head\": 0.023711711168289185}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029178082942962646, \"head\": 0.029805082827806473}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0031082071363925934, \"head\": 0.003082122653722763}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011404309421777725, \"head\": 0.011166304349899292}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.6688961684703827, \"head\": 0.9389201328158379}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.014674756675958633, \"head\": 0.01512891799211502}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009321767836809158, \"head\": 0.009594887495040894}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.0064816102385520935, \"head\": 0.008553758263587952}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.007311258465051651, \"head\": 0.011209126561880112}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.011538669466972351, \"head\": 0.007548630237579346}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.028753384947776794, \"head\": 0.028136100620031357}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.030038833618164062, \"head\": 0.037745051085948944}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0032311677932739258, \"head\": 0.0031702443957328796}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011739939451217651, \"head\": 0.011157605797052383}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.5186048597097397, \"head\": 0.813002921640873}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.015144973993301392, \"head\": 0.016108687967061996}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009582340717315674, \"head\": 0.015206433832645416}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.00662824884057045, \"head\": 0.0071538761258125305}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.009299829602241516, \"head\": 0.0076095350086688995}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.007316160947084427, \"head\": 0.013968482613563538}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.02116488292813301, \"head\": 0.023717213422060013}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029597975313663483, \"head\": 0.031014997512102127}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0037658922374248505, \"head\": 0.003484785556793213}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.013450387865304947, \"head\": 0.011275116354227066}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.29746138677001, \"head\": 0.23823005706071854}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.014583919197320938, \"head\": 0.019485432654619217}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009188376367092133, \"head\": 0.009381458163261414}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006158962845802307, \"head\": 0.006713971495628357}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.007349289953708649, \"head\": 0.011291887611150742}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.012170009315013885, \"head\": 0.009611580520868301}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.023783601820468903, \"head\": 0.024528030306100845}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029460325837135315, \"head\": 0.029274094849824905}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.003279630094766617, \"head\": 0.0035118162631988525}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011251870542764664, \"head\": 0.011149633675813675}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.33114295080304146, \"head\": 0.32007357105612755}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.018630485981702805, \"head\": 0.014692537486553192}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009510226547718048, \"head\": 0.00930541381239891}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.007199566811323166, \"head\": 0.0063185133039951324}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.012987785041332245, \"head\": 0.007331643253564835}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.009457428008317947, \"head\": 0.014644023030996323}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.024086657911539078, \"head\": 0.022540856152772903}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.02936173975467682, \"head\": 0.029325120151042938}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.003360159695148468, \"head\": 0.0031215883791446686}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.012972898781299591, \"head\": 0.01112811267375946}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.12019189074635506, \"head\": 0.4441407695412636}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.016769707202911377, \"head\": 0.014957405626773834}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009588982909917831, \"head\": 0.009459123015403748}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.00698138028383255, \"head\": 0.00658624991774559}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.007527414709329605, \"head\": 0.00920136645436287}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.012333855032920837, \"head\": 0.007242091000080109}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.023905418813228607, \"head\": 0.020862333476543427}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029517311602830887, \"head\": 0.029443200677633286}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0032432526350021362, \"head\": 0.003636721521615982}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011394664645195007, \"head\": 0.011187020689249039}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.3228025361895561, \"head\": 0.3007570095360279}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.014982368797063828, \"head\": 0.016049616038799286}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.011612378060817719, \"head\": 0.010173190385103226}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.007835805416107178, \"head\": 0.009011730551719666}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.008982662111520767, \"head\": 0.008444085717201233}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.008578330278396606, \"head\": 0.01427554339170456}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.029382307082414627, \"head\": 0.02750859409570694}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.02931317687034607, \"head\": 0.031789813190698624}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0034949444234371185, \"head\": 0.0031174644827842712}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011306282132863998, \"head\": 0.010964173823595047}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.47211208939552307, \"head\": 0.3075709231197834}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.014712199568748474, \"head\": 0.01474100723862648}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.00940905511379242, \"head\": 0.009312015026807785}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006601806730031967, \"head\": 0.006441466510295868}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.007410075515508652, \"head\": 0.00915730744600296}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.012287206947803497, \"head\": 0.00723300501704216}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.026409197598695755, \"head\": 0.02074335142970085}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.02922159433364868, \"head\": 0.029261697083711624}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0032499507069587708, \"head\": 0.0032080039381980896}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011345911771059036, \"head\": 0.011293333023786545}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.290105652064085, \"head\": 0.302093293517828}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.01498381420969963, \"head\": 0.014834273606538773}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009431689977645874, \"head\": 0.009443692862987518}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006307434290647507, \"head\": 0.006484195590019226}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.00901694968342781, \"head\": 0.009099263697862625}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.0072620101273059845, \"head\": 0.007383089512586594}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.020774461328983307, \"head\": 0.020724240690469742}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029380030930042267, \"head\": 0.03002151846885681}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0031048841774463654, \"head\": 0.0031009241938591003}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.010971587151288986, \"head\": 0.01111207902431488}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.2441856563091278, \"head\": 0.626539058983326}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.04779576137661934, \"head\": 0.015317492187023163}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.011806737631559372, \"head\": 0.00935395434498787}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.008356098085641861, \"head\": 0.007307976484298706}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.007775966078042984, \"head\": 0.007563050836324692}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.012426003813743591, \"head\": 0.013271093368530273}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.024190671741962433, \"head\": 0.02511339634656906}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.03157315403223038, \"head\": 0.029374651610851288}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.0037795156240463257, \"head\": 0.0032844990491867065}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011401515454053879, \"head\": 0.01129429042339325}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 1.023124746978283, \"head\": 0.3425310142338276}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.015014652162790298, \"head\": 0.01477600634098053}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009386412799358368, \"head\": 0.009353004395961761}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006789408624172211, \"head\": 0.00888112187385559}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.007402557879686356, \"head\": 0.017510950565338135}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.012646827846765518, \"head\": 0.012280542403459549}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.024514243006706238, \"head\": 0.022347722202539444}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029312007129192352, \"head\": 0.02929067239165306}}, {\"sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC\": {\"base\": 0.003216378390789032, \"head\": 0.003239203244447708}, \"sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator\": {\"base\": 0.011176817119121552, \"head\": 0.011201389133930206}, \"sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]\": {\"base\": 0.5610190778970718, \"head\": 0.6328867338597775}, \"sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation\": {\"base\": 0.014741595834493637, \"head\": 0.015046551823616028}, \"sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]\": {\"base\": 0.009348444640636444, \"head\": 0.00952756404876709}, \"sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]\": {\"base\": 0.006751038134098053, \"head\": 0.006516408175230026}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]\": {\"base\": 0.00916324183344841, \"head\": 0.007412616163492203}, \"sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]\": {\"base\": 0.007279533892869949, \"head\": 0.012548964470624924}, \"sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]\": {\"base\": 0.024494484066963196, \"head\": 0.024128124117851257}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]\": {\"base\": 0.029370523989200592, \"head\": 0.02978648617863655}}]",
  "efficiency_test": [
    "sklearn/linear_model/least_angle.py::sklearn.linear_model.least_angle.LassoLarsIC",
    "sklearn/linear_model/tests/test_ransac.py::test_ransac_none_estimator",
    "sklearn/linear_model/tests/test_ridge.py::test_dense_sparse[_test_ridge_cv]",
    "sklearn/mixture/tests/test_bayesian_mixture.py::test_bayesian_mixture_means_prior_initialisation",
    "sklearn/preprocessing/tests/test_discretization.py::test_inverse_transform[onehot-dense-kmeans]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[ARDRegression-ARDRegression-check_estimators_fit_returns_self]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostClassifier-AdaBoostClassifier-check_classifiers_regression_target]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[AdaBoostRegressor-AdaBoostRegressor-check_sample_weights_list]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[BernoulliRBM-BernoulliRBM-check_transformer_general]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[MultiTaskElasticNetCV-MultiTaskElasticNetCV-check_dtype_object]"
  ],
  "patch_functions": "{\"sklearn/model_selection/_split.py\": [\"StratifiedKFold.__init__\", \"KFold.__init__\", \"GroupKFold.__init__\", \"check_cv\", \"TimeSeriesSplit.__init__\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sklearn/model_selection/_split.py': ['StratifiedKFold.__init__', 'KFold.__init__', 'GroupKFold.__init__', 'check_cv', 'TimeSeriesSplit.__init__']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sklearn/preprocessing/_encoders.py\": [\"OneHotEncoder.inverse_transform\", \"OneHotEncoder.fit_transform\"], \"sklearn/linear_model/ridge.py\": [\"RidgeCV.fit\"], \"sklearn/utils/estimator_checks.py\": [\"_yield_all_checks\", \"set_checking_parameters\"], \"sklearn/linear_model/ransac.py\": [\"RANSACRegressor.predict\", \"RANSACRegressor\", \"RANSACRegressor.fit\"], \"sklearn/linear_model/base.py\": [\"LinearRegression.fit\", \"LassoLarsIC._set_intercept\", \"RidgeCV.predict\", \"LinearRegression\", \"LinearRegression.predict\", \"_preprocess_data\"], \"sklearn/base.py\": [\"KBinsDiscretizer.fit_transform\", \"AdaBoostClassifier.get_params\", \"RidgeCV.set_params\"], \"sklearn/utils/deprecation.py\": [\"wrapped\"], \"sklearn/mixture/base.py\": [\"BayesianGaussianMixture.fit\"], \"sklearn/preprocessing/_discretization.py\": [\"KBinsDiscretizer\", \"KBinsDiscretizer.inverse_transform\"], \"sklearn/datasets/base.py\": [\"load_iris\", \"load_diabetes\"], \"sklearn/mixture/bayesian_mixture.py\": [\"BayesianGaussianMixture\"], \"sklearn/utils/validation.py\": [\"check_X_y\"], \"sklearn/linear_model/least_angle.py\": [\"lars_path\"], \"sklearn/cluster/k_means_.py\": [\"KMeans.fit\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sklearn/preprocessing/_encoders.py': ['OneHotEncoder.inverse_transform', 'OneHotEncoder.fit_transform'], 'sklearn/linear_model/ridge.py': ['RidgeCV.fit'], 'sklearn/utils/estimator_checks.py': ['_yield_all_checks', 'set_checking_parameters'], 'sklearn/linear_model/ransac.py': ['RANSACRegressor.predict', 'RANSACRegressor', 'RANSACRegressor.fit'], 'sklearn/linear_model/base.py': ['LinearRegression.fit', 'LassoLarsIC._set_intercept', 'RidgeCV.predict', 'LinearRegression', 'LinearRegression.predict', '_preprocess_data'], 'sklearn/base.py': ['KBinsDiscretizer.fit_transform', 'AdaBoostClassifier.get_params', 'RidgeCV.set_params'], 'sklearn/utils/deprecation.py': ['wrapped'], 'sklearn/mixture/base.py': ['BayesianGaussianMixture.fit'], 'sklearn/preprocessing/_discretization.py': ['KBinsDiscretizer', 'KBinsDiscretizer.inverse_transform'], 'sklearn/datasets/base.py': ['load_iris', 'load_diabetes'], 'sklearn/mixture/bayesian_mixture.py': ['BayesianGaussianMixture'], 'sklearn/utils/validation.py': ['check_X_y'], 'sklearn/linear_model/least_angle.py': ['lars_path'], 'sklearn/cluster/k_means_.py': ['KMeans.fit']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.0006000000000000001
}