{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-27347",
  "patch": "diff --git a/sympy/stats/drv_types.py b/sympy/stats/drv_types.py\nindex 38f7232f32fc..8f8b0cffcc2d 100644\n--- a/sympy/stats/drv_types.py\n+++ b/sympy/stats/drv_types.py\n@@ -23,7 +23,7 @@\n from sympy.core.singleton import S\n from sympy.core.symbol import Dummy\n from sympy.core.sympify import sympify\n-from sympy.functions.combinatorial.factorials import (binomial, factorial)\n+from sympy.functions.combinatorial.factorials import (binomial, factorial, FallingFactorial)\n from sympy.functions.elementary.exponential import (exp, log)\n from sympy.functions.elementary.integers import floor\n from sympy.functions.elementary.miscellaneous import sqrt\n@@ -540,6 +540,18 @@ def _characteristic_function(self, t):\n     def _moment_generating_function(self, t):\n         return exp(self.lamda * (exp(t) - 1))\n \n+    def expectation(self, expr, var, evaluate=True, **kwargs):\n+        if evaluate:\n+            if expr == var:\n+                return self.lamda\n+            if (\n+                isinstance(expr, FallingFactorial)\n+                and expr.args[1].is_integer\n+                and expr.args[1].is_positive\n+                and expr.args[0] == var\n+            ):\n+                return self.lamda ** expr.args[1]\n+        return super().expectation(expr, var, evaluate, **kwargs)\n \n def Poisson(name, lamda):\n     r\"\"\"\n",
  "test_patch": "diff --git a/sympy/stats/tests/test_discrete_rv.py b/sympy/stats/tests/test_discrete_rv.py\nindex 80b900fc3f9d..af8ce4f909c8 100644\n--- a/sympy/stats/tests/test_discrete_rv.py\n+++ b/sympy/stats/tests/test_discrete_rv.py\n@@ -24,8 +24,9 @@\n                                    FlorySchulz, Poisson, Geometric, Hermite, Logarithmic,\n                                     NegativeBinomial, Skellam, YuleSimon, Zeta,\n                                     DiscreteRV)\n-from sympy.testing.pytest import slow, nocache_fail, raises\n+from sympy.testing.pytest import slow, nocache_fail, raises, skip\n from sympy.stats.symbolic_probability import Expectation\n+from sympy.functions.combinatorial.factorials import FallingFactorial\n \n x = Symbol('x')\n \n@@ -50,6 +51,18 @@ def test_Poisson():\n     assert isinstance(E(2*x, evaluate=False), Expectation)\n     # issue 8248\n     assert x.pspace.compute_expectation(1) == 1\n+    # issue 27344\n+    try:\n+        import numpy as np\n+    except ImportError:\n+        skip(\"numpy not installed\")\n+    y = Poisson('y', np.float64(4.72544290380919e-11))\n+    assert E(y) == 4.72544290380919e-11\n+    l2 = 5\n+    z = Poisson('z', l2)\n+    assert E(z) == l2\n+    assert E(FallingFactorial(z, 3)) == l2**3\n+    assert E(z**2) == l2 + l2**2\n \n \n def test_FlorySchulz():\n",
  "base_commit": "138cdf3bb95346a43ac6bdfaa06deff1195cc201",
  "head_commit": "20da0a8989df502005235ef65f7f4e64935a2b14",
  "created_at": 1733326679000,
  "version": "1.14",
  "duration_changes": "[{\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.2505801282823086, \"head\": 1.8724856302142143}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.1865965500473976, \"head\": 1.8920011781156063}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.2495618127286434, \"head\": 1.8833357989788055}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.227352485060692, \"head\": 1.8777960576117039}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.220328453928232, \"head\": 1.8922885619103909}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.1966406255960464, \"head\": 1.8739652708172798}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.277796011418104, \"head\": 1.8847442492842674}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.20458522439003, \"head\": 1.9075084365904331}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.234694939106703, \"head\": 1.8807119354605675}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.185638602823019, \"head\": 1.8744792006909847}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.188462018966675, \"head\": 1.8938946090638638}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.1704720705747604, \"head\": 1.8654768653213978}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.1890950575470924, \"head\": 1.8857005536556244}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.1679478585720062, \"head\": 1.8884337805211544}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.195616662502289, \"head\": 1.8907677009701729}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.1886714585125446, \"head\": 1.8832628428936005}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.195226278156042, \"head\": 1.889992579817772}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.161542434245348, \"head\": 1.9044498428702354}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.1610609367489815, \"head\": 1.9000046290457249}}, {\"sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess\": {\"base\": 2.221874240785837, \"head\": 1.854772113263607}}]",
  "efficiency_test": [
    "sympy/stats/tests/test_stochastic_process.py::test_PoissonProcess"
  ],
  "patch_functions": "{}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/sets/sets.py\": [\"open\", \"Lopen\", \"Ropen\", \"Interval\"], \"sympy/stats/symbolic_probability.py\": [\"Probability\", \"Expectation\"], \"sympy/sets/contains.py\": [\"Contains\"], \"sympy/stats/stochastic_process_types.py\": [\"PoissonProcess.lamda\", \"PoissonProcess.split\", \"PoissonProcess.state_space\", \"PoissonProcess.distribution\", \"PoissonProcess\", \"PoissonProcess.joint_distribution\"], \"sympy/core/decorators.py\": [\"Symbol._func\"], \"sympy/core/sympify.py\": [\"sympify\"], \"sympy/polys/polytools.py\": [\"replace\"], \"sympy/stats/drv_types.py\": [\"PoissonDistribution\"], \"sympy/stats/rv.py\": [\"expectation\", \"SingleDiscretePSpace.distribution\", \"probability\"], \"sympy/core/cache.py\": [\"wrapper\"], \"sympy/core/symbol.py\": [\"symbols\"], \"sympy/stats/joint_rv_types.py\": [\"JointDistributionHandmade\"], \"sympy/core/basic.py\": [\"Add.simplify\", \"Integer.match\", \"Mul.replace\"], \"sympy/core/numbers.py\": [\"Rational\"], \"sympy/functions/combinatorial/factorials.py\": [\"factorial\"], \"sympy/stats/stochastic_process.py\": [\"StochasticPSpace.distribution\"], \"sympy/functions/elementary/exponential.py\": [\"exp\", \"exp.exp\"], \"sympy/logic/boolalg.py\": [\"Not\"], \"sympy/core/function.py\": [\"Lambda\"], \"sympy/simplify/simplify.py\": [\"simplify\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/sets/sets.py': ['open', 'Lopen', 'Ropen', 'Interval'], 'sympy/stats/symbolic_probability.py': ['Probability', 'Expectation'], 'sympy/sets/contains.py': ['Contains'], 'sympy/stats/stochastic_process_types.py': ['PoissonProcess.lamda', 'PoissonProcess.split', 'PoissonProcess.state_space', 'PoissonProcess.distribution', 'PoissonProcess', 'PoissonProcess.joint_distribution'], 'sympy/core/decorators.py': ['Symbol._func'], 'sympy/core/sympify.py': ['sympify'], 'sympy/polys/polytools.py': ['replace'], 'sympy/stats/drv_types.py': ['PoissonDistribution'], 'sympy/stats/rv.py': ['expectation', 'SingleDiscretePSpace.distribution', 'probability'], 'sympy/core/cache.py': ['wrapper'], 'sympy/core/symbol.py': ['symbols'], 'sympy/stats/joint_rv_types.py': ['JointDistributionHandmade'], 'sympy/core/basic.py': ['Add.simplify', 'Integer.match', 'Mul.replace'], 'sympy/core/numbers.py': ['Rational'], 'sympy/functions/combinatorial/factorials.py': ['factorial'], 'sympy/stats/stochastic_process.py': ['StochasticPSpace.distribution'], 'sympy/functions/elementary/exponential.py': ['exp', 'exp.exp'], 'sympy/logic/boolalg.py': ['Not'], 'sympy/core/function.py': ['Lambda'], 'sympy/simplify/simplify.py': ['simplify']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.1380000000000001
}