{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-9684",
  "patch": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 18fae4e0151..135358b08e8 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -34,6 +34,8 @@ Deprecations\n Bug fixes\n ~~~~~~~~~\n \n+- Fix inadvertent deep-copying of child data in DataTree.\n+  By `Stephan Hoyer <https://github.com/shoyer>`_.\n \n Documentation\n ~~~~~~~~~~~~~\ndiff --git a/xarray/core/datatree.py b/xarray/core/datatree.py\nindex d4ee2621557..e8b8f2c93ae 100644\n--- a/xarray/core/datatree.py\n+++ b/xarray/core/datatree.py\n@@ -146,7 +146,7 @@ def check_alignment(\n ) -> None:\n     if parent_ds is not None:\n         try:\n-            align(node_ds, parent_ds, join=\"exact\")\n+            align(node_ds, parent_ds, join=\"exact\", copy=False)\n         except ValueError as e:\n             node_repr = _indented(_without_header(repr(node_ds)))\n             parent_repr = _indented(dims_and_coords_repr(parent_ds))\n",
  "test_patch": "diff --git a/xarray/tests/test_datatree.py b/xarray/tests/test_datatree.py\nindex 1fa93d9853d..47e38e2b890 100644\n--- a/xarray/tests/test_datatree.py\n+++ b/xarray/tests/test_datatree.py\n@@ -69,6 +69,19 @@ def test_data_arg(self) -> None:\n         with pytest.raises(TypeError):\n             DataTree(dataset=xr.DataArray(42, name=\"foo\"))  # type: ignore[arg-type]\n \n+    def test_child_data_not_copied(self) -> None:\n+        # regression test for https://github.com/pydata/xarray/issues/9683\n+        class NoDeepCopy:\n+            def __deepcopy__(self, memo):\n+                raise TypeError(\"class can't be deepcopied\")\n+\n+        da = xr.DataArray(NoDeepCopy())\n+        ds = xr.Dataset({\"var\": da})\n+        dt1 = xr.DataTree(ds)\n+        dt2 = xr.DataTree(ds, children={\"child\": dt1})\n+        dt3 = xr.DataTree.from_dict({\"/\": ds, \"child\": ds})\n+        assert_identical(dt2, dt3)\n+\n \n class TestFamilyTree:\n     def test_dont_modify_children_inplace(self) -> None:\n",
  "base_commit": "5be821bdce661c099c3b3a44aba77d0b66307fd9",
  "head_commit": "3c277044229664a94688defaffa6d4ffd925fff0",
  "created_at": 1729898873000,
  "version": "2024.05",
  "duration_changes": "[{\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04554160684347153, \"head\": 0.028919894248247147}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.01068166270852089, \"head\": 0.010635815560817719}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.012942053377628326, \"head\": 0.011150181293487549}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.034776147454977036, \"head\": 0.027081336826086044}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010195538401603699, \"head\": 0.009124889969825745}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008794255554676056, \"head\": 0.008091524243354797}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009008709341287613, \"head\": 0.006639175117015839}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008094009011983871, \"head\": 0.006167266517877579}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017344951629638672, \"head\": 0.0155070461332798}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04524143785238266, \"head\": 0.030365969985723495}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010775219649076462, \"head\": 0.010388098657131195}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.012868311256170273, \"head\": 0.010871008038520813}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03533526510000229, \"head\": 0.02693316712975502}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010188844054937363, \"head\": 0.009101919829845428}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.0088106170296669, \"head\": 0.008092202246189117}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009030677378177643, \"head\": 0.00756082683801651}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008167237043380737, \"head\": 0.006346311420202255}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017170030623674393, \"head\": 0.016225848346948624}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04549599066376686, \"head\": 0.02844797447323799}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010747246444225311, \"head\": 0.010576196014881134}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.013197652995586395, \"head\": 0.010800357908010483}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03453652560710907, \"head\": 0.027356233447790146}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010198753327131271, \"head\": 0.009042762219905853}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008802168071269989, \"head\": 0.008186183869838715}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.008895132690668106, \"head\": 0.006599318236112595}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008102454245090485, \"head\": 0.0062192827463150024}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.01787366345524788, \"head\": 0.015629395842552185}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04535979405045509, \"head\": 0.02846062183380127}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010747656226158142, \"head\": 0.011599712073802948}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.01287810131907463, \"head\": 0.011127963662147522}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03473879396915436, \"head\": 0.02687714248895645}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010197382420301437, \"head\": 0.009105868637561798}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008806928992271423, \"head\": 0.007943429052829742}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.008945122361183167, \"head\": 0.006606340408325195}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008086804300546646, \"head\": 0.006086666136980057}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017164457589387894, \"head\": 0.01566315069794655}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04859301075339317, \"head\": 0.02861693501472473}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010785847902297974, \"head\": 0.010620590299367905}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.012919560074806213, \"head\": 0.010991066694259644}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03600553423166275, \"head\": 0.02705356851220131}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010584261268377304, \"head\": 0.008858256042003632}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008836917579174042, \"head\": 0.007987868040800095}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009087745100259781, \"head\": 0.006533317267894745}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008191440254449844, \"head\": 0.006118293851613998}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017752908170223236, \"head\": 0.015361413359642029}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04714736342430115, \"head\": 0.028480879962444305}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010912470519542694, \"head\": 0.010101944208145142}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.013015743345022202, \"head\": 0.010597612708806992}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03503148630261421, \"head\": 0.026779837906360626}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010448124259710312, \"head\": 0.00886620208621025}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008842937648296356, \"head\": 0.008071936666965485}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.008915230631828308, \"head\": 0.006592933088541031}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008094817399978638, \"head\": 0.006145112216472626}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017098117619752884, \"head\": 0.015278276056051254}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04689858481287956, \"head\": 0.02890869230031967}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.011141616851091385, \"head\": 0.010249432176351547}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.01333153247833252, \"head\": 0.010703112930059433}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.035927195101976395, \"head\": 0.027031440287828445}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010902859270572662, \"head\": 0.009393319487571716}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.0090441033244133, \"head\": 0.008267667144536972}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009377960115671158, \"head\": 0.006687231361865997}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008284054696559906, \"head\": 0.006268784403800964}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017838135361671448, \"head\": 0.015581004321575165}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04595688730478287, \"head\": 0.028541982173919678}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.011021092534065247, \"head\": 0.010183725506067276}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.013172134757041931, \"head\": 0.010678216814994812}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.035731252282857895, \"head\": 0.027217432856559753}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010388951748609543, \"head\": 0.008959081023931503}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008993197232484818, \"head\": 0.008113451302051544}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.00901106372475624, \"head\": 0.006566986441612244}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008215732872486115, \"head\": 0.006150282919406891}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.01741182431578636, \"head\": 0.017758317291736603}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04674973711371422, \"head\": 0.028168752789497375}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.017892640084028244, \"head\": 0.010026678442955017}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.016859229654073715, \"head\": 0.01053738221526146}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03621356934309006, \"head\": 0.026682928204536438}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010901026427745819, \"head\": 0.008875146508216858}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.009411212056875229, \"head\": 0.008067287504673004}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.010190639644861221, \"head\": 0.006609316915273666}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008339840918779373, \"head\": 0.006186489015817642}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.018002107739448547, \"head\": 0.015396755188703537}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04639333486557007, \"head\": 0.028263669461011887}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.011022374033927917, \"head\": 0.010081376880407333}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.013069190084934235, \"head\": 0.011051345616579056}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03548140078783035, \"head\": 0.02713104337453842}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.011391159147024155, \"head\": 0.008827857673168182}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.009073719382286072, \"head\": 0.00799543410539627}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009102173149585724, \"head\": 0.006521683186292648}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008189026266336441, \"head\": 0.006088949739933014}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017579611390829086, \"head\": 0.015829112380743027}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04696108400821686, \"head\": 0.028785690665245056}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010811977088451385, \"head\": 0.010093878954648972}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.012906420975923538, \"head\": 0.010758757591247559}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03496503084897995, \"head\": 0.02689019963145256}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.011282995343208313, \"head\": 0.009191211313009262}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.00886523351073265, \"head\": 0.008077770471572876}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009619306772947311, \"head\": 0.006566476076841354}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.00828513503074646, \"head\": 0.006171554327011108}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017375890165567398, \"head\": 0.015473034232854843}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04629535228013992, \"head\": 0.029572881758213043}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.011031661182641983, \"head\": 0.010231785476207733}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.013065163046121597, \"head\": 0.01060682162642479}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03547379747033119, \"head\": 0.027536090463399887}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010594330728054047, \"head\": 0.009606029838323593}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008845571428537369, \"head\": 0.008895635604858398}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.00906318798661232, \"head\": 0.0066079869866371155}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008154571056365967, \"head\": 0.006095413118600845}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017301641404628754, \"head\": 0.015226006507873535}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.046444471925497055, \"head\": 0.03022145852446556}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010960686951875687, \"head\": 0.010296490043401718}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.013037551194429398, \"head\": 0.010914422571659088}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.037610866129398346, \"head\": 0.02716189995408058}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.01046086847782135, \"head\": 0.009039133787155151}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008894331753253937, \"head\": 0.008115679025650024}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009050067514181137, \"head\": 0.006619017571210861}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008203074336051941, \"head\": 0.006294924765825272}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017463184893131256, \"head\": 0.015555344521999359}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.045253902673721313, \"head\": 0.02895127236843109}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.0105406753718853, \"head\": 0.01005888357758522}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.01262832060456276, \"head\": 0.010823428630828857}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03419395908713341, \"head\": 0.028794080018997192}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.00999094545841217, \"head\": 0.008856810629367828}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008653849363327026, \"head\": 0.008472248911857605}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.008797075599431992, \"head\": 0.006494998931884766}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.00795028731226921, \"head\": 0.006072197109460831}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.016898252069950104, \"head\": 0.015055850148200989}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.06004844978451729, \"head\": 0.028285231441259384}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010862413793802261, \"head\": 0.010033264756202698}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.012958545237779617, \"head\": 0.01065262034535408}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.0359441414475441, \"head\": 0.027956582605838776}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.01303200051188469, \"head\": 0.009061828255653381}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.009462691843509674, \"head\": 0.008194640278816223}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009135916829109192, \"head\": 0.006654944270849228}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008148740977048874, \"head\": 0.006210245192050934}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.01732516661286354, \"head\": 0.015578638762235641}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.0461181104183197, \"head\": 0.029838960617780685}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010864250361919403, \"head\": 0.010319419205188751}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.012983832508325577, \"head\": 0.010905642062425613}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03487468138337135, \"head\": 0.026947125792503357}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010296721011400223, \"head\": 0.00913483276963234}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008889485150575638, \"head\": 0.00804879143834114}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.00915272906422615, \"head\": 0.006621338427066803}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.00826118141412735, \"head\": 0.006142757833003998}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017426300793886185, \"head\": 0.015376649796962738}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04644466191530228, \"head\": 0.028346337378025055}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010706499218940735, \"head\": 0.010196667164564133}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.013425081968307495, \"head\": 0.010750100016593933}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03445149213075638, \"head\": 0.027020961046218872}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010140936821699142, \"head\": 0.009458154439926147}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008749574422836304, \"head\": 0.008143823593854904}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.008953683078289032, \"head\": 0.006693251430988312}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008066516369581223, \"head\": 0.0061952657997608185}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.01704060658812523, \"head\": 0.015413910150527954}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04684353247284889, \"head\": 0.03007042407989502}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.011178124696016312, \"head\": 0.010209005326032639}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.01328090950846672, \"head\": 0.010754372924566269}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03527645766735077, \"head\": 0.0269998237490654}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010613884776830673, \"head\": 0.008970826864242554}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.00880143791437149, \"head\": 0.00814656913280487}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009252790361642838, \"head\": 0.00661526620388031}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008153479546308517, \"head\": 0.00618506595492363}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017271805554628372, \"head\": 0.017009422183036804}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.045642655342817307, \"head\": 0.028672248125076294}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.010814361274242401, \"head\": 0.01023079827427864}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.012758046388626099, \"head\": 0.010730654001235962}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.03463046997785568, \"head\": 0.026969756931066513}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010180842131376266, \"head\": 0.009051155298948288}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008729476481676102, \"head\": 0.00812792032957077}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.008891385048627853, \"head\": 0.006604887545108795}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008028846234083176, \"head\": 0.006189458072185516}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.017168179154396057, \"head\": 0.015537314116954803}}, {\"xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store\": {\"base\": 0.04606670141220093, \"head\": 0.028613287955522537}, \"xarray/tests/test_datatree.py::TestAggregations::test_dim_argument\": {\"base\": 0.01100887730717659, \"head\": 0.010019365698099136}, \"xarray/tests/test_datatree.py::TestCoords::test_modify\": {\"base\": 0.013018116354942322, \"head\": 0.010674852877855301}, \"xarray/tests/test_datatree.py::TestCopy::test_copy\": {\"base\": 0.034967683255672455, \"head\": 0.026784677058458328}, \"xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes\": {\"base\": 0.010335251688957214, \"head\": 0.008885234594345093}, \"xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic\": {\"base\": 0.008879616856575012, \"head\": 0.007976509630680084}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset\": {\"base\": 0.009005259722471237, \"head\": 0.006537351757287979}, \"xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree\": {\"base\": 0.008579511195421219, \"head\": 0.006197851151227951}, \"xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg\": {\"base\": 0.01720290631055832, \"head\": 0.015354759991168976}}]",
  "efficiency_test": [
    "xarray/tests/test_backends_datatree.py::TestZarrDatatreeIO::test_to_zarr_zip_store",
    "xarray/tests/test_datatree.py::TestAggregations::test_dim_argument",
    "xarray/tests/test_datatree.py::TestCoords::test_modify",
    "xarray/tests/test_datatree.py::TestCopy::test_copy",
    "xarray/tests/test_datatree.py::TestInheritance::test_inconsistent_grandchild_indexes",
    "xarray/tests/test_datatree.py::TestIsomorphicEqualsAndIdentical::test_isomorphic",
    "xarray/tests/test_datatree.py::TestOps::test_binary_op_commutativity_with_dataset",
    "xarray/tests/test_datatree.py::TestOps::test_binary_op_on_datatree",
    "xarray/tests/test_datatree_mapping.py::TestMapOverSubTree::test_single_tree_arg_plus_arg"
  ],
  "patch_functions": "{\"xarray/core/datatree.py\": [\"check_alignment\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/core/datatree.py': ['check_alignment']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/coordinates.py\": [\"DataTreeCoordinates.copy\"], \"xarray/core/datatree.py\": [\"from_dict\", \"DataTree.data_vars\", \"DataTree.variables\", \"DataTree.to_zarr\", \"DataTree.attrs\", \"DataTree.encoding\", \"DataTree.coords\", \"DataTree.isomorphic\", \"DataTree\"], \"xarray/core/dataset.py\": [\"Dataset\", \"Dataset.to_zarr\", \"Dataset.coords\", \"<genexpr>\", \"Dataset.copy\"], \"xarray/core/treenode.py\": [\"DataTree.root\", \"DataTree.copy\", \"DataTree.subtree\"], \"xarray/core/variable.py\": [\"IndexVariable.copy\", \"Variable.data\"], \"xarray/backends/zarr.py\": [\"_zarr_v3\"], \"xarray/backends/api.py\": [\"open_datatree\", \"to_zarr\"], \"xarray/core/dataarray.py\": [\"DataArray.coords\", \"DataArray\"], \"xarray/core/_aggregations.py\": [\"DataTree.mean\"], \"xarray/core/datatree_mapping.py\": [\"map_over_datasets\"], \"xarray/core/duck_array_ops.py\": [\"mean\"], \"xarray/namedarray/core.py\": [\"Variable.copy\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/coordinates.py': ['DataTreeCoordinates.copy'], 'xarray/core/datatree.py': ['from_dict', 'DataTree.data_vars', 'DataTree.variables', 'DataTree.to_zarr', 'DataTree.attrs', 'DataTree.encoding', 'DataTree.coords', 'DataTree.isomorphic', 'DataTree'], 'xarray/core/dataset.py': ['Dataset', 'Dataset.to_zarr', 'Dataset.coords', '<genexpr>', 'Dataset.copy'], 'xarray/core/treenode.py': ['DataTree.root', 'DataTree.copy', 'DataTree.subtree'], 'xarray/core/variable.py': ['IndexVariable.copy', 'Variable.data'], 'xarray/backends/zarr.py': ['_zarr_v3'], 'xarray/backends/api.py': ['open_datatree', 'to_zarr'], 'xarray/core/dataarray.py': ['DataArray.coords', 'DataArray'], 'xarray/core/_aggregations.py': ['DataTree.mean'], 'xarray/core/datatree_mapping.py': ['map_over_datasets'], 'xarray/core/duck_array_ops.py': ['mean'], 'xarray/namedarray/core.py': ['Variable.copy']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.1817777777777779
}