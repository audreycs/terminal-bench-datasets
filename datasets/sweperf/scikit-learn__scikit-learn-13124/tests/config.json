{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-13124",
  "patch": "diff --git a/doc/whats_new/v0.21.rst b/doc/whats_new/v0.21.rst\nindex fdd0230fc840b..3d7393eb901e5 100644\n--- a/doc/whats_new/v0.21.rst\n+++ b/doc/whats_new/v0.21.rst\n@@ -200,6 +200,11 @@ Support for Python 3.4 and below has been officially dropped.\n   :func:`~model_selection.validation_curve` only the latter is required.\n   :issue:`12613` and :issue:`12669` by :user:`Marc Torrellas <marctorrellas>`.\n \n+- |Fix| Fixed a bug where :class:`model_selection.StratifiedKFold`\n+  shuffles each class's samples with the same ``random_state``,\n+  making ``shuffle=True`` ineffective.\n+  :issue:`13124` by :user:`Hanmin Qin <qinhanmin2014>`.\n+\n :mod:`sklearn.neighbors`\n ........................\n \ndiff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 21ffbc49a2004..e8d46faac91d9 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -576,8 +576,7 @@ class StratifiedKFold(_BaseKFold):\n             ``n_splits`` default value will change from 3 to 5 in v0.22.\n \n     shuffle : boolean, optional\n-        Whether to shuffle each stratification of the data before splitting\n-        into batches.\n+        Whether to shuffle each class's samples before splitting into batches.\n \n     random_state : int, RandomState instance or None, optional, default=None\n         If int, random_state is the seed used by the random number generator;\n@@ -620,7 +619,7 @@ def __init__(self, n_splits='warn', shuffle=False, random_state=None):\n         super().__init__(n_splits, shuffle, random_state)\n \n     def _make_test_folds(self, X, y=None):\n-        rng = self.random_state\n+        rng = check_random_state(self.random_state)\n         y = np.asarray(y)\n         type_of_target_y = type_of_target(y)\n         allowed_target_types = ('binary', 'multiclass')\n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 2be8d172ef822..cab88fb669db2 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,17 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # Ensure that we shuffle each class's samples with different\n+    # random_state in StratifiedKFold\n+    # See https://github.com/scikit-learn/scikit-learn/pull/13124\n+    X = np.arange(10)\n+    y = [0] * 5 + [1] * 5\n+    kf1 = StratifiedKFold(5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(5, shuffle=True, random_state=1)\n+    test_set1 = sorted([tuple(s[1]) for s in kf1.split(X, y)])\n+    test_set2 = sorted([tuple(s[1]) for s in kf2.split(X, y)])\n+    assert test_set1 != test_set2\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "base_commit": "9f0b959a8c9195d1b6e203f08b698e052b426ca9",
  "head_commit": "85c2d67f530bce44db1eb489c7aa0267384f79d3",
  "created_at": 1549678523000,
  "version": "0.21",
  "duration_changes": "[{\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.020134195685386658, \"head\": 0.0952097624540329}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.09058944508433342, \"head\": 0.01540224626660347}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.010871145874261856, \"head\": 0.05406771972775459}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.039475347846746445, \"head\": 0.03814394399523735}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.011550530791282654, \"head\": 0.013945285230875015}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.12509090825915337, \"head\": 0.01371300220489502}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.014719419181346893, \"head\": 0.016137130558490753}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.10216450318694115, \"head\": 0.10662711411714554}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.013876225799322128, \"head\": 0.11365534365177155}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.06738964468240738, \"head\": 0.01547309011220932}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.014643851667642593, \"head\": 0.013264954090118408}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.04248626530170441, \"head\": 0.10507049784064293}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.04408552870154381, \"head\": 0.012525305151939392}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.05099446699023247, \"head\": 0.017536990344524384}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.13884127140045166, \"head\": 0.17173369973897934}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.03940345346927643, \"head\": 0.013371076434850693}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.03858548775315285, \"head\": 0.0137723907828331}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.01825525239109993, \"head\": 0.13245785236358643}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.1337895318865776, \"head\": 0.01124010980129242}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.025853000581264496, \"head\": 0.13760114833712578}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.10910520702600479, \"head\": 0.01631953939795494}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.018492717295885086, \"head\": 0.018820103257894516}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.10787192732095718, \"head\": 0.013269137591123581}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.030618932098150253, \"head\": 0.12952672317624092}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.0325244776904583, \"head\": 0.0231308676302433}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.019686173647642136, \"head\": 0.020184528082609177}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.16347062960267067, \"head\": 0.01699410006403923}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.01912904530763626, \"head\": 0.10799721255898476}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.09994576871395111, \"head\": 0.011352673172950745}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.09772337228059769, \"head\": 0.11016105115413666}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.029593054205179214, \"head\": 0.02266666665673256}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.10609592497348785, \"head\": 0.10184936970472336}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.014340907335281372, \"head\": 0.02342510223388672}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.08430713787674904, \"head\": 0.11583752930164337}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.01581655442714691, \"head\": 0.011312894523143768}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.01893642172217369, \"head\": 0.10518037527799606}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.04646400362253189, \"head\": 0.02976066619157791}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.07525685057044029, \"head\": 0.12068314105272293}}, {\"sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso\": {\"base\": 0.014516420662403107, \"head\": 0.0437825582921505}, \"sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]\": {\"base\": 0.11183559522032738, \"head\": 0.03496900200843811}}]",
  "efficiency_test": [
    "sklearn/linear_model/tests/test_coordinate_descent.py::test_warm_start_multitask_lasso",
    "sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]"
  ],
  "patch_functions": "{\"sklearn/model_selection/_split.py\": [\"StratifiedKFold._make_test_folds\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sklearn/model_selection/_split.py': ['StratifiedKFold._make_test_folds']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sklearn/linear_model/least_angle.py\": [\"LassoLarsIC.fit\"], \"sklearn/linear_model/coordinate_descent.py\": [\"MultiTaskLasso\"], \"sklearn/datasets/base.py\": [\"load_diabetes\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sklearn/linear_model/least_angle.py': ['LassoLarsIC.fit'], 'sklearn/linear_model/coordinate_descent.py': ['MultiTaskLasso'], 'sklearn/datasets/base.py': ['load_diabetes']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.07750000000000005
}