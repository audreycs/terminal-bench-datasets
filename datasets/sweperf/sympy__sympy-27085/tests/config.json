{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-27085",
  "patch": "diff --git a/sympy/polys/matrices/ddm.py b/sympy/polys/matrices/ddm.py\nindex 2425aaffba64..8f90a3305367 100644\n--- a/sympy/polys/matrices/ddm.py\n+++ b/sympy/polys/matrices/ddm.py\n@@ -117,7 +117,7 @@ def __init__(self, rowslist, shape, domain):\n         if len(rowslist) != m or any(len(row) != n for row in rowslist):\n             raise DMBadInputError(\"Inconsistent row-list/shape\")\n \n-        super().__init__(rowslist)\n+        super().__init__([i.copy() for i in rowslist])\n         self.shape = (m, n)\n         self.rows = m\n         self.cols = n\n",
  "test_patch": "diff --git a/sympy/polys/matrices/tests/test_domainmatrix.py b/sympy/polys/matrices/tests/test_domainmatrix.py\nindex b7fe91c574ba..2b59d76a9d46 100644\n--- a/sympy/polys/matrices/tests/test_domainmatrix.py\n+++ b/sympy/polys/matrices/tests/test_domainmatrix.py\n@@ -60,6 +60,11 @@ def test_DomainMatrix_init():\n \n     raises(DMBadInputError, lambda: DomainMatrix([[ZZ(1), ZZ(2)]], (2, 2), ZZ))\n \n+    # uses copy\n+    was = [i.copy() for i in lol]\n+    A[0,0] = ZZ(42)\n+    assert was == lol\n+\n \n def test_DomainMatrix_from_rep():\n     ddm = DDM([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)]], (2, 2), ZZ)\n",
  "base_commit": "c870d17c2638f5061800e344b72ff80086a0b41d",
  "head_commit": "b39fa6fffeef5a1c71c546817bffac4dcebb06ea",
  "created_at": 1726699486000,
  "version": "1.14",
  "duration_changes": "[{\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19291693717241287, \"head\": 0.1948687732219696}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.1985754631459713, \"head\": 0.1939409300684929}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.20252959057688713, \"head\": 0.1949225477874279}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19502511993050575, \"head\": 0.1965400166809559}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19702186435461044, \"head\": 0.19285713881254196}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19944924116134644, \"head\": 0.20333024859428406}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19559494778513908, \"head\": 0.19287237524986267}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.20002718642354012, \"head\": 0.19874495640397072}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19227364659309387, \"head\": 0.19442585110664368}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.1955116242170334, \"head\": 0.19688501581549644}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19155670702457428, \"head\": 0.19565363973379135}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19622152671217918, \"head\": 0.19148452579975128}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19833875074982643, \"head\": 0.19697793200612068}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.2224002406001091, \"head\": 0.19425654411315918}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.1974772997200489, \"head\": 0.19226371496915817}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19679663702845573, \"head\": 0.1954321525990963}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19745870679616928, \"head\": 0.19273119419813156}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19901345297694206, \"head\": 0.1943163461983204}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.19689298048615456, \"head\": 0.19507072493433952}}, {\"sympy/integrals/tests/test_heurisch.py::test_RR\": {\"base\": 0.2034699209034443, \"head\": 0.19629747048020363}}]",
  "efficiency_test": [
    "sympy/integrals/tests/test_heurisch.py::test_RR"
  ],
  "patch_functions": "{\"sympy/polys/matrices/ddm.py\": [\"DDM.__init__\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/polys/matrices/ddm.py': ['DDM.__init__']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/functions/elementary/hyperbolic.py\": [\"asinh\"], \"sympy/integrals/heurisch.py\": [\"_iter_mappings\", \"heurisch\"], \"sympy/core/cache.py\": [\"wrapper\"], \"sympy/core/symbol.py\": [\"symbols\"], \"sympy/functions/elementary/miscellaneous.py\": [\"sqrt\"], \"sympy/core/decorators.py\": [\"Symbol._func\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/functions/elementary/hyperbolic.py': ['asinh'], 'sympy/integrals/heurisch.py': ['_iter_mappings', 'heurisch'], 'sympy/core/cache.py': ['wrapper'], 'sympy/core/symbol.py': ['symbols'], 'sympy/functions/elementary/miscellaneous.py': ['sqrt'], 'sympy/core/decorators.py': ['Symbol._func']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.006
}