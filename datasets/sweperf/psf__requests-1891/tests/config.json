{
  "repo": "psf/requests",
  "instance_id": "psf__requests-1891",
  "patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex dd10e95933..ca462232c8 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -372,19 +372,19 @@ def send(self, request, stream=False, timeout=None, verify=True, cert=None, prox\n                     conn._put_conn(low_conn)\n \n         except socket.error as sockerr:\n-            raise ConnectionError(sockerr)\n+            raise ConnectionError(sockerr, request=request)\n \n         except MaxRetryError as e:\n-            raise ConnectionError(e)\n+            raise ConnectionError(e, request=request)\n \n         except _ProxyError as e:\n             raise ProxyError(e)\n \n         except (_SSLError, _HTTPError) as e:\n             if isinstance(e, _SSLError):\n-                raise SSLError(e)\n+                raise SSLError(e, request=request)\n             elif isinstance(e, TimeoutError):\n-                raise Timeout(e)\n+                raise Timeout(e, request=request)\n             else:\n                 raise\n \ndiff --git a/requests/exceptions.py b/requests/exceptions.py\nindex cd3c760016..a4ee9d630c 100644\n--- a/requests/exceptions.py\n+++ b/requests/exceptions.py\n@@ -14,15 +14,22 @@ class RequestException(IOError):\n     \"\"\"There was an ambiguous exception that occurred while handling your\n     request.\"\"\"\n \n+    def __init__(self, *args, **kwargs):\n+        \"\"\"\n+        Initialize RequestException with `request` and `response` objects.\n+        \"\"\"\n+        response = kwargs.pop('response', None)\n+        self.response = response\n+        self.request = kwargs.pop('request', None)\n+        if (response is not None and not self.request and\n+                hasattr(response, 'request')):\n+            self.request = self.response.request\n+        super(RequestException, self).__init__(*args, **kwargs)\n+\n \n class HTTPError(RequestException):\n     \"\"\"An HTTP error occurred.\"\"\"\n \n-    def __init__(self, *args, **kwargs):\n-        \"\"\" Initializes HTTPError with optional `response` object. \"\"\"\n-        self.response = kwargs.pop('response', None)\n-        super(HTTPError, self).__init__(*args, **kwargs)\n-\n \n class ConnectionError(RequestException):\n     \"\"\"A Connection error occurred.\"\"\"\n",
  "test_patch": "",
  "base_commit": "b1c8fd3b679c95473f04aaf37f4bd80178411e01",
  "head_commit": "07e0a6198d132fee147806105a6ff05e541d3ba2",
  "created_at": 1390961808000,
  "version": "2.2",
  "duration_changes": "[{\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 0.006598759442567825, \"head\": 0.9010754339396954}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 0.008316636085510254, \"head\": 4.386609219014645}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 0.006926573812961578, \"head\": 16.40048148855567}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 0.008637752383947372, \"head\": 1.7847637981176376}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 0.006574224680662155, \"head\": 1.53086843714118}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 0.007859881967306137, \"head\": 3.8608393743634224}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 3.711719512939453, \"head\": 0.3894185535609722}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 2.055092867463827, \"head\": 0.8933803476393223}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 1.5193768478929996, \"head\": 0.26895761862397194}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 2.813944987952709, \"head\": 3.0966018736362457}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 4.07303499430418, \"head\": 3.3513036966323853}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 3.857523076236248, \"head\": 6.834471523761749}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 2.241802092641592, \"head\": 2.0966694839298725}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 12.11848670616746, \"head\": 3.5164391547441483}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 1.628487017005682, \"head\": 0.672122348099947}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 1.3344408459961414, \"head\": 3.9839625731110573}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 3.5872518084943295, \"head\": 0.317362729460001}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 6.1220160238444805, \"head\": 1.36944580078125}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 0.5734033063054085, \"head\": 0.681311372667551}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 16.14154703915119, \"head\": 3.439790964126587}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 1.329901296645403, \"head\": 16.382570430636406}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 10.237358465790749, \"head\": 3.74043507874012}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 0.8925974667072296, \"head\": 2.0180634446442127}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 12.071526862680912, \"head\": 13.633483927696943}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 2.2961634024977684, \"head\": 6.781421147286892}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 5.0361968874931335, \"head\": 18.255431305617094}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 21.184475876390934, \"head\": 20.993549268692732}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 13.14096387848258, \"head\": 1.7049411162734032}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 3.258365400135517, \"head\": 2.5247004814445972}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 5.837197493761778, \"head\": 2.33517724648118}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 0.7821548283100128, \"head\": 4.109268981963396}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 3.5138112120330334, \"head\": 1.6530491039156914}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 11.32308417931199, \"head\": 10.62663083896041}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 26.319284733384848, \"head\": 7.494843274354935}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 1.556198038160801, \"head\": 17.482035540044308}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 9.612074121832848, \"head\": 1.4147523492574692}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 16.997110206633806, \"head\": 1.7783053815364838}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 5.371327366679907, \"head\": 17.983154699206352}}, {\"test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive\": {\"base\": 4.888218630105257, \"head\": 2.8570647351443768}, \"test_requests.py::RequestsTestCase::test_status_raising\": {\"base\": 12.540691729635, \"head\": 11.303009517490864}}]",
  "efficiency_test": [
    "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
    "test_requests.py::RequestsTestCase::test_status_raising"
  ],
  "patch_functions": "{\"requests/adapters.py\": [\"HTTPAdapter.send\"], \"requests/exceptions.py\": [\"HTTPError.__init__\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'requests/adapters.py': ['HTTPAdapter.send'], 'requests/exceptions.py': ['HTTPError.__init__']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"requests/sessions.py\": [\"Session.get\", \"Session\"], \"requests/api.py\": [\"get\"], \"test_requests.py\": [\"httpbin\"], \"requests/models.py\": [\"Response.raise_for_status\", \"Response.ok\"], \"requests/packages/urllib3/response.py\": [\"HTTPResponse.closed\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'requests/sessions.py': ['Session.get', 'Session'], 'requests/api.py': ['get'], 'test_requests.py': ['httpbin'], 'requests/models.py': ['Response.raise_for_status', 'Response.ok'], 'requests/packages/urllib3/response.py': ['HTTPResponse.closed']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.04400000000000003
}