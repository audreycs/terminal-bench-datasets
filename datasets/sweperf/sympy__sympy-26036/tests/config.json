{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-26036",
  "patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex a8dc47bdfe67..e6e9e310db47 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -1533,7 +1533,8 @@ def _eval_nseries(self, x, n, logx, cdir=0):\n                 return res\n \n         f = b.as_leading_term(x, logx=logx)\n-        g = (b/f - S.One).cancel(expand=False)\n+        g = (_mexpand(b) - f).cancel()\n+        g = g/f\n         if not m.is_number:\n             raise NotImplementedError()\n         maxpow = n - m*e\n@@ -1583,8 +1584,8 @@ def mul(d1, d2):\n             # Convert floats like 0.5 to exact SymPy numbers like S.Half, to\n             # prevent rounding errors which can induce wrong values of d leading\n             # to a NotImplementedError being returned from the block below.\n-            from sympy.simplify.simplify import nsimplify\n-            _, d = nsimplify(g).leadterm(x, logx=logx)\n+            g = g.replace(lambda x: x.is_Float, lambda x: Rational(x))\n+            _, d = g.leadterm(x, logx=logx)\n         if not d.is_positive:\n             g = g.simplify()\n             if g.is_zero:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex af83b22ab361..a95144d99cc9 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -479,14 +479,13 @@ def test_as_leading_term():\n     # https://github.com/sympy/sympy/issues/21177\n     e = -3*x + (x + Rational(3, 2) - sqrt(3)*S.ImaginaryUnit/2)**2\\\n         - Rational(3, 2) + 3*sqrt(3)*S.ImaginaryUnit/2\n-    assert e.as_leading_term(x) == \\\n-        (12*sqrt(3)*x - 12*S.ImaginaryUnit*x)/(4*sqrt(3) + 12*S.ImaginaryUnit)\n+    assert e.as_leading_term(x) == -sqrt(3)*I*x\n \n     # https://github.com/sympy/sympy/issues/21245\n     e = 1 - x - x**2\n     d = (1 + sqrt(5))/2\n     assert e.subs(x, y + 1/d).as_leading_term(y) == \\\n-        (-576*sqrt(5)*y - 1280*y)/(256*sqrt(5) + 576)\n+        (-40*y - 16*sqrt(5)*y)/(16 + 8*sqrt(5))\n \n \n def test_leadterm2():\ndiff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 640834ead0a9..f1080e338de7 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -18,6 +18,7 @@\n from sympy.testing.pytest import warns, _both_exp_pow\n from sympy.utilities.exceptions import SymPyDeprecationWarning\n from sympy.abc import a, b, c, x, y\n+from sympy.core.numbers import all_close\n \n def test_rational():\n     a = Rational(1, 5)\n@@ -661,3 +662,9 @@ def test_issue_26546():\n     assert Pow(x+I, Rational(1,2)).is_extended_real is False\n     assert Pow(x+I, Rational(1,13)).is_extended_real is False\n     assert Pow(x+I, Rational(2,3)).is_extended_real is None\n+\n+\n+def test_issue_25165():\n+    e1 = (1/sqrt(( - x + 1)**2 + (x - 0.23)**4)).series(x, 0, 2)\n+    e2 = 0.998603724830355 + 1.02004923189934*x + O(x**2)\n+    assert all_close(e1, e2)\ndiff --git a/sympy/series/tests/test_series.py b/sympy/series/tests/test_series.py\nindex 6ae7ed2b848b..3313b8e6ee48 100644\n--- a/sympy/series/tests/test_series.py\n+++ b/sympy/series/tests/test_series.py\n@@ -367,9 +367,9 @@ def test_issue_20697():\n def test_issue_21245():\n     fi = (1 + sqrt(5))/2\n     assert (1/(1 - x - x**2)).series(x, 1/fi, 1).factor() == \\\n-        (-4812 - 2152*sqrt(5) + 1686*x + 754*sqrt(5)*x\\\n-        + O((x - 2/(1 + sqrt(5)))**2, (x, 2/(1 + sqrt(5)))))/((1 + sqrt(5))\\\n-        *(20 + 9*sqrt(5))**2*(x + sqrt(5)*x - 2))\n+        (-37*sqrt(5) - 83 + 13*sqrt(5)*x + 29*x + O((x - 2/(1 + sqrt(5)))**2, (x\\\n+            , 2/(1 + sqrt(5)))))/((2*sqrt(5) + 5)**2*(x + sqrt(5)*x - 2))\n+\n \n \n def test_issue_21938():\n",
  "base_commit": "b354658bfd7b863ee59897321d9645efbb9d1f57",
  "head_commit": "cabd6483017136e2b1909e3a75d00df62043aa6e",
  "created_at": 1704208730000,
  "version": "1.14",
  "duration_changes": "[{\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.310269046574831, \"head\": 0.2944406494498253}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.1148330383002758, \"head\": 0.10110455751419067}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10399405285716057, \"head\": 0.08080874010920525}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.34371476992964745, \"head\": 0.1738293133676052}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1799825467169285, \"head\": 0.4808659516274929}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.31112970039248466, \"head\": 0.29897986724972725}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11578922718763351, \"head\": 0.10380177199840546}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.1041574478149414, \"head\": 0.08303318917751312}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3457424081861973, \"head\": 0.1784871108829975}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1672047302126884, \"head\": 0.4940011650323868}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3102934695780277, \"head\": 0.2959260642528534}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11572637036442757, \"head\": 0.10354138538241386}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10195507854223251, \"head\": 0.08284230902791023}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3460417650640011, \"head\": 0.18268411234021187}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.166786551475525, \"head\": 0.4970491901040077}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.31349339708685875, \"head\": 0.29792479425668716}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11479764431715012, \"head\": 0.10212384164333344}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10392200574278831, \"head\": 0.08282105624675751}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3441029526293278, \"head\": 0.18291212245821953}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1685079298913479, \"head\": 0.49252118170261383}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.31379229575395584, \"head\": 0.29390231519937515}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11570702493190765, \"head\": 0.1007583923637867}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10313455387949944, \"head\": 0.08447927236557007}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3447781093418598, \"head\": 0.18184534832835197}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.151336532086134, \"head\": 0.49109450727701187}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3149603456258774, \"head\": 0.2954153008759022}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.1184454932808876, \"head\": 0.10437708720564842}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10479723289608955, \"head\": 0.08523347601294518}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.34874943271279335, \"head\": 0.18289552628993988}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1762988977134228, \"head\": 0.4880431108176708}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3139023333787918, \"head\": 0.29417117685079575}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11530615761876106, \"head\": 0.10175956413149834}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10389922559261322, \"head\": 0.08368045464158058}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3471243157982826, \"head\": 0.18120426312088966}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1710620746016502, \"head\": 0.48350536078214645}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.31193337216973305, \"head\": 0.2944633215665817}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11605384200811386, \"head\": 0.10255557298660278}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10301672294735909, \"head\": 0.0845174565911293}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3441409319639206, \"head\": 0.18117603659629822}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1692766770720482, \"head\": 0.487209040671587}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3134246654808521, \"head\": 0.29748738929629326}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11635329946875572, \"head\": 0.103029053658247}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10214867070317268, \"head\": 0.08434746041893959}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3435228317975998, \"head\": 0.18411285057663918}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1524033807218075, \"head\": 0.49485744163393974}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.31384141370654106, \"head\": 0.2966018356382847}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11572737246751785, \"head\": 0.10260940343141556}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10402276739478111, \"head\": 0.08444606512784958}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.34612302854657173, \"head\": 0.1813649646937847}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.168479084968567, \"head\": 0.48827191069722176}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3096804842352867, \"head\": 0.29300732910633087}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11521793156862259, \"head\": 0.1035308875143528}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10380930453538895, \"head\": 0.08540120720863342}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3430592082440853, \"head\": 0.18355488777160645}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.159108642488718, \"head\": 0.4927317686378956}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.31718480959534645, \"head\": 0.2936880551278591}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11724017560482025, \"head\": 0.09852268546819687}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10331928357481956, \"head\": 0.08341928571462631}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.34699538350105286, \"head\": 0.17991863563656807}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1648406200110912, \"head\": 0.4831137992441654}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.312247883528471, \"head\": 0.29870061576366425}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11618233844637871, \"head\": 0.09950457513332367}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10429021716117859, \"head\": 0.0813957117497921}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.34911515936255455, \"head\": 0.18235040083527565}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1667810305953026, \"head\": 0.49659520760178566}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.31087661534547806, \"head\": 0.2898263931274414}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11468971893191338, \"head\": 0.10236033424735069}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10425909981131554, \"head\": 0.08279378339648247}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.34790197014808655, \"head\": 0.1796916015446186}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1656081266701221, \"head\": 0.4840233512222767}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.31404096633195877, \"head\": 0.2916690558195114}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11566430330276489, \"head\": 0.10282890498638153}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10224437713623047, \"head\": 0.07957490533590317}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3475041389465332, \"head\": 0.18169965222477913}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1758707016706467, \"head\": 0.4918731264770031}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3129139170050621, \"head\": 0.2859991230070591}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11578645929694176, \"head\": 0.10261818394064903}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10310352593660355, \"head\": 0.08417603000998497}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.34263965114951134, \"head\": 0.1813204362988472}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1747881434857845, \"head\": 0.4867125675082207}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3096891716122627, \"head\": 0.29571590200066566}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11624792963266373, \"head\": 0.0970969870686531}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10335981845855713, \"head\": 0.08352294191718102}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3450293727219105, \"head\": 0.177293810993433}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1761579997837543, \"head\": 0.47708895802497864}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3120461031794548, \"head\": 0.2786208353936672}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11423749849200249, \"head\": 0.09777994826436043}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10355573520064354, \"head\": 0.07899339124560356}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3411135859787464, \"head\": 0.17019718140363693}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1562981940805912, \"head\": 0.4560428373515606}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3139779642224312, \"head\": 0.27426208555698395}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.1163536012172699, \"head\": 0.09561578929424286}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10306991636753082, \"head\": 0.0786905437707901}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3462057076394558, \"head\": 0.1701754480600357}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.165398471057415, \"head\": 0.465486790984869}}, {\"sympy/series/tests/test_demidovich.py::test_Limits_simple_3b\": {\"base\": 0.3096749037504196, \"head\": 0.2832067720592022}, \"sympy/series/tests/test_limits.py::test_issue_17751\": {\"base\": 0.11590571701526642, \"head\": 0.09667489305138588}, \"sympy/series/tests/test_nseries.py::test_generalexponent\": {\"base\": 0.10187260061502457, \"head\": 0.0779026597738266}, \"sympy/series/tests/test_nseries.py::test_issue_5654\": {\"base\": 0.3437137007713318, \"head\": 0.18226618692278862}, \"sympy/series/tests/test_residues.py::test_issue_21177\": {\"base\": 1.1591840013861656, \"head\": 0.47279245033860207}}]",
  "efficiency_test": [
    "sympy/series/tests/test_demidovich.py::test_Limits_simple_3b",
    "sympy/series/tests/test_limits.py::test_issue_17751",
    "sympy/series/tests/test_nseries.py::test_generalexponent",
    "sympy/series/tests/test_nseries.py::test_issue_5654",
    "sympy/series/tests/test_residues.py::test_issue_21177"
  ],
  "patch_functions": "{\"sympy/core/power.py\": [\"Pow._eval_nseries\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/core/power.py': ['Pow._eval_nseries']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/core/numbers.py\": [\"Rational\"], \"sympy/core/sympify.py\": [\"sympify\"], \"sympy/series/residues.py\": [\"residue\"], \"sympy/functions/elementary/trigonometric.py\": [\"cot\"], \"sympy/polys/rings.py\": [\"PolyElement.cancel\"], \"sympy/core/cache.py\": [\"wrapper\"], \"sympy/functions/elementary/miscellaneous.py\": [\"root\", \"sqrt\"], \"sympy/core/expr.py\": [\"Pow.nseries\", \"Mul.cancel\", \"Mul.nseries\"], \"sympy/core/symbol.py\": [\"symbols\", \"Symbol\"], \"sympy/polys/polytools.py\": [\"cancel\"], \"sympy/functions/elementary/hyperbolic.py\": [\"tanh\"], \"sympy/series/limits.py\": [\"limit\"], \"sympy/core/decorators.py\": [\"Symbol._func\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/core/numbers.py': ['Rational'], 'sympy/core/sympify.py': ['sympify'], 'sympy/series/residues.py': ['residue'], 'sympy/functions/elementary/trigonometric.py': ['cot'], 'sympy/polys/rings.py': ['PolyElement.cancel'], 'sympy/core/cache.py': ['wrapper'], 'sympy/functions/elementary/miscellaneous.py': ['root', 'sqrt'], 'sympy/core/expr.py': ['Pow.nseries', 'Mul.cancel', 'Mul.nseries'], 'sympy/core/symbol.py': ['symbols', 'Symbol'], 'sympy/polys/polytools.py': ['cancel'], 'sympy/functions/elementary/hyperbolic.py': ['tanh'], 'sympy/series/limits.py': ['limit'], 'sympy/core/decorators.py': ['Symbol._func']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.2808000000000002
}