{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-9393",
  "patch": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex e7f290dae16..3c6b7bfb58d 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -52,6 +52,9 @@ Bug fixes\n - Fix issue with passing parameters to ZarrStore.open_store when opening\n   datatree in zarr format (:issue:`9376`, :pull:`9377`).\n   By `Alfonso Ladino <https://github.com/aladinor>`_\n+- Fix deprecation warning that was raised when calling ``np.array`` on an ``xr.DataArray``\n+  in NumPy 2.0 (:issue:`9312`, :pull:`9393`)\n+  By `Andrew Scherer <https://github.com/andrew-s28>`_.\n \n Documentation\n ~~~~~~~~~~~~~\ndiff --git a/xarray/core/common.py b/xarray/core/common.py\nindex 664de7146d7..74c03f9baf5 100644\n--- a/xarray/core/common.py\n+++ b/xarray/core/common.py\n@@ -162,8 +162,22 @@ def __int__(self: Any) -> int:\n     def __complex__(self: Any) -> complex:\n         return complex(self.values)\n \n-    def __array__(self: Any, dtype: DTypeLike | None = None) -> np.ndarray:\n-        return np.asarray(self.values, dtype=dtype)\n+    def __array__(\n+        self: Any, dtype: DTypeLike | None = None, copy: bool | None = None\n+    ) -> np.ndarray:\n+        if not copy:\n+            if np.lib.NumpyVersion(np.__version__) >= \"2.0.0\":\n+                copy = None\n+            elif np.lib.NumpyVersion(np.__version__) <= \"1.28.0\":\n+                copy = False\n+            else:\n+                # 2.0.0 dev versions, handle cases where copy may or may not exist\n+                try:\n+                    np.array([1]).__array__(copy=None)\n+                    copy = None\n+                except TypeError:\n+                    copy = False\n+        return np.array(self.values, dtype=dtype, copy=copy)\n \n     def __repr__(self) -> str:\n         return formatting.array_repr(self)\n",
  "test_patch": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 69f1a377513..9feab73d3d1 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -7065,6 +7065,14 @@ def test_from_numpy(self) -> None:\n         np.testing.assert_equal(da.to_numpy(), np.array([1, 2, 3]))\n         np.testing.assert_equal(da[\"lat\"].to_numpy(), np.array([4, 5, 6]))\n \n+    def test_to_numpy(self) -> None:\n+        arr = np.array([1, 2, 3])\n+        da = xr.DataArray(arr, dims=\"x\", coords={\"lat\": (\"x\", [4, 5, 6])})\n+\n+        with assert_no_warnings():\n+            np.testing.assert_equal(np.asarray(da), arr)\n+            np.testing.assert_equal(np.array(da), arr)\n+\n     @requires_dask\n     def test_from_dask(self) -> None:\n         da = xr.DataArray([1, 2, 3], dims=\"x\", coords={\"lat\": (\"x\", [4, 5, 6])})\n",
  "base_commit": "93e410bf049b25788aaf49dd92a2bf612e2618f4",
  "head_commit": "8a4857d8660afb11c6c463936c2559746015d8e6",
  "created_at": 1724283159000,
  "version": "2024.05",
  "duration_changes": "[{\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8698913082480431, \"head\": 0.872034415602684}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010856680572032928, \"head\": 0.010377641767263412}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.02737158164381981, \"head\": 0.025366012006998062}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8817413970828056, \"head\": 0.9009520374238491}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010558951646089554, \"head\": 0.010655954480171204}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025285810232162476, \"head\": 0.025153502821922302}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8843534775078297, \"head\": 0.9198337942361832}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.011479340493679047, \"head\": 0.010726764798164368}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025672055780887604, \"head\": 0.02553865686058998}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8936480730772018, \"head\": 0.8737672492861748}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.011308670043945312, \"head\": 0.010283786803483963}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.02636513113975525, \"head\": 0.029065541923046112}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8629277758300304, \"head\": 0.9202035926282406}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.011693485081195831, \"head\": 0.01500655710697174}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.02807997539639473, \"head\": 0.03552946820855141}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8791401088237762, \"head\": 0.8837258145213127}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.012058470398187637, \"head\": 0.010865770280361176}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025659289211034775, \"head\": 0.025869980454444885}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.9073710031807423, \"head\": 0.9577889144420624}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010921735316514969, \"head\": 0.0113639235496521}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025369547307491302, \"head\": 0.02658967301249504}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8867579326033592, \"head\": 0.8655529394745827}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010652154684066772, \"head\": 0.010788332670927048}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025119159370660782, \"head\": 0.025136560201644897}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8629158325493336, \"head\": 0.9546543881297112}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010583106428384781, \"head\": 0.012520421296358109}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.024985894560813904, \"head\": 0.02598869428038597}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.9187979251146317, \"head\": 0.8809896931052208}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.01074768602848053, \"head\": 0.01059417799115181}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.027024179697036743, \"head\": 0.025395959615707397}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8916375078260899, \"head\": 0.8602843955159187}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010800916701555252, \"head\": 0.011033870279788971}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025345783680677414, \"head\": 0.025668572634458542}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8613644801080227, \"head\": 0.8613965436816216}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010732293128967285, \"head\": 0.010579347610473633}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.02507684752345085, \"head\": 0.024980559945106506}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8716865926980972, \"head\": 0.908066064119339}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.012150563299655914, \"head\": 0.010709550231695175}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025366198271512985, \"head\": 0.028860732913017273}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8781783245503902, \"head\": 0.9031281396746635}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010677266865968704, \"head\": 0.010504785925149918}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.02499879151582718, \"head\": 0.02499288320541382}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8706517554819584, \"head\": 0.8812073953449726}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010758165270090103, \"head\": 0.011340528726577759}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025845855474472046, \"head\": 0.025271955877542496}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8706154301762581, \"head\": 0.9672879688441753}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.011182501912117004, \"head\": 0.01130608469247818}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.02506130188703537, \"head\": 0.025850612670183182}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8930773884057999, \"head\": 0.8597353361546993}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.012189425528049469, \"head\": 0.01047307625412941}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.027063284069299698, \"head\": 0.025073833763599396}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8821268677711487, \"head\": 0.8582642413675785}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.01080760732293129, \"head\": 0.010545589029788971}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.027158312499523163, \"head\": 0.025415558367967606}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.8647746816277504, \"head\": 0.8542882688343525}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010477699339389801, \"head\": 0.010409612208604813}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.025126207619905472, \"head\": 0.025533080101013184}}, {\"xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]\": {\"base\": 0.887008473277092, \"head\": 0.8638258278369904}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]\": {\"base\": 0.010608013719320297, \"head\": 0.010351847857236862}, \"xarray/tests/test_missing.py::test_scipy_methods_function[krogh]\": {\"base\": 0.024966519325971603, \"head\": 0.024922478944063187}}]",
  "efficiency_test": [
    "xarray/tests/test_coarsen.py::test_coarsen_da_reduce[dask-mean-1-1]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-float-1]",
    "xarray/tests/test_missing.py::test_scipy_methods_function[krogh]"
  ],
  "patch_functions": "{\"xarray/core/common.py\": [\"AbstractArray.__array__\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/core/common.py': ['AbstractArray.__array__']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/dataset.py\": [\"Dataset.chunk\"], \"xarray/core/duck_array_ops.py\": [\"count\", \"isnull\"], \"xarray/core/rolling.py\": [\"DataArrayCoarsen.wrapped_func\", \"DataArrayCoarsen.reduce\"], \"xarray/core/common.py\": [\"DataArray.isnull\"], \"xarray/core/dataarray.py\": [\"DataArray.interpolate_na\", \"DataArray.reduce\", \"DataArray.coarsen\", \"DataArray.to_series\", \"DataArray.chunk\", \"DataArray.to_pandas\", \"DataArray\", \"DataArray.ndim\"], \"xarray/core/_aggregations.py\": [\"DataArray.prod\", \"DataArray.sum\", \"DataArray.count\", \"DataArray.all\"], \"xarray/util/deprecation_helpers.py\": [\"inner\"], \"xarray/core/dtypes.py\": [\"maybe_promote\"], \"xarray/namedarray/core.py\": [\"Variable.chunk\", \"Variable.reduce\"], \"xarray/core/variable.py\": [\"IndexVariable.chunk\", \"Variable.reduce\", \"Variable.coarsen\", \"Variable.chunk\"], \"xarray/namedarray/pycompat.py\": [\"array_type\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/dataset.py': ['Dataset.chunk'], 'xarray/core/duck_array_ops.py': ['count', 'isnull'], 'xarray/core/rolling.py': ['DataArrayCoarsen.wrapped_func', 'DataArrayCoarsen.reduce'], 'xarray/core/common.py': ['DataArray.isnull'], 'xarray/core/dataarray.py': ['DataArray.interpolate_na', 'DataArray.reduce', 'DataArray.coarsen', 'DataArray.to_series', 'DataArray.chunk', 'DataArray.to_pandas', 'DataArray', 'DataArray.ndim'], 'xarray/core/_aggregations.py': ['DataArray.prod', 'DataArray.sum', 'DataArray.count', 'DataArray.all'], 'xarray/util/deprecation_helpers.py': ['inner'], 'xarray/core/dtypes.py': ['maybe_promote'], 'xarray/namedarray/core.py': ['Variable.chunk', 'Variable.reduce'], 'xarray/core/variable.py': ['IndexVariable.chunk', 'Variable.reduce', 'Variable.coarsen', 'Variable.chunk'], 'xarray/namedarray/pycompat.py': ['array_type']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.0006666666666666666
}