{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-9719",
  "patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 7b6598a6406..d732a18fe23 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -46,6 +46,7 @@\n )\n from xarray.namedarray.core import NamedArray, _raise_if_any_duplicate_dimensions\n from xarray.namedarray.pycompat import integer_types, is_0d_dask_array, to_duck_array\n+from xarray.namedarray.utils import module_available\n from xarray.util.deprecation_helpers import deprecate_dims\n \n NON_NUMPY_SUPPORTED_ARRAY_TYPES = (\n@@ -1948,7 +1949,7 @@ def _wrapper(npa, **kwargs):\n             output_core_dims=[[\"quantile\"]],\n             output_dtypes=[np.float64],\n             dask_gufunc_kwargs=dict(output_sizes={\"quantile\": len(q)}),\n-            dask=\"parallelized\",\n+            dask=\"allowed\" if module_available(\"dask\", \"2024.11.0\") else \"parallelized\",\n             kwargs=kwargs,\n         )\n \n",
  "test_patch": "diff --git a/xarray/tests/__init__.py b/xarray/tests/__init__.py\nindex 7293a6fd931..5ed334e61dd 100644\n--- a/xarray/tests/__init__.py\n+++ b/xarray/tests/__init__.py\n@@ -107,6 +107,7 @@ def _importorskip(\n     has_h5netcdf, requires_h5netcdf = _importorskip(\"h5netcdf\")\n has_cftime, requires_cftime = _importorskip(\"cftime\")\n has_dask, requires_dask = _importorskip(\"dask\")\n+has_dask_ge_2024_11_0, requires_dask_ge_2024_11_0 = _importorskip(\"dask\", \"2024.11.0\")\n with warnings.catch_warnings():\n     warnings.filterwarnings(\n         \"ignore\",\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 9ebd4e4a4d3..0ed47c2b5fe 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -36,6 +36,7 @@\n     assert_equal,\n     assert_identical,\n     assert_no_warnings,\n+    has_dask_ge_2024_11_0,\n     has_pandas_3,\n     raise_if_dask_computes,\n     requires_bottleneck,\n@@ -1871,9 +1872,16 @@ def test_quantile_interpolation_deprecation(self, method) -> None:\n     def test_quantile_chunked_dim_error(self):\n         v = Variable([\"x\", \"y\"], self.d).chunk({\"x\": 2})\n \n-        # this checks for ValueError in dask.array.apply_gufunc\n-        with pytest.raises(ValueError, match=r\"consists of multiple chunks\"):\n-            v.quantile(0.5, dim=\"x\")\n+        if has_dask_ge_2024_11_0:\n+            # Dask rechunks\n+            np.testing.assert_allclose(\n+                v.compute().quantile(0.5, dim=\"x\"), v.quantile(0.5, dim=\"x\")\n+            )\n+\n+        else:\n+            # this checks for ValueError in dask.array.apply_gufunc\n+            with pytest.raises(ValueError, match=r\"consists of multiple chunks\"):\n+                v.quantile(0.5, dim=\"x\")\n \n     @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\"q\", [-0.1, 1.1, [2], [0.25, 2]])\n",
  "base_commit": "2619c0b3a94049c82f9ff916bf00a32f5d70c816",
  "head_commit": "15354f8b09abd50d350e6f09545366045cc646e2",
  "created_at": 1730840403000,
  "version": "2024.05",
  "duration_changes": "[{\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.28953924402594566, \"head\": 0.2781004495918751}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.0266767255961895, \"head\": 0.026652228087186813}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.02475978061556816, \"head\": 0.024795960634946823}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.02484617382287979, \"head\": 0.025019269436597824}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03874887153506279, \"head\": 0.038453828543424606}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6309736855328083, \"head\": 0.6235673874616623}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011290919035673141, \"head\": 0.011134553700685501}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.27290068939328194, \"head\": 0.28436698019504547}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.026900816708803177, \"head\": 0.027058202773332596}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.024032969027757645, \"head\": 0.02515173703432083}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.02536071091890335, \"head\": 0.0250321626663208}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03937569260597229, \"head\": 0.0387263223528862}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6225167214870453, \"head\": 0.6291173733770847}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011178046464920044, \"head\": 0.01130320131778717}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2879609875380993, \"head\": 0.3059372268617153}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.026742201298475266, \"head\": 0.026830878108739853}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.026179954409599304, \"head\": 0.025123655796051025}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025375809520483017, \"head\": 0.02555006742477417}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03920108452439308, \"head\": 0.03917735815048218}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6307697482407093, \"head\": 0.6327755525708199}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.01123671606183052, \"head\": 0.011143933981657028}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.3488703556358814, \"head\": 0.28690363094210625}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.028284691274166107, \"head\": 0.025854680687189102}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.025497131049633026, \"head\": 0.025204598903656006}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.028614390641450882, \"head\": 0.032481271773576736}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.041005488485097885, \"head\": 0.037977442145347595}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6444808952510357, \"head\": 0.6331759504973888}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011491086333990097, \"head\": 0.011248607188463211}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2786978520452976, \"head\": 0.27713919430971146}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.026913411915302277, \"head\": 0.027431055903434753}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.02498381957411766, \"head\": 0.025352157652378082}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.024980023503303528, \"head\": 0.025908932089805603}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03873981907963753, \"head\": 0.03998767212033272}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6291978321969509, \"head\": 0.6292922012507915}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011232569813728333, \"head\": 0.011223673820495605}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.27764077857136726, \"head\": 0.2948271259665489}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.026723232120275497, \"head\": 0.029719684273004532}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.02495969831943512, \"head\": 0.025931186974048615}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025180675089359283, \"head\": 0.02587633952498436}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03861797973513603, \"head\": 0.040491219609975815}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6275235414505005, \"head\": 0.6586663834750652}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011335764080286026, \"head\": 0.011229071766138077}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.28423502296209335, \"head\": 0.2831747680902481}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.02712109312415123, \"head\": 0.026940111070871353}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.025431804358959198, \"head\": 0.025271806865930557}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025829032063484192, \"head\": 0.027053464204072952}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.0393432192504406, \"head\": 0.04221773520112038}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6387322880327702, \"head\": 0.6417720280587673}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011862177401781082, \"head\": 0.011275611817836761}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2980314902961254, \"head\": 0.27803652733564377}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.02676672488451004, \"head\": 0.027002912014722824}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.024790726602077484, \"head\": 0.025235164910554886}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.0250619538128376, \"head\": 0.02515336126089096}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.0382215790450573, \"head\": 0.039529282599687576}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6407756097614765, \"head\": 0.6331197805702686}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011257916688919067, \"head\": 0.011200819164514542}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2755279503762722, \"head\": 0.27896272391080856}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.026616092771291733, \"head\": 0.0266643725335598}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.025012508034706116, \"head\": 0.03365538641810417}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.02503272518515587, \"head\": 0.026968643069267273}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03875946253538132, \"head\": 0.039595622569322586}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6239972747862339, \"head\": 0.6531277745962143}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.01112479716539383, \"head\": 0.010996907949447632}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2725737877190113, \"head\": 0.2849084213376045}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.026852507144212723, \"head\": 0.02655913680791855}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.024948086589574814, \"head\": 0.035692907869815826}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025111105293035507, \"head\": 0.02647293359041214}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03923631086945534, \"head\": 0.03783484548330307}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6476695127785206, \"head\": 0.6632662974298}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.012397728860378265, \"head\": 0.011590361595153809}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2921707443892956, \"head\": 0.28150956705212593}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.027187015861272812, \"head\": 0.02799070253968239}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.025224853307008743, \"head\": 0.024908430874347687}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025284837931394577, \"head\": 0.024220343679189682}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.04059223830699921, \"head\": 0.03866367042064667}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6384444274008274, \"head\": 0.6367035023868084}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.01085764542222023, \"head\": 0.01114964485168457}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.29003338143229485, \"head\": 0.2805135026574135}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.0264754481613636, \"head\": 0.026633277535438538}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.024761095643043518, \"head\": 0.027108758687973022}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.02455512061715126, \"head\": 0.025001898407936096}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03755668178200722, \"head\": 0.038391802459955215}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6342786364257336, \"head\": 0.6332444101572037}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011441033333539963, \"head\": 0.011196382343769073}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.28039105609059334, \"head\": 0.3243717774748802}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.026541423052549362, \"head\": 0.03448061645030975}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.024712882936000824, \"head\": 0.025516755878925323}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025153283029794693, \"head\": 0.025224745273590088}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03848512843251228, \"head\": 0.043038588017225266}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6277217604219913, \"head\": 0.6432870626449585}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011593475937843323, \"head\": 0.011311016976833344}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2950160652399063, \"head\": 0.2882870174944401}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.027114611119031906, \"head\": 0.02674240618944168}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.025646869093179703, \"head\": 0.025278057903051376}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.026411056518554688, \"head\": 0.02533629536628723}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.04031059145927429, \"head\": 0.03900717943906784}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6563217416405678, \"head\": 0.6400031894445419}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011276647448539734, \"head\": 0.01116110384464264}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.27871236950159073, \"head\": 0.2781963385641575}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.027109511196613312, \"head\": 0.026754233986139297}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.025666356086730957, \"head\": 0.024761583656072617}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025479834526777267, \"head\": 0.02498842030763626}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.04022340476512909, \"head\": 0.038362886756658554}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6291054710745811, \"head\": 0.6466849930584431}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011140547692775726, \"head\": 0.011401738971471786}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2837489880621433, \"head\": 0.28000548854470253}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.02701922133564949, \"head\": 0.026618123054504395}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.03342781960964203, \"head\": 0.024726640433073044}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025354202836751938, \"head\": 0.02469461038708687}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.04687686637043953, \"head\": 0.03833736851811409}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6312100253999233, \"head\": 0.6266931928694248}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011231515556573868, \"head\": 0.011243179440498352}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2797198258340359, \"head\": 0.2796308360993862}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.027905698865652084, \"head\": 0.027641378343105316}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.025103148072957993, \"head\": 0.024450689554214478}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025423280894756317, \"head\": 0.024629607796669006}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.04196521267294884, \"head\": 0.038172002881765366}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6352856792509556, \"head\": 0.6275047101080418}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011110488325357437, \"head\": 0.010887309908866882}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2943384572863579, \"head\": 0.2804216258227825}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.027493935078382492, \"head\": 0.02692257985472679}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.025224845856428146, \"head\": 0.025445803999900818}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.025273829698562622, \"head\": 0.025706831365823746}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03941910341382027, \"head\": 0.039392001926898956}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6379697062075138, \"head\": 0.6329749040305614}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011096782982349396, \"head\": 0.012653570622205734}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.379859559237957, \"head\": 0.296269990503788}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.028472300618886948, \"head\": 0.02778061479330063}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.0252668559551239, \"head\": 0.02555030584335327}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.05011971294879913, \"head\": 0.02573106810450554}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.03946886584162712, \"head\": 0.04913479834794998}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6557358577847481, \"head\": 0.644989125430584}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.012671150267124176, \"head\": 0.01150306686758995}}, {\"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]\": {\"base\": 0.2804173342883587, \"head\": 0.2841387502849102}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]\": {\"base\": 0.027457136660814285, \"head\": 0.026971250772476196}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]\": {\"base\": 0.026001717895269394, \"head\": 0.025826137512922287}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]\": {\"base\": 0.028516776859760284, \"head\": 0.02539030835032463}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]\": {\"base\": 0.04030861705541611, \"head\": 0.039180416613817215}, \"xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]\": {\"base\": 0.6431371197104454, \"head\": 0.6377948634326458}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]\": {\"base\": 0.011123936623334885, \"head\": 0.010897208005189896}}]",
  "efficiency_test": [
    "xarray/tests/test_duck_array_ops.py::test_min_count[False-False-None-sum-True-int-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[None-True-None-sum-True-float-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-int-1]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-sum-True-float-2]",
    "xarray/tests/test_duck_array_ops.py::test_reduce[x-False-max-True-float-2]",
    "xarray/tests/test_duck_array_ops.py::test_reduce[x-True-max-True-float32-1]",
    "xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-False-max]"
  ],
  "patch_functions": "{\"xarray/core/variable.py\": [\"Variable.quantile\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/core/variable.py': ['Variable.quantile']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/dataset.py\": [\"Dataset.chunk\"], \"xarray/core/dataarray.py\": [\"DataArray.values\", \"DataArray.data\", \"DataArray.dims\", \"DataArray.rolling\", \"DataArray.isel\", \"DataArray.to_series\", \"DataArray.chunk\", \"DataArray.coords\", \"DataArray.dtype\", \"DataArray.compute\", \"DataArray\", \"DataArray.ndim\"], \"xarray/namedarray/core.py\": [\"Variable.get_axis_num\", \"Variable.chunk\"], \"xarray/core/_aggregations.py\": [\"DataArray.sum\", \"DataArray.max\"], \"xarray/core/variable.py\": [\"concat\", \"Variable.isel\", \"IndexVariable.chunk\", \"Variable.chunk\"], \"xarray/namedarray/daskmanager.py\": [\"DaskManager.compute\"], \"xarray/util/deprecation_helpers.py\": [\"inner\"], \"xarray/core/dtypes.py\": [\"maybe_promote\"], \"xarray/core/rolling.py\": [\"DataArrayRolling.method\"], \"xarray/namedarray/pycompat.py\": [\"array_type\"], \"xarray/core/concat.py\": [\"concat\"], \"xarray/core/common.py\": [\"DataArray.get_axis_num\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/dataset.py': ['Dataset.chunk'], 'xarray/core/dataarray.py': ['DataArray.values', 'DataArray.data', 'DataArray.dims', 'DataArray.rolling', 'DataArray.isel', 'DataArray.to_series', 'DataArray.chunk', 'DataArray.coords', 'DataArray.dtype', 'DataArray.compute', 'DataArray', 'DataArray.ndim'], 'xarray/namedarray/core.py': ['Variable.get_axis_num', 'Variable.chunk'], 'xarray/core/_aggregations.py': ['DataArray.sum', 'DataArray.max'], 'xarray/core/variable.py': ['concat', 'Variable.isel', 'IndexVariable.chunk', 'Variable.chunk'], 'xarray/namedarray/daskmanager.py': ['DaskManager.compute'], 'xarray/util/deprecation_helpers.py': ['inner'], 'xarray/core/dtypes.py': ['maybe_promote'], 'xarray/core/rolling.py': ['DataArrayRolling.method'], 'xarray/namedarray/pycompat.py': ['array_type'], 'xarray/core/concat.py': ['concat'], 'xarray/core/common.py': ['DataArray.get_axis_num']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.00014285714285714287
}