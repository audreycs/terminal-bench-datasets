{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-8737",
  "patch": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex ed0b1c30987..50eece5f0af 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -74,6 +74,8 @@ Bug fixes\n   lead to integer overflow or unsafe conversion from floating point to integer\n   values (:issue:`8542`, :pull:`8575`).  By `Spencer Clark\n   <https://github.com/spencerkclark>`_.\n+- Raise an error when unstacking a MultiIndex that has duplicates as this would lead\n+  to silent data loss (:issue:`7104`, :pull:`8737`). By `Mathias Hauser <https://github.com/mathause>`_.\n \n Documentation\n ~~~~~~~~~~~~~\ndiff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex 1697762f7ae..e71c4a6f073 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -1017,6 +1017,13 @@ def stack(\n     def unstack(self) -> tuple[dict[Hashable, Index], pd.MultiIndex]:\n         clean_index = remove_unused_levels_categories(self.index)\n \n+        if not clean_index.is_unique:\n+            raise ValueError(\n+                \"Cannot unstack MultiIndex containing duplicates. Make sure entries \"\n+                f\"are unique, e.g., by  calling ``.drop_duplicates('{self.dim}')``, \"\n+                \"before unstacking.\"\n+            )\n+\n         new_indexes: dict[Hashable, Index] = {}\n         for name, lev in zip(clean_index.names, clean_index.levels):\n             idx = PandasIndex(\n",
  "test_patch": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex d898d3a30b9..2829fd7d49c 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2532,6 +2532,15 @@ def test_unstack_pandas_consistency(self) -> None:\n         actual = DataArray(s, dims=\"z\").unstack(\"z\")\n         assert_identical(expected, actual)\n \n+    def test_unstack_requires_unique(self) -> None:\n+        df = pd.DataFrame({\"foo\": range(2), \"x\": [\"a\", \"a\"], \"y\": [0, 0]})\n+        s = df.set_index([\"x\", \"y\"])[\"foo\"]\n+\n+        with pytest.raises(\n+            ValueError, match=\"Cannot unstack MultiIndex containing duplicates\"\n+        ):\n+            DataArray(s, dims=\"z\").unstack(\"z\")\n+\n     @pytest.mark.filterwarnings(\"error\")\n     def test_unstack_roundtrip_integer_array(self) -> None:\n         arr = xr.DataArray(\ndiff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 267a5ca603a..ae7d87bb790 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3764,6 +3764,14 @@ def test_unstack_errors(self) -> None:\n         with pytest.raises(ValueError, match=r\".*do not have exactly one multi-index\"):\n             ds.unstack(\"x\")\n \n+        ds = Dataset({\"da\": [1, 2]}, coords={\"y\": (\"x\", [1, 1]), \"z\": (\"x\", [0, 0])})\n+        ds = ds.set_index(x=(\"y\", \"z\"))\n+\n+        with pytest.raises(\n+            ValueError, match=\"Cannot unstack MultiIndex containing duplicates\"\n+        ):\n+            ds.unstack(\"x\")\n+\n     def test_unstack_fill_value(self) -> None:\n         ds = xr.Dataset(\n             {\"var\": ((\"x\",), np.arange(6)), \"other_var\": ((\"x\",), np.arange(3, 9))},\ndiff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex 866c2ef7e85..3ee7f045360 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -452,6 +452,15 @@ def test_unstack(self) -> None:\n         assert new_indexes[\"two\"].equals(PandasIndex([1, 2, 3], \"two\"))\n         assert new_pd_idx.equals(pd_midx)\n \n+    def test_unstack_requires_unique(self) -> None:\n+        pd_midx = pd.MultiIndex.from_product([[\"a\", \"a\"], [1, 2]], names=[\"one\", \"two\"])\n+        index = PandasMultiIndex(pd_midx, \"x\")\n+\n+        with pytest.raises(\n+            ValueError, match=\"Cannot unstack MultiIndex containing duplicates\"\n+        ):\n+            index.unstack()\n+\n     def test_create_variables(self) -> None:\n         foo_data = np.array([0, 0, 1], dtype=\"int64\")\n         bar_data = np.array([1.1, 1.2, 1.3], dtype=\"float64\")\n",
  "base_commit": "d64460795e406bc4a998e2ddae0054a1029d52a9",
  "head_commit": "f82fd0f3aa2bc9ae3d2b3b264dfa0dddb7af7ac7",
  "created_at": 1707749886000,
  "version": "2023.07",
  "duration_changes": "[{\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.1794835403561592, \"head\": 0.18321910500526428}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013110332190990448, \"head\": 0.013581622391939163}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.02919849380850792, \"head\": 0.030360102653503418}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.029380347579717636, \"head\": 0.029989413917064667}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.009970638900995255, \"head\": 0.009955398738384247}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011615082621574402, \"head\": 0.011439774185419083}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009174678474664688, \"head\": 0.009202729910612106}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.008976791054010391, \"head\": 0.009115327149629593}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.179456740617752, \"head\": 15.775765176862478}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.18893665447831154, \"head\": 0.20294426009058952}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013496343046426773, \"head\": 0.013934027403593063}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.030923809856176376, \"head\": 0.02986336126923561}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.03167709708213806, \"head\": 0.029691677540540695}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010843027383089066, \"head\": 0.009854461997747421}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011619988828897476, \"head\": 0.011419355869293213}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009523957967758179, \"head\": 0.009260796010494232}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009587600827217102, \"head\": 0.009106777608394623}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.137260776013136, \"head\": 15.842722058296204}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.1796717420220375, \"head\": 0.1847788617014885}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013531845062971115, \"head\": 0.013366539031267166}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.029627133160829544, \"head\": 0.031208060681819916}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.02943320944905281, \"head\": 0.02938181534409523}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.009795751422643661, \"head\": 0.011250179260969162}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011346850544214249, \"head\": 0.013777170330286026}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009212099015712738, \"head\": 0.009381961077451706}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009098228067159653, \"head\": 0.008970450609922409}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.237273413687944, \"head\": 15.945447836071253}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.18879879266023636, \"head\": 0.1842091679573059}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013751067221164703, \"head\": 0.013575360178947449}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.031913530081510544, \"head\": 0.02985408529639244}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.03613075241446495, \"head\": 0.029886048287153244}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.01129588857293129, \"head\": 0.009992644190788269}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011681586503982544, \"head\": 0.011288430541753769}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009444519877433777, \"head\": 0.009121544659137726}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009055830538272858, \"head\": 0.008983355015516281}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.32248107343912, \"head\": 15.811839770525694}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.1815289780497551, \"head\": 0.18382487446069717}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013392109423875809, \"head\": 0.013837672770023346}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.03030352294445038, \"head\": 0.032002948224544525}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.03024626523256302, \"head\": 0.030803587287664413}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010148953646421432, \"head\": 0.01030668243765831}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011643767356872559, \"head\": 0.011509083211421967}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.00928635522723198, \"head\": 0.009236041456460953}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009328439831733704, \"head\": 0.009078536182641983}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 15.729039058089256, \"head\": 16.068995244801044}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.1859295815229416, \"head\": 0.1788337491452694}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013767968863248825, \"head\": 0.013238046318292618}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.03180713206529617, \"head\": 0.02986973524093628}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.030927665531635284, \"head\": 0.029199622571468353}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010443467646837234, \"head\": 0.009813014417886734}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011343803256750107, \"head\": 0.011332951486110687}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009087007492780685, \"head\": 0.009023241698741913}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.00909789651632309, \"head\": 0.00872793048620224}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.123516499996185, \"head\": 15.804469991475344}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.18144889548420906, \"head\": 0.17990202829241753}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013630751520395279, \"head\": 0.013764899224042892}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.02970016747713089, \"head\": 0.03126887232065201}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.029653441160917282, \"head\": 0.03029661625623703}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010265089571475983, \"head\": 0.009995728731155396}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011513099074363708, \"head\": 0.011372916400432587}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009290117770433426, \"head\": 0.009218316525220871}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009197592735290527, \"head\": 0.009058855473995209}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 15.984038721770048, \"head\": 15.779778815805912}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.20094052702188492, \"head\": 0.18358679860830307}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013457957655191422, \"head\": 0.013162165880203247}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.03057541698217392, \"head\": 0.02977640926837921}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.03785143792629242, \"head\": 0.029565662145614624}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.011187586933374405, \"head\": 0.009919494390487671}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011461000889539719, \"head\": 0.011521641165018082}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.00913359597325325, \"head\": 0.009183749556541443}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009019803255796432, \"head\": 0.009040631353855133}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.266796831041574, \"head\": 15.70448486879468}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.18694118410348892, \"head\": 0.17936326935887337}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013734053820371628, \"head\": 0.013254247605800629}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.03493401035666466, \"head\": 0.029851708561182022}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.030294328927993774, \"head\": 0.029789462685585022}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010091319680213928, \"head\": 0.009862255305051804}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.01131708174943924, \"head\": 0.011357259005308151}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009350132197141647, \"head\": 0.00924186035990715}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009535688906908035, \"head\": 0.009092818945646286}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 15.998091012239456, \"head\": 15.817769434303045}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.19356074929237366, \"head\": 0.17905718833208084}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013757061213254929, \"head\": 0.013335436582565308}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.03492264077067375, \"head\": 0.030604936182498932}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.030089572072029114, \"head\": 0.030286379158496857}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010345950722694397, \"head\": 0.009978245943784714}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011485256254673004, \"head\": 0.011396326124668121}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009283304214477539, \"head\": 0.009201765060424805}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.00998673215508461, \"head\": 0.009017366915941238}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.132442485541105, \"head\": 15.687101427465677}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.19228572398424149, \"head\": 0.1778886392712593}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.014077961444854736, \"head\": 0.013432800769805908}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.033847514539957047, \"head\": 0.029514186084270477}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.03298598900437355, \"head\": 0.029934193938970566}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.011153846979141235, \"head\": 0.009858943521976471}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011837292462587357, \"head\": 0.011385340243577957}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009519059211015701, \"head\": 0.009171858429908752}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009230382740497589, \"head\": 0.009063046425580978}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.349047429859638, \"head\": 15.848271153867245}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.18971049785614014, \"head\": 0.19433687254786491}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013483937829732895, \"head\": 0.013572093099355698}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.034267205744981766, \"head\": 0.02983933687210083}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.03782006725668907, \"head\": 0.029881082475185394}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010777153074741364, \"head\": 0.009912863373756409}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011621717363595963, \"head\": 0.011313255876302719}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009233742952346802, \"head\": 0.009570777416229248}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.00905565544962883, \"head\": 0.0090840645134449}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.042521122843027, \"head\": 15.869066093116999}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.20049820095300674, \"head\": 0.1812279298901558}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.014071784913539886, \"head\": 0.013459544628858566}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.0334833562374115, \"head\": 0.030584339052438736}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.030685503035783768, \"head\": 0.03027556836605072}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.011828463524580002, \"head\": 0.010028988122940063}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.01230965182185173, \"head\": 0.011336129158735275}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009464595466852188, \"head\": 0.009284280240535736}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009053915739059448, \"head\": 0.009198598563671112}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.283394299447536, \"head\": 15.949459411203861}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.1808060072362423, \"head\": 0.18171025067567825}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013831350952386856, \"head\": 0.013797283172607422}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.03337649255990982, \"head\": 0.029914282262325287}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.041212454438209534, \"head\": 0.030211657285690308}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010072704404592514, \"head\": 0.010095387697219849}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011442188173532486, \"head\": 0.011509232223033905}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009185541421175003, \"head\": 0.009543567895889282}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009273037314414978, \"head\": 0.009024523198604584}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.071626357734203, \"head\": 15.81217172369361}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.18381789699196815, \"head\": 0.1830027885735035}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013386722654104233, \"head\": 0.013421569019556046}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.0295778289437294, \"head\": 0.029809683561325073}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.033139050006866455, \"head\": 0.030360937118530273}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010003972798585892, \"head\": 0.010142788290977478}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011415228247642517, \"head\": 0.011342093348503113}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009222302585840225, \"head\": 0.009150967001914978}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009181704372167587, \"head\": 0.009045321494340897}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 15.861912958323956, \"head\": 16.235974982380867}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.1909564770758152, \"head\": 0.18165650218725204}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013779893517494202, \"head\": 0.013589873909950256}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.03212197870016098, \"head\": 0.03014810010790825}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.03267204761505127, \"head\": 0.02999071404337883}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.011412538588047028, \"head\": 0.010004304349422455}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011686157435178757, \"head\": 0.01136595755815506}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.00947050005197525, \"head\": 0.009220939129590988}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009301893413066864, \"head\": 0.009039357304573059}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.106157656759024, \"head\": 16.163102384656668}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.18215128034353256, \"head\": 0.18143362924456596}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013348869979381561, \"head\": 0.013427823781967163}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.02964211255311966, \"head\": 0.029847126454114914}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.031069960445165634, \"head\": 0.029515661299228668}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.010400362312793732, \"head\": 0.010440956801176071}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011584203690290451, \"head\": 0.01184830442070961}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009136069566011429, \"head\": 0.009576410055160522}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.00908055528998375, \"head\": 0.00936415046453476}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 15.878515340387821, \"head\": 16.312441051006317}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.1806061565876007, \"head\": 0.2184891700744629}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.01359901949763298, \"head\": 0.013764776289463043}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.030411619693040848, \"head\": 0.03058798611164093}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.030640028417110443, \"head\": 0.0294981449842453}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.01005498692393303, \"head\": 0.010263882577419281}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011461038142442703, \"head\": 0.011433351784944534}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009279608726501465, \"head\": 0.009695075452327728}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.00910046324133873, \"head\": 0.009059596806764603}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 15.727432254701853, \"head\": 16.27986804023385}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.19854702800512314, \"head\": 0.1935504972934723}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.01352587342262268, \"head\": 0.013574648648500443}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.03171076625585556, \"head\": 0.03209514915943146}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.03706543147563934, \"head\": 0.030332986265420914}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.01060277596116066, \"head\": 0.01007918268442154}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011341094970703125, \"head\": 0.011456161737442017}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009194958955049515, \"head\": 0.009186908602714539}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009034596383571625, \"head\": 0.009267058223485947}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.072456046938896, \"head\": 16.31561591848731}}, {\"xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask\": {\"base\": 0.18135521560907364, \"head\": 0.18225209787487984}, \"xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order\": {\"base\": 0.013584159314632416, \"head\": 0.013624060899019241}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\": {\"base\": 0.030358612537384033, \"head\": 0.03712204471230507}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\": {\"base\": 0.031110253185033798, \"head\": 0.03140702471137047}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]\": {\"base\": 0.009957551956176758, \"head\": 0.010350443422794342}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]\": {\"base\": 0.011425402015447617, \"head\": 0.011435218155384064}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]\": {\"base\": 0.009992480278015137, \"head\": 0.01175031065940857}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]\": {\"base\": 0.009684506803750992, \"head\": 0.009754888713359833}, \"xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]\": {\"base\": 16.029549665749073, \"head\": 16.490822046995163}}]",
  "efficiency_test": [
    "xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask",
    "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order",
    "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]",
    "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]",
    "xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-None-True-max]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-3-1-False-2]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-None-numpy-z1-None-False-min]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-None-None-max]",
    "xarray/tests/test_weighted.py::test_weighted_quantile_3D[None-False-0.5-a]"
  ],
  "patch_functions": "{\"xarray/core/indexes.py\": [\"PandasMultiIndex.unstack\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/core/indexes.py': ['PandasMultiIndex.unstack']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/dataset.py\": [\"Dataset.chunk\", \"Dataset.weighted\", \"Dataset.rolling\", \"Dataset.data_vars\", \"Dataset.sizes\", \"Dataset.isel\", \"Dataset.quantile\", \"Dataset.interp\"], \"xarray/core/dataarray.py\": [\"DataArray.values\", \"DataArray.reduce\", \"DataArray.groupby\", \"DataArray.dims\", \"DataArray.weighted\", \"DataArray.rolling\", \"DataArray.isel\", \"DataArray.chunk\", \"DataArray.coords\", \"DataArray.quantile\", \"DataArray.copy\", \"DataArray.to_dataset\", \"DataArray.interp\", \"DataArray.compute\", \"DataArray\"], \"xarray/core/variable.py\": [\"Variable.quantile\", \"Variable.compute\", \"Variable.isel\", \"IndexVariable.chunk\", \"Variable.reduce\", \"Variable.chunk\"], \"xarray/core/rolling.py\": [\"DatasetRolling.method\", \"DataArrayRolling.method\", \"DataArrayRolling.reduce\", \"DatasetRolling.reduce\"], \"xarray/core/computation.py\": [\"apply_ufunc\"], \"xarray/core/indexes.py\": [\"PandasIndex.isel\"], \"xarray/core/common.py\": [\"DataArray.squeeze\", \"ones_like\"], \"xarray/namedarray/daskmanager.py\": [\"DaskManager.compute\"], \"xarray/util/deprecation_helpers.py\": [\"inner\"], \"xarray/core/missing.py\": [\"interp\"], \"xarray/core/coordinates.py\": [\"Coordinates.to_dataset\"], \"xarray/namedarray/core.py\": [\"Variable.chunk\", \"Variable.reduce\"], \"xarray/core/groupby.py\": [\"DataArrayGroupBy.map\"], \"xarray/core/weighted.py\": [\"DataArrayWeighted.quantile\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/dataset.py': ['Dataset.chunk', 'Dataset.weighted', 'Dataset.rolling', 'Dataset.data_vars', 'Dataset.sizes', 'Dataset.isel', 'Dataset.quantile', 'Dataset.interp'], 'xarray/core/dataarray.py': ['DataArray.values', 'DataArray.reduce', 'DataArray.groupby', 'DataArray.dims', 'DataArray.weighted', 'DataArray.rolling', 'DataArray.isel', 'DataArray.chunk', 'DataArray.coords', 'DataArray.quantile', 'DataArray.copy', 'DataArray.to_dataset', 'DataArray.interp', 'DataArray.compute', 'DataArray'], 'xarray/core/variable.py': ['Variable.quantile', 'Variable.compute', 'Variable.isel', 'IndexVariable.chunk', 'Variable.reduce', 'Variable.chunk'], 'xarray/core/rolling.py': ['DatasetRolling.method', 'DataArrayRolling.method', 'DataArrayRolling.reduce', 'DatasetRolling.reduce'], 'xarray/core/computation.py': ['apply_ufunc'], 'xarray/core/indexes.py': ['PandasIndex.isel'], 'xarray/core/common.py': ['DataArray.squeeze', 'ones_like'], 'xarray/namedarray/daskmanager.py': ['DaskManager.compute'], 'xarray/util/deprecation_helpers.py': ['inner'], 'xarray/core/missing.py': ['interp'], 'xarray/core/coordinates.py': ['Coordinates.to_dataset'], 'xarray/namedarray/core.py': ['Variable.chunk', 'Variable.reduce'], 'xarray/core/groupby.py': ['DataArrayGroupBy.map'], 'xarray/core/weighted.py': ['DataArrayWeighted.quantile']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.007666666666666671
}