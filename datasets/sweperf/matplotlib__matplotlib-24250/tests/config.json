{
  "repo": "matplotlib/matplotlib",
  "instance_id": "matplotlib__matplotlib-24250",
  "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 3be5b0685d69..23d8cd73a194 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2445,10 +2445,6 @@ def __init__(self,\n         # pickling.\n         self._canvas_callbacks = cbook.CallbackRegistry(\n             signals=FigureCanvasBase.events)\n-        self._button_pick_id = self._canvas_callbacks._connect_picklable(\n-            'button_press_event', self.pick)\n-        self._scroll_pick_id = self._canvas_callbacks._connect_picklable(\n-            'scroll_event', self.pick)\n         connect = self._canvas_callbacks._connect_picklable\n         self._mouse_key_ids = [\n             connect('key_press_event', backend_bases._key_handler),\n@@ -2459,6 +2455,8 @@ def __init__(self,\n             connect('scroll_event', backend_bases._mouse_handler),\n             connect('motion_notify_event', backend_bases._mouse_handler),\n         ]\n+        self._button_pick_id = connect('button_press_event', self.pick)\n+        self._scroll_pick_id = connect('scroll_event', self.pick)\n \n         if figsize is None:\n             figsize = mpl.rcParams['figure.figsize']\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_bases.py b/lib/matplotlib/tests/test_backend_bases.py\nindex 96d2f3afcd55..4cbd1bc98b67 100644\n--- a/lib/matplotlib/tests/test_backend_bases.py\n+++ b/lib/matplotlib/tests/test_backend_bases.py\n@@ -2,7 +2,7 @@\n \n from matplotlib import path, transforms\n from matplotlib.backend_bases import (\n-    FigureCanvasBase, LocationEvent, MouseButton, MouseEvent,\n+    FigureCanvasBase, KeyEvent, LocationEvent, MouseButton, MouseEvent,\n     NavigationToolbar2, RendererBase)\n from matplotlib.backend_tools import RubberbandBase\n from matplotlib.figure import Figure\n@@ -124,12 +124,18 @@ def test_pick():\n     fig = plt.figure()\n     fig.text(.5, .5, \"hello\", ha=\"center\", va=\"center\", picker=True)\n     fig.canvas.draw()\n+\n     picks = []\n-    fig.canvas.mpl_connect(\"pick_event\", lambda event: picks.append(event))\n-    start_event = MouseEvent(\n-        \"button_press_event\", fig.canvas, *fig.transFigure.transform((.5, .5)),\n-        MouseButton.LEFT)\n-    fig.canvas.callbacks.process(start_event.name, start_event)\n+    def handle_pick(event):\n+        assert event.mouseevent.key == \"a\"\n+        picks.append(event)\n+    fig.canvas.mpl_connect(\"pick_event\", handle_pick)\n+\n+    KeyEvent(\"key_press_event\", fig.canvas, \"a\")._process()\n+    MouseEvent(\"button_press_event\", fig.canvas,\n+               *fig.transFigure.transform((.5, .5)),\n+               MouseButton.LEFT)._process()\n+    KeyEvent(\"key_release_event\", fig.canvas, \"a\")._process()\n     assert len(picks) == 1\n \n \n",
  "base_commit": "f6e75121e11b6ba918c5f6e5c2cc1b9f4fccc8b0",
  "head_commit": "9b34b25ab35897e74d452e82352f6bdf4fbefc02",
  "created_at": 1666432376000,
  "version": "3.6",
  "duration_changes": "[{\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.019178930670022964, \"head\": 0.01668182760477066}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017307262867689133, \"head\": 0.01656283810734749}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.023388560861349106, \"head\": 0.018949013203382492}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.01783314347267151, \"head\": 0.016764279454946518}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017709143459796906, \"head\": 0.017247140407562256}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.018063243478536606, \"head\": 0.01719394326210022}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017486851662397385, \"head\": 0.017831500619649887}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017453569918870926, \"head\": 0.019763953983783722}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017886608839035034, \"head\": 0.017404627054929733}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017869338393211365, \"head\": 0.017282743006944656}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017352573573589325, \"head\": 0.017459344118833542}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.01725666970014572, \"head\": 0.016935884952545166}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017819389700889587, \"head\": 0.0170295313000679}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.0167982280254364, \"head\": 0.016747403889894485}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017549511045217514, \"head\": 0.017450552433729172}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.016743749380111694, \"head\": 0.016859862953424454}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017644286155700684, \"head\": 0.016735590994358063}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.01836984232068062, \"head\": 0.01716267317533493}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.01792334020137787, \"head\": 0.01641814038157463}}, {\"lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]\": {\"base\": 0.017013821750879288, \"head\": 0.017684083431959152}}]",
  "efficiency_test": [
    "lib/matplotlib/tests/test_ticker.py::TestScalarFormatter::test_scilimits[True-scilimits6-lim6-9-True]"
  ],
  "patch_functions": "{\"lib/matplotlib/figure.py\": [\"Figure.__init__\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'lib/matplotlib/figure.py': ['Figure.__init__']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"lib/matplotlib/axis.py\": [\"XAxis.set_major_formatter\", \"XAxis.set_major_locator\", \"YAxis.get_majorticklocs\"], \"lib/matplotlib/ticker.py\": [\"ScalarFormatter.set_locs\", \"MaxNLocator\", \"ScalarFormatter.set_powerlimits\", \"ScalarFormatter\", \"ScalarFormatter.set_scientific\"], \"lib/matplotlib/axes/_base.py\": [\"Axes.set_ylim\"], \"lib/matplotlib/pyplot.py\": [\"subplots\"], \"lib/matplotlib/_api/deprecation.py\": [\"wrapper\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'lib/matplotlib/axis.py': ['XAxis.set_major_formatter', 'XAxis.set_major_locator', 'YAxis.get_majorticklocs'], 'lib/matplotlib/ticker.py': ['ScalarFormatter.set_locs', 'MaxNLocator', 'ScalarFormatter.set_powerlimits', 'ScalarFormatter', 'ScalarFormatter.set_scientific'], 'lib/matplotlib/axes/_base.py': ['Axes.set_ylim'], 'lib/matplotlib/pyplot.py': ['subplots'], 'lib/matplotlib/_api/deprecation.py': ['wrapper']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.02000000000000001
}