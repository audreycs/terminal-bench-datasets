{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12581",
  "patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 9cff0e5d9f1f3..2eccb50fcc976 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -536,6 +536,32 @@ def _iter_test_indices(self, X, y, groups):\n         for f in range(self.n_splits):\n             yield np.where(indices == f)[0]\n \n+    def split(self, X, y=None, groups=None):\n+        \"\"\"Generate indices to split data into training and test set.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            Training data, where n_samples is the number of samples\n+            and n_features is the number of features.\n+\n+        y : array-like, shape (n_samples,), optional\n+            The target variable for supervised learning problems.\n+\n+        groups : array-like, with shape (n_samples,)\n+            Group labels for the samples used while splitting the dataset into\n+            train/test set.\n+\n+        Yields\n+        ------\n+        train : ndarray\n+            The training set indices for that split.\n+\n+        test : ndarray\n+            The testing set indices for that split.\n+        \"\"\"\n+        return super(GroupKFold, self).split(X, y, groups)\n+\n \n class StratifiedKFold(_BaseKFold):\n     \"\"\"Stratified K-Folds cross-validator\n@@ -768,7 +794,7 @@ def split(self, X, y=None, groups=None):\n         y : array-like, shape (n_samples,)\n             Always ignored, exists for compatibility.\n \n-        groups : array-like, with shape (n_samples,), optional\n+        groups : array-like, with shape (n_samples,)\n             Always ignored, exists for compatibility.\n \n         Yields\n@@ -860,13 +886,13 @@ def get_n_splits(self, X=None, y=None, groups=None):\n \n         Parameters\n         ----------\n-        X : object, optional\n+        X : object\n             Always ignored, exists for compatibility.\n \n-        y : object, optional\n+        y : object\n             Always ignored, exists for compatibility.\n \n-        groups : array-like, with shape (n_samples,), optional\n+        groups : array-like, with shape (n_samples,)\n             Group labels for the samples used while splitting the dataset into\n             train/test set. This 'groups' parameter must always be specified to\n             calculate the number of splits, though the other parameters can be\n@@ -882,6 +908,32 @@ def get_n_splits(self, X=None, y=None, groups=None):\n         groups = check_array(groups, ensure_2d=False, dtype=None)\n         return len(np.unique(groups))\n \n+    def split(self, X, y=None, groups=None):\n+        \"\"\"Generate indices to split data into training and test set.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            Training data, where n_samples is the number of samples\n+            and n_features is the number of features.\n+\n+        y : array-like, of length n_samples, optional\n+            The target variable for supervised learning problems.\n+\n+        groups : array-like, with shape (n_samples,)\n+            Group labels for the samples used while splitting the dataset into\n+            train/test set.\n+\n+        Yields\n+        ------\n+        train : ndarray\n+            The training set indices for that split.\n+\n+        test : ndarray\n+            The testing set indices for that split.\n+        \"\"\"\n+        return super(LeaveOneGroupOut, self).split(X, y, groups)\n+\n \n class LeavePGroupsOut(BaseCrossValidator):\n     \"\"\"Leave P Group(s) Out cross-validator\n@@ -964,13 +1016,13 @@ def get_n_splits(self, X=None, y=None, groups=None):\n \n         Parameters\n         ----------\n-        X : object, optional\n+        X : object\n             Always ignored, exists for compatibility.\n \n-        y : object, optional\n+        y : object\n             Always ignored, exists for compatibility.\n \n-        groups : array-like, with shape (n_samples,), optional\n+        groups : array-like, with shape (n_samples,)\n             Group labels for the samples used while splitting the dataset into\n             train/test set. This 'groups' parameter must always be specified to\n             calculate the number of splits, though the other parameters can be\n@@ -986,6 +1038,32 @@ def get_n_splits(self, X=None, y=None, groups=None):\n         groups = check_array(groups, ensure_2d=False, dtype=None)\n         return int(comb(len(np.unique(groups)), self.n_groups, exact=True))\n \n+    def split(self, X, y=None, groups=None):\n+        \"\"\"Generate indices to split data into training and test set.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            Training data, where n_samples is the number of samples\n+            and n_features is the number of features.\n+\n+        y : array-like, of length n_samples, optional\n+            The target variable for supervised learning problems.\n+\n+        groups : array-like, with shape (n_samples,)\n+            Group labels for the samples used while splitting the dataset into\n+            train/test set.\n+\n+        Yields\n+        ------\n+        train : ndarray\n+            The training set indices for that split.\n+\n+        test : ndarray\n+            The testing set indices for that split.\n+        \"\"\"\n+        return super(LeavePGroupsOut, self).split(X, y, groups)\n+\n \n class _RepeatedSplits(with_metaclass(ABCMeta)):\n     \"\"\"Repeated splits for an arbitrary randomized CV splitter.\n@@ -1430,6 +1508,38 @@ def _iter_indices(self, X, y, groups):\n \n             yield train, test\n \n+    def split(self, X, y=None, groups=None):\n+        \"\"\"Generate indices to split data into training and test set.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            Training data, where n_samples is the number of samples\n+            and n_features is the number of features.\n+\n+        y : array-like, shape (n_samples,), optional\n+            The target variable for supervised learning problems.\n+\n+        groups : array-like, with shape (n_samples,)\n+            Group labels for the samples used while splitting the dataset into\n+            train/test set.\n+\n+        Yields\n+        ------\n+        train : ndarray\n+            The training set indices for that split.\n+\n+        test : ndarray\n+            The testing set indices for that split.\n+\n+        Notes\n+        -----\n+        Randomized CV splitters may return different results for each call of\n+        split. You can make the results identical by setting ``random_state``\n+        to an integer.\n+        \"\"\"\n+        return super(GroupShuffleSplit, self).split(X, y, groups)\n+\n \n def _approximate_mode(class_counts, n_draws, rng):\n     \"\"\"Computes approximate mode of multivariate hypergeometric.\n",
  "test_patch": "",
  "base_commit": "02dc9ed680e7f53f1b0d410dcdd37341c7958eb1",
  "head_commit": "8a445cf259a914f7687a26dfab1089c5a91e9d05",
  "created_at": 1542145222000,
  "version": "0.21",
  "duration_changes": "[{\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 1.1171442195773125, \"head\": 0.5046109296381474}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.0839497447013855, \"head\": 0.09688600152730942}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006383124738931656, \"head\": 0.008190281689167023}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 2.0037553273141384, \"head\": 2.081067118793726}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.10954341664910316, \"head\": 0.1040496937930584}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.16737741231918335, \"head\": 0.008030839264392853}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.01732315495610237, \"head\": 0.08753189072012901}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.01773020252585411, \"head\": 0.012579265981912613}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.006557360291481018, \"head\": 0.004975326359272003}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03234315663576126, \"head\": 0.03020186722278595}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.014204975217580795, \"head\": 0.014163076877593994}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 1.0397824868559837, \"head\": 0.7284299470484257}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.10710471868515015, \"head\": 0.1083795540034771}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.008695505559444427, \"head\": 0.008052665740251541}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.788217730820179, \"head\": 2.202744383364916}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09693054482340813, \"head\": 0.09466516971588135}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.11519573628902435, \"head\": 0.1050773374736309}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.02320433035492897, \"head\": 0.016176782548427582}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.012158006429672241, \"head\": 0.011859424412250519}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.004994623363018036, \"head\": 0.0049025192856788635}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03355014696717262, \"head\": 0.03007388487458229}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.024508725851774216, \"head\": 0.01943524181842804}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.6446906663477421, \"head\": 0.8676255755126476}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.030578050762414932, \"head\": 0.037642952054739}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.007464196532964706, \"head\": 0.05471205711364746}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 4.158242277801037, \"head\": 0.6998776160180569}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09179357439279556, \"head\": 0.11179621145129204}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.012097179889678955, \"head\": 0.09588776528835297}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.08584291115403175, \"head\": 0.020001225173473358}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.013352744281291962, \"head\": 0.011999856680631638}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.0049667805433273315, \"head\": 0.004987981170415878}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03038185089826584, \"head\": 0.03026936575770378}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.01431351900100708, \"head\": 0.014186069369316101}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.7419266253709793, \"head\": 0.5707562603056431}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.01653943955898285, \"head\": 0.16341688483953476}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006567571312189102, \"head\": 0.011615045368671417}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 4.108515866100788, \"head\": 2.1800481900572777}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.1064082682132721, \"head\": 0.11642883718013763}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.0928354412317276, \"head\": 0.0783475786447525}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.02000885084271431, \"head\": 0.020234715193510056}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.013315793126821518, \"head\": 0.02341265231370926}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.016167327761650085, \"head\": 0.0058213770389556885}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03657856211066246, \"head\": 0.03252335637807846}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.020746637135744095, \"head\": 0.0204460509121418}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.68270543217659, \"head\": 0.7448500022292137}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.03894645720720291, \"head\": 0.11502330005168915}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006927739828824997, \"head\": 0.00648844987154007}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 0.3042788617312908, \"head\": 0.9609355516731739}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09039976075291634, \"head\": 0.11322161182761192}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.008009996265172958, \"head\": 0.07464369013905525}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.09716849029064178, \"head\": 0.018496856093406677}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.012694623321294785, \"head\": 0.014040984213352203}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.004949145019054413, \"head\": 0.004972163587808609}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03023649752140045, \"head\": 0.06152456998825073}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.01432674378156662, \"head\": 0.0314391665160656}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.7920892462134361, \"head\": 0.5267082490026951}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.016670342534780502, \"head\": 0.11462241038680077}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.007035478949546814, \"head\": 0.012093864381313324}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 2.3871031925082207, \"head\": 1.7813069075345993}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09017376229166985, \"head\": 0.10133462771773338}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.008737049996852875, \"head\": 0.007966585457324982}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.0883486159145832, \"head\": 0.014476023614406586}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.013993319123983383, \"head\": 0.011903960257768631}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.004955250769853592, \"head\": 0.004897899925708771}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.030342988669872284, \"head\": 0.030291728675365448}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.02911785989999771, \"head\": 0.01432754471898079}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.7045201249420643, \"head\": 0.41327905654907227}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.018890399485826492, \"head\": 0.11484698578715324}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.009765256196260452, \"head\": 0.0064353905618190765}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 0.4782956391572952, \"head\": 2.002921834588051}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09046343341469765, \"head\": 0.09443193674087524}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.00827224925160408, \"head\": 0.018355242908000946}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.0982433632016182, \"head\": 0.07999558746814728}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.013665661215782166, \"head\": 0.011977028101682663}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.005115382373332977, \"head\": 0.004981890320777893}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03051947057247162, \"head\": 0.03013399988412857}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.014436762779951096, \"head\": 0.014076456427574158}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.6817775629460812, \"head\": 0.8778899200260639}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.09015286713838577, \"head\": 0.01968521997332573}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.007997088134288788, \"head\": 0.06004711985588074}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.5827883668243885, \"head\": 1.5926178321242332}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.10023387894034386, \"head\": 0.1003650464117527}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.008033689111471176, \"head\": 0.009614430367946625}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.015103664249181747, \"head\": 0.09271539002656937}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.08010276034474373, \"head\": 0.01230863481760025}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.0056935884058475494, \"head\": 0.004922356456518173}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03346097096800804, \"head\": 0.030023403465747833}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.01569604128599167, \"head\": 0.028298020362854004}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.5573802329599857, \"head\": 0.7319111116230488}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.08925589174032211, \"head\": 0.09332859516143799}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006774399429559708, \"head\": 0.006782688200473785}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.2935365065932274, \"head\": 2.3006922118365765}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09916434437036514, \"head\": 0.19294485822319984}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.016392480581998825, \"head\": 0.008262358605861664}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.0908491462469101, \"head\": 0.08689843490719795}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.020370930433273315, \"head\": 0.012518294155597687}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.0063517168164253235, \"head\": 0.004998229444026947}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03081461414694786, \"head\": 0.03053954616189003}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.014528509229421616, \"head\": 0.01442897692322731}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.588190458714962, \"head\": 0.7701393030583858}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.048407524824142456, \"head\": 0.09169793501496315}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.007491890341043472, \"head\": 0.00795009359717369}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 0.28696349263191223, \"head\": 1.584043089300394}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09146681800484657, \"head\": 0.19849162176251411}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.012066364288330078, \"head\": 0.10803217813372612}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.10055451840162277, \"head\": 0.018936801701784134}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.01888231188058853, \"head\": 0.013226188719272614}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.0050192177295684814, \"head\": 0.0055217258632183075}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03038683533668518, \"head\": 0.0318891704082489}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.015960928052663803, \"head\": 0.015400845557451248}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.8906729891896248, \"head\": 1.485955972224474}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.04116606339812279, \"head\": 0.01687924936413765}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.00849485769867897, \"head\": 0.007689166814088821}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.4511525854468346, \"head\": 1.9723565429449081}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09249893948435783, \"head\": 0.10049807652831078}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.01061192899942398, \"head\": 0.008094120770692825}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.03242175653576851, \"head\": 0.014714315533638}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.01808921992778778, \"head\": 0.0894307903945446}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.01055668294429779, \"head\": 0.005399417132139206}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.033079843968153, \"head\": 0.03180079534649849}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.027144432067871094, \"head\": 0.015711944550275803}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.685303770005703, \"head\": 0.8334474489092827}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.02352561429142952, \"head\": 0.08995244652032852}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006414562463760376, \"head\": 0.018237244337797165}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.4703169949352741, \"head\": 1.7754385955631733}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.00789877399802208, \"head\": 0.1003771536052227}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.11091293022036552, \"head\": 0.011479679495096207}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.01806919276714325, \"head\": 0.10127385333180428}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.06166713684797287, \"head\": 0.021884016692638397}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.0052117034792900085, \"head\": 0.005558621138334274}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.030285518616437912, \"head\": 0.030285827815532684}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.014122389256954193, \"head\": 0.01447843387722969}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.8124554567039013, \"head\": 0.6989746689796448}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.09462697431445122, \"head\": 0.01635892316699028}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006530590355396271, \"head\": 0.04947231709957123}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 2.0822414569556713, \"head\": 0.29098358377814293}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09530297294259071, \"head\": 0.006815634667873383}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.011527981609106064, \"head\": 0.09922825545072556}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.09038496389985085, \"head\": 0.02356208860874176}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.0239073745906353, \"head\": 0.06933652982115746}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.00531073659658432, \"head\": 0.006880678236484528}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.031947504729032516, \"head\": 0.030123520642518997}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.016469135880470276, \"head\": 0.014130167663097382}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.7818834520876408, \"head\": 0.6608590334653854}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.01633329689502716, \"head\": 0.1078420951962471}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.0064558908343315125, \"head\": 0.0066942013800144196}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.379894521087408, \"head\": 1.5871838107705116}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09759101644158363, \"head\": 0.00831657275557518}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.01174619048833847, \"head\": 0.08999160304665565}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.09654197469353676, \"head\": 0.014898713678121567}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.013807259500026703, \"head\": 0.012307416647672653}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.0049254074692726135, \"head\": 0.005143165588378906}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.030460495501756668, \"head\": 0.030631173402071}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.018413420766592026, \"head\": 0.014539036899805069}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.5511910766363144, \"head\": 0.6134509891271591}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.022126853466033936, \"head\": 0.14980750530958176}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.10925975069403648, \"head\": 0.01313791424036026}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.7794975824654102, \"head\": 2.002724926918745}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09803655371069908, \"head\": 0.1791430450975895}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.0972137488424778, \"head\": 0.015811990946531296}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.025071140378713608, \"head\": 0.0969289094209671}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.012464720755815506, \"head\": 0.013692077249288559}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.004927113652229309, \"head\": 0.0050579942762851715}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.035646937787532806, \"head\": 0.031051449477672577}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.026215985417366028, \"head\": 0.015047285705804825}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.6309349872171879, \"head\": 0.6794108971953392}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.09691821038722992, \"head\": 0.016693398356437683}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.00804714486002922, \"head\": 0.06700745970010757}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 2.180276822298765, \"head\": 1.1035721711814404}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.008041039109230042, \"head\": 0.005886506289243698}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.011346381157636642, \"head\": 0.08638319745659828}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.020144257694482803, \"head\": 0.014571771025657654}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.0661880262196064, \"head\": 0.0817776620388031}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.004974346607923508, \"head\": 0.005072072148323059}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.029935266822576523, \"head\": 0.030118241906166077}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.015148941427469254, \"head\": 0.014517117291688919}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.612182080745697, \"head\": 0.9677262045443058}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.08519452437758446, \"head\": 0.022296931594610214}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.008408363908529282, \"head\": 0.06321775168180466}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.6093318909406662, \"head\": 1.6137150041759014}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.18403193727135658, \"head\": 0.20111694931983948}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.01418071985244751, \"head\": 0.10370475426316261}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.08457706496119499, \"head\": 0.014415126293897629}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.016225874423980713, \"head\": 0.011972751468420029}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.004928082227706909, \"head\": 0.005012810230255127}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.03494955599308014, \"head\": 0.030094880610704422}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.023026414215564728, \"head\": 0.0140702985227108}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.756579976528883, \"head\": 0.9612293243408203}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.08390941843390465, \"head\": 0.016814574599266052}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.010386582463979721, \"head\": 0.007549349218606949}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 2.791139356791973, \"head\": 2.1838591173291206}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.09680571779608727, \"head\": 0.08934347331523895}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.11136474832892418, \"head\": 0.011280786246061325}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.015828579664230347, \"head\": 0.0903417207300663}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.02155328541994095, \"head\": 0.013399474322795868}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.007220286875963211, \"head\": 0.0049755871295928955}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.05931158736348152, \"head\": 0.030301805585622787}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.01705116778612137, \"head\": 0.014387853443622589}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.428003516048193, \"head\": 0.6514189280569553}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.0986444465816021, \"head\": 0.03916170075535774}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006502673029899597, \"head\": 0.007958218455314636}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.9636480510234833, \"head\": 1.1959559619426727}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.08812405541539192, \"head\": 0.00586218386888504}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.016267985105514526, \"head\": 0.09253481775522232}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.08142637461423874, \"head\": 0.10197814181447029}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.015495061874389648, \"head\": 0.014188602566719055}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.004964053630828857, \"head\": 0.004926387220621109}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.029993709176778793, \"head\": 0.03005141019821167}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.020751364529132843, \"head\": 0.014086894690990448}}, {\"sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA\": {\"base\": 0.7124706469476223, \"head\": 0.7539774365723133}, \"sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse\": {\"base\": 0.13546257093548775, \"head\": 0.11018592864274979}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.010452739894390106, \"head\": 0.0066331177949905396}, \"sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto\": {\"base\": 1.4867582432925701, \"head\": 0.7829225212335587}, \"sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms\": {\"base\": 0.10053336247801781, \"head\": 0.09868340194225311}, \"sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive\": {\"base\": 0.007994197309017181, \"head\": 0.011704105883836746}, \"sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1\": {\"base\": 0.08749449253082275, \"head\": 0.016828875988721848}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]\": {\"base\": 0.021842628717422485, \"head\": 0.01206136867403984}, \"sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]\": {\"base\": 0.004946593195199966, \"head\": 0.0049981847405433655}, \"sklearn/tests/test_multiclass.py::test_ovr_coef_\": {\"base\": 0.030863285064697266, \"head\": 0.03027411177754402}, \"sklearn/tests/test_pipeline.py::test_feature_union\": {\"base\": 0.014857571572065353, \"head\": 0.014221590012311935}}]",
  "efficiency_test": [
    "sklearn/decomposition/fastica_.py::sklearn.decomposition.fastica_.FastICA",
    "sklearn/decomposition/tests/test_kernel_pca.py::test_kernel_pca_sparse",
    "sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver",
    "sklearn/decomposition/tests/test_pca.py::test_svd_solver_auto",
    "sklearn/decomposition/tests/test_truncated_svd.py::test_algorithms",
    "sklearn/linear_model/tests/test_coordinate_descent.py::test_enet_path_positive",
    "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1",
    "sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_estimators_overwrite_params]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[GaussianProcessClassifier-GaussianProcessClassifier-check_fit2d_1feature]",
    "sklearn/tests/test_multiclass.py::test_ovr_coef_",
    "sklearn/tests/test_pipeline.py::test_feature_union"
  ],
  "patch_functions": "{\"sklearn/model_selection/_split.py\": [\"TimeSeriesSplit.split\", \"LeaveOneGroupOut.get_n_splits\", \"LeavePGroupsOut.get_n_splits\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sklearn/model_selection/_split.py': ['TimeSeriesSplit.split', 'LeaveOneGroupOut.get_n_splits', 'LeavePGroupsOut.get_n_splits']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sklearn/utils/validation.py\": [\"check_array\", \"check_random_state\"], \"sklearn/multiclass.py\": [\"OneVsRestClassifier\", \"OneVsRestClassifier.coef_\", \"OneVsRestClassifier.fit\"], \"sklearn/feature_selection/univariate_selection.py\": [\"SelectKBest.fit\", \"SelectKBest\"], \"sklearn/base.py\": [\"SelectKBest.fit_transform\", \"KernelCenterer.fit_transform\", \"AdaBoostClassifier.get_params\", \"FeatureUnion.set_params\"], \"sklearn/decomposition/fastica_.py\": [\"fastica\", \"_sym_decorrelation\", \"_ica_par\", \"FastICA._fit\", \"_logcosh\"], \"sklearn/utils/estimator_checks.py\": [\"_yield_all_checks\", \"set_checking_parameters\"], \"sklearn/utils/deprecation.py\": [\"wrapped\"], \"sklearn/decomposition/base.py\": [\"PCA.get_precision\", \"PCA.get_covariance\", \"PCA.transform\"], \"sklearn/svm/classes.py\": [\"LinearSVC\", \"SVC\", \"LinearSVC.fit\"], \"sklearn/utils/_unittest_backport.py\": [\"TestCase.assertRaisesRegex\", \"TestCase.assertRaises\"], \"sklearn/preprocessing/data.py\": [\"KernelCenterer.transform\", \"KernelCenterer.fit\"], \"sklearn/metrics/classification.py\": [\"fbeta_score\", \"precision_recall_fscore_support\"], \"sklearn/decomposition/truncated_svd.py\": [\"TruncatedSVD.fit\", \"TruncatedSVD\", \"TruncatedSVD.fit_transform\", \"TruncatedSVD.transform\"], \"sklearn/pipeline.py\": [\"FeatureUnion.fit\", \"FeatureUnion.transform\", \"FeatureUnion.set_params\", \"FeatureUnion\", \"FeatureUnion.fit_transform\"], \"sklearn/decomposition/kernel_pca.py\": [\"KernelPCA\", \"KernelPCA.fit_transform\", \"KernelPCA.transform\", \"KernelPCA.fit\"], \"sklearn/datasets/base.py\": [\"load_iris\"], \"sklearn/svm/base.py\": [\"SVC.coef_\", \"SVC.fit\"], \"sklearn/preprocessing/label.py\": [\"LabelBinarizer.fit\"], \"sklearn/decomposition/pca.py\": [\"PCA.fit_transform\", \"PCA.fit\", \"PCA\"], \"sklearn/linear_model/coordinate_descent.py\": [\"lasso_path\", \"enet_path\"], \"sklearn/feature_selection/base.py\": [\"SelectKBest.transform\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sklearn/utils/validation.py': ['check_array', 'check_random_state'], 'sklearn/multiclass.py': ['OneVsRestClassifier', 'OneVsRestClassifier.coef_', 'OneVsRestClassifier.fit'], 'sklearn/feature_selection/univariate_selection.py': ['SelectKBest.fit', 'SelectKBest'], 'sklearn/base.py': ['SelectKBest.fit_transform', 'KernelCenterer.fit_transform', 'AdaBoostClassifier.get_params', 'FeatureUnion.set_params'], 'sklearn/decomposition/fastica_.py': ['fastica', '_sym_decorrelation', '_ica_par', 'FastICA._fit', '_logcosh'], 'sklearn/utils/estimator_checks.py': ['_yield_all_checks', 'set_checking_parameters'], 'sklearn/utils/deprecation.py': ['wrapped'], 'sklearn/decomposition/base.py': ['PCA.get_precision', 'PCA.get_covariance', 'PCA.transform'], 'sklearn/svm/classes.py': ['LinearSVC', 'SVC', 'LinearSVC.fit'], 'sklearn/utils/_unittest_backport.py': ['TestCase.assertRaisesRegex', 'TestCase.assertRaises'], 'sklearn/preprocessing/data.py': ['KernelCenterer.transform', 'KernelCenterer.fit'], 'sklearn/metrics/classification.py': ['fbeta_score', 'precision_recall_fscore_support'], 'sklearn/decomposition/truncated_svd.py': ['TruncatedSVD.fit', 'TruncatedSVD', 'TruncatedSVD.fit_transform', 'TruncatedSVD.transform'], 'sklearn/pipeline.py': ['FeatureUnion.fit', 'FeatureUnion.transform', 'FeatureUnion.set_params', 'FeatureUnion', 'FeatureUnion.fit_transform'], 'sklearn/decomposition/kernel_pca.py': ['KernelPCA', 'KernelPCA.fit_transform', 'KernelPCA.transform', 'KernelPCA.fit'], 'sklearn/datasets/base.py': ['load_iris'], 'sklearn/svm/base.py': ['SVC.coef_', 'SVC.fit'], 'sklearn/preprocessing/label.py': ['LabelBinarizer.fit'], 'sklearn/decomposition/pca.py': ['PCA.fit_transform', 'PCA.fit', 'PCA'], 'sklearn/linear_model/coordinate_descent.py': ['lasso_path', 'enet_path'], 'sklearn/feature_selection/base.py': ['SelectKBest.transform']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.01390909090909092
}