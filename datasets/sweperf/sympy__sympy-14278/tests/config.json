{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-14278",
  "patch": "diff --git a/sympy/functions/elementary/complexes.py b/sympy/functions/elementary/complexes.py\nindex f3cc98a232f1..791d5c6779ce 100644\n--- a/sympy/functions/elementary/complexes.py\n+++ b/sympy/functions/elementary/complexes.py\n@@ -480,6 +480,12 @@ def eval(cls, arg):\n                 if base.is_negative:\n                     return (-base)**re(exponent)*exp(-S.Pi*im(exponent))\n                 return\n+            elif not base.has(Symbol): # complex base\n+                # express base**exponent as exp(exponent*log(base))\n+                a, b = log(base).as_real_imag()\n+                z = a + I*b\n+                return exp(re(exponent*z))\n+\n         if isinstance(arg, exp):\n             return exp(re(arg.args[0]))\n         if isinstance(arg, AppliedUndef):\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex 60127d5b5e57..069c2cc45a73 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -1,5 +1,5 @@\n from sympy import (\n-    Abs, adjoint, arg, atan2, conjugate, cos, DiracDelta, E, exp, expand,\n+    Abs, adjoint, arg, atan, atan2, conjugate, cos, DiracDelta, E, exp, expand,\n     Expr, Function, Heaviside, I, im, log, nan, oo, pi, Rational, re, S,\n     sign, sin, sqrt, Symbol, symbols, transpose, zoo, exp_polar, Piecewise,\n     Interval, comp, Integral, Matrix, ImmutableMatrix, SparseMatrix,\n@@ -399,6 +399,12 @@ def test_Abs():\n     assert 1/Abs(x)**3 == 1/(x**2*Abs(x))\n     assert Abs(x)**-3 == Abs(x)/(x**4)\n     assert Abs(x**3) == x**2*Abs(x)\n+    assert Abs(I**I) == exp(-pi/2)\n+    assert Abs((4 + 5*I)**(6 + 7*I)) == 68921*exp(-7*atan(S(5)/4))\n+    y = Symbol('y', real=True)\n+    assert Abs(I**y) == 1\n+    y = Symbol('y')\n+    assert Abs(I**y) == exp(-pi*im(y)/2)\n \n     x = Symbol('x', imaginary=True)\n     assert Abs(x).diff(x) == -sign(x)\n",
  "base_commit": "9986b38181cdd556a3f3411e553864f11912244e",
  "head_commit": "61251e932b1a4b19b354e6ce7607c5aead348e4d",
  "created_at": 1519046588000,
  "version": "1.1",
  "duration_changes": "[{\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.1263839565217495, \"head\": 0.03426704183220863}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.128153994679451, \"head\": 0.034014590084552765}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12676915153861046, \"head\": 0.03330501541495323}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12555885314941406, \"head\": 0.033636368811130524}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12683161720633507, \"head\": 0.037170685827732086}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12697084993124008, \"head\": 0.0342559739947319}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12561103329062462, \"head\": 0.03379535675048828}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.126096673309803, \"head\": 0.03378744423389435}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12699326872825623, \"head\": 0.03543001413345337}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.1277216225862503, \"head\": 0.0341104194521904}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.1310875415802002, \"head\": 0.03415266051888466}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.13112054392695427, \"head\": 0.03348628804087639}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12522313371300697, \"head\": 0.03302403539419174}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.129078708589077, \"head\": 0.03642462193965912}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.1286064349114895, \"head\": 0.03446010872721672}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.1299363300204277, \"head\": 0.03344910964369774}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.1277541145682335, \"head\": 0.03402716666460037}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12738512083888054, \"head\": 0.038641661405563354}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12692415341734886, \"head\": 0.03388235345482826}}, {\"sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real\": {\"base\": 0.12578273564577103, \"head\": 0.03474333509802818}}]",
  "efficiency_test": [
    "sympy/sets/tests/test_fancysets.py::test_imageset_intersect_real"
  ],
  "patch_functions": "{\"sympy/functions/elementary/complexes.py\": [\"Abs.eval\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/functions/elementary/complexes.py': ['Abs.eval']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/functions/elementary/exponential.py\": [\"log\"], \"sympy/utilities/pytest.py\": [\"XFAIL\"], \"sympy/sets/sets.py\": [\"imageset\", \"FiniteSet\", \"ImageSet.intersect\"], \"sympy/sets/fancysets.py\": [\"ImageSet\"], \"sympy/core/cache.py\": [\"wrapper\"], \"sympy/functions/elementary/miscellaneous.py\": [\"sqrt\"], \"sympy/core/function.py\": [\"Lambda\"], \"sympy/functions/elementary/complexes.py\": [\"Abs\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/functions/elementary/exponential.py': ['log'], 'sympy/utilities/pytest.py': ['XFAIL'], 'sympy/sets/sets.py': ['imageset', 'FiniteSet', 'ImageSet.intersect'], 'sympy/sets/fancysets.py': ['ImageSet'], 'sympy/core/cache.py': ['wrapper'], 'sympy/functions/elementary/miscellaneous.py': ['sqrt'], 'sympy/core/function.py': ['Lambda'], 'sympy/functions/elementary/complexes.py': ['Abs']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.7310000000000005
}