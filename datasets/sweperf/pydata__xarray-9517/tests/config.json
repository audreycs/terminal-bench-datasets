{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-9517",
  "patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 39679cbcff7..7ed7656e60d 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -534,10 +534,10 @@ def _replace_maybe_drop_dims(\n         variable: Variable,\n         name: Hashable | None | Default = _default,\n     ) -> Self:\n-        if variable.dims == self.dims and variable.shape == self.shape:\n+        if self.sizes == variable.sizes:\n             coords = self._coords.copy()\n             indexes = self._indexes\n-        elif variable.dims == self.dims:\n+        elif set(self.dims) == set(variable.dims):\n             # Shape has changed (e.g. from reduce(..., keepdims=True)\n             new_sizes = dict(zip(self.dims, variable.shape, strict=True))\n             coords = {\n",
  "test_patch": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 38feea88b18..7512857681b 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -2918,3 +2918,16 @@ def test_gappy_resample_reductions(reduction):\n # 1. lambda x: x\n # 2. grouped-reduce on unique coords is identical to array\n # 3. group_over == groupby-reduce along other dimensions\n+\n+\n+def test_groupby_transpose():\n+    # GH5361\n+    data = xr.DataArray(\n+        np.random.randn(4, 2),\n+        dims=[\"x\", \"z\"],\n+        coords={\"x\": [\"a\", \"b\", \"a\", \"c\"], \"y\": (\"x\", [0, 1, 0, 2])},\n+    )\n+    first = data.T.groupby(\"x\").sum()\n+    second = data.groupby(\"x\").sum()\n+\n+    assert_identical(first, second.transpose(*first.dims))\n",
  "base_commit": "e3138532cae7d0f0f75f30fee247b38ac5fcf3e6",
  "head_commit": "b991f5e6095c4037e3d2003735c027b218d54d23",
  "created_at": 1726697069000,
  "version": "2024.05",
  "duration_changes": "[{\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18577241897583008, \"head\": 0.1841668151319027}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.019794143736362457, \"head\": 0.019930128008127213}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.017969034612178802, \"head\": 0.01824198290705681}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.020859479904174805, \"head\": 0.020521879196166992}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.010472528636455536, \"head\": 0.01051798090338707}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.1871594563126564, \"head\": 0.1841486506164074}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.02215222641825676, \"head\": 0.01988103613257408}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.019313842058181763, \"head\": 0.017906051129102707}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02050156518816948, \"head\": 0.020684808492660522}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.010345570743083954, \"head\": 0.010447610169649124}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18604235723614693, \"head\": 0.18436933681368828}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.020147066563367844, \"head\": 0.019881684333086014}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018082108348608017, \"head\": 0.018054958432912827}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.020669899880886078, \"head\": 0.020380135625600815}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.011393602937459946, \"head\": 0.01012783870100975}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.1860651895403862, \"head\": 0.18789659813046455}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.01967640221118927, \"head\": 0.01991703361272812}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.017726562917232513, \"head\": 0.018026504665613174}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02082768827676773, \"head\": 0.020679175853729248}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.010593272745609283, \"head\": 0.010799501091241837}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18969324976205826, \"head\": 0.18391115218400955}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.020888343453407288, \"head\": 0.019847098737955093}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.0184323750436306, \"head\": 0.018040474504232407}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02112804353237152, \"head\": 0.02082410827279091}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.011088769882917404, \"head\": 0.010106362402439117}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18644732981920242, \"head\": 0.1866973526775837}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.019634976983070374, \"head\": 0.020156942307949066}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018754571676254272, \"head\": 0.0186474546790123}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.021122165024280548, \"head\": 0.02132246270775795}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.010725393891334534, \"head\": 0.010404199361801147}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18883725255727768, \"head\": 0.18473810702562332}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.020615629851818085, \"head\": 0.019777610898017883}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018611304461956024, \"head\": 0.0189848393201828}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.021434661000967026, \"head\": 0.02093983069062233}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.011516876518726349, \"head\": 0.010133270174264908}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.19451897218823433, \"head\": 0.1848955638706684}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.022076450288295746, \"head\": 0.019627496600151062}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.01841716468334198, \"head\": 0.01806504651904106}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.020992089062929153, \"head\": 0.020610738545656204}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.011919397860765457, \"head\": 0.010162875056266785}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18427710980176926, \"head\": 0.1861000955104828}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.019812799990177155, \"head\": 0.01983361318707466}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018071845173835754, \"head\": 0.01899329572916031}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.020208656787872314, \"head\": 0.020543120801448822}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.010250549763441086, \"head\": 0.010301865637302399}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.20996154844760895, \"head\": 0.1862039417028427}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.01986052095890045, \"head\": 0.019489288330078125}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.01751791685819626, \"head\": 0.017741207033395767}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.020460106432437897, \"head\": 0.020132556557655334}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.011021330952644348, \"head\": 0.010117411613464355}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18607202172279358, \"head\": 0.1914718709886074}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.022263526916503906, \"head\": 0.020461637526750565}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018549758940935135, \"head\": 0.018013399094343185}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02010064199566841, \"head\": 0.02114177495241165}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.010112103074789047, \"head\": 0.010983437299728394}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.19036810100078583, \"head\": 0.19159987568855286}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.020855162292718887, \"head\": 0.020104050636291504}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018299024552106857, \"head\": 0.018557768315076828}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.021470408886671066, \"head\": 0.021278001368045807}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.011132117360830307, \"head\": 0.01079583540558815}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18554579094052315, \"head\": 0.19086335599422455}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.020090728998184204, \"head\": 0.02019401267170906}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018587280064821243, \"head\": 0.017955873161554337}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02060522884130478, \"head\": 0.02059715986251831}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.01029776781797409, \"head\": 0.010448142886161804}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.19264529272913933, \"head\": 0.19825367629528046}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.02062666043639183, \"head\": 0.020536329597234726}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.01851082220673561, \"head\": 0.02002466470003128}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02074028179049492, \"head\": 0.0223858579993248}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.010793443769216537, \"head\": 0.011920511722564697}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.19689616188406944, \"head\": 0.19550595805048943}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.020626019686460495, \"head\": 0.02112710103392601}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018786147236824036, \"head\": 0.02147487923502922}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02157970517873764, \"head\": 0.022361792623996735}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.012467753142118454, \"head\": 0.01144939661026001}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.1933436542749405, \"head\": 0.1892995685338974}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.020285312086343765, \"head\": 0.021003682166337967}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.01873992383480072, \"head\": 0.01811191812157631}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.021850328892469406, \"head\": 0.023431137204170227}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.011550653725862503, \"head\": 0.010684855282306671}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.18993040546774864, \"head\": 0.19150109961628914}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.019863609224557877, \"head\": 0.020493701100349426}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.01783808320760727, \"head\": 0.01864321529865265}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02054997906088829, \"head\": 0.02288823202252388}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.01037614420056343, \"head\": 0.011098798364400864}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.1932571902871132, \"head\": 0.1906134895980358}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.021168813109397888, \"head\": 0.020479071885347366}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.020898252725601196, \"head\": 0.01884482428431511}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.021317772567272186, \"head\": 0.025325194001197815}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.01110975444316864, \"head\": 0.013017956167459488}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.19031359627842903, \"head\": 0.20807914808392525}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.019764292985200882, \"head\": 0.021705806255340576}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018116891384124756, \"head\": 0.018214210867881775}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.02034413442015648, \"head\": 0.020637165755033493}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.010518703609704971, \"head\": 0.010980315506458282}}, {\"xarray/tests/test_computation.py::test_polyval[int32-degree-dask]\": {\"base\": 0.20303864777088165, \"head\": 0.18934578448534012}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]\": {\"base\": 0.02059931308031082, \"head\": 0.020323164761066437}, \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]\": {\"base\": 0.018295586109161377, \"head\": 0.018602874130010605}, \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\": {\"base\": 0.020720090717077255, \"head\": 0.02431432530283928}, \"xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset\": {\"base\": 0.011804170906543732, \"head\": 0.012551475316286087}}]",
  "efficiency_test": [
    "xarray/tests/test_computation.py::test_polyval[int32-degree-dask]",
    "xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[False-array-False]",
    "xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict[True-array-False]",
    "xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray",
    "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset"
  ],
  "patch_functions": "{\"xarray/core/dataarray.py\": [\"DataArray._replace_maybe_drop_dims\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/core/dataarray.py': ['DataArray._replace_maybe_drop_dims']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/dataset.py\": [\"Dataset\", \"Dataset.chunk\", \"Dataset.drop_vars\", \"Dataset.coords\", \"Dataset.isel\"], \"xarray/core/dataarray.py\": [\"DataArray.values\", \"from_dict\", \"DataArray.to_numpy\", \"DataArray.isel\", \"DataArray.to_series\", \"DataArray.chunk\", \"DataArray.copy\", \"DataArray.to_dict\", \"DataArray.resample\", \"DataArray.to_dataset\", \"DataArray.drop_vars\", \"DataArray\"], \"xarray/core/variable.py\": [\"IndexVariable.copy\", \"Variable.to_dict\", \"IndexVariable.chunk\", \"Variable.isel\", \"Variable.chunk\"], \"xarray/coding/cftime_offsets.py\": [\"date_range\"], \"xarray/core/indexes.py\": [\"PandasIndex.isel\"], \"xarray/util/deprecation_helpers.py\": [\"inner\"], \"xarray/core/computation.py\": [\"polyval\"], \"xarray/namedarray/pycompat.py\": [\"to_numpy\", \"array_type\"], \"xarray/namedarray/core.py\": [\"Variable.chunk\", \"Variable.to_numpy\", \"Variable.copy\"], \"xarray/core/common.py\": [\"DataArray.astype\"], \"xarray/core/indexing.py\": [\"OuterIndexer.tuple\"], \"xarray/core/_aggregations.py\": [\"DataArrayResample.mean\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/dataset.py': ['Dataset', 'Dataset.chunk', 'Dataset.drop_vars', 'Dataset.coords', 'Dataset.isel'], 'xarray/core/dataarray.py': ['DataArray.values', 'from_dict', 'DataArray.to_numpy', 'DataArray.isel', 'DataArray.to_series', 'DataArray.chunk', 'DataArray.copy', 'DataArray.to_dict', 'DataArray.resample', 'DataArray.to_dataset', 'DataArray.drop_vars', 'DataArray'], 'xarray/core/variable.py': ['IndexVariable.copy', 'Variable.to_dict', 'IndexVariable.chunk', 'Variable.isel', 'Variable.chunk'], 'xarray/coding/cftime_offsets.py': ['date_range'], 'xarray/core/indexes.py': ['PandasIndex.isel'], 'xarray/util/deprecation_helpers.py': ['inner'], 'xarray/core/computation.py': ['polyval'], 'xarray/namedarray/pycompat.py': ['to_numpy', 'array_type'], 'xarray/namedarray/core.py': ['Variable.chunk', 'Variable.to_numpy', 'Variable.copy'], 'xarray/core/common.py': ['DataArray.astype'], 'xarray/core/indexing.py': ['OuterIndexer.tuple'], 'xarray/core/_aggregations.py': ['DataArrayResample.mean']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.0016
}