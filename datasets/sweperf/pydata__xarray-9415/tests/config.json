{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-9415",
  "patch": "diff --git a/xarray/core/accessor_dt.py b/xarray/core/accessor_dt.py\nindex 41b982d268b..c5f953f15c4 100644\n--- a/xarray/core/accessor_dt.py\n+++ b/xarray/core/accessor_dt.py\n@@ -14,7 +14,7 @@\n     is_np_timedelta_like,\n )\n from xarray.core.types import T_DataArray\n-from xarray.core.variable import IndexVariable\n+from xarray.core.variable import IndexVariable, Variable\n from xarray.namedarray.utils import is_duck_dask_array\n \n if TYPE_CHECKING:\n@@ -244,12 +244,22 @@ def _date_field(self, name: str, dtype: DTypeLike) -> T_DataArray:\n         if dtype is None:\n             dtype = self._obj.dtype\n         result = _get_date_field(_index_or_data(self._obj), name, dtype)\n-        newvar = self._obj.variable.copy(data=result, deep=False)\n+        newvar = Variable(\n+            dims=self._obj.dims,\n+            attrs=self._obj.attrs,\n+            encoding=self._obj.encoding,\n+            data=result,\n+        )\n         return self._obj._replace(newvar, name=name)\n \n     def _tslib_round_accessor(self, name: str, freq: str) -> T_DataArray:\n         result = _round_field(_index_or_data(self._obj), name, freq)\n-        newvar = self._obj.variable.copy(data=result, deep=False)\n+        newvar = Variable(\n+            dims=self._obj.dims,\n+            attrs=self._obj.attrs,\n+            encoding=self._obj.encoding,\n+            data=result,\n+        )\n         return self._obj._replace(newvar, name=name)\n \n     def floor(self, freq: str) -> T_DataArray:\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex a74fb4d8ce9..3aee0a72c0b 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1490,7 +1490,7 @@ def _unstack_once(\n         dim: Hashable,\n         fill_value=dtypes.NA,\n         sparse: bool = False,\n-    ) -> Self:\n+    ) -> Variable:\n         \"\"\"\n         Unstacks this variable given an index to unstack and the name of the\n         dimension to which the index refers.\n@@ -1550,10 +1550,10 @@ def _unstack_once(\n             # case the destinations will be NaN / zero.\n             data[(..., *indexer)] = reordered\n \n-        return self._replace(dims=new_dims, data=data)\n+        return self.to_base_variable()._replace(dims=new_dims, data=data)\n \n     @partial(deprecate_dims, old_name=\"dimensions\")\n-    def unstack(self, dim=None, **dim_kwargs):\n+    def unstack(self, dim=None, **dim_kwargs) -> Variable:\n         \"\"\"\n         Unstack an existing dimension into multiple new dimensions.\n \n",
  "test_patch": "diff --git a/xarray/testing/assertions.py b/xarray/testing/assertions.py\nindex 3dec6a25616..3a0cc96b20d 100644\n--- a/xarray/testing/assertions.py\n+++ b/xarray/testing/assertions.py\n@@ -211,7 +211,9 @@ def assert_identical(a, b, from_root=True):\n     if isinstance(a, Variable):\n         assert a.identical(b), formatting.diff_array_repr(a, b, \"identical\")\n     elif isinstance(a, DataArray):\n-        assert a.name == b.name\n+        assert (\n+            a.name == b.name\n+        ), f\"DataArray names are different. L: {a.name}, R: {b.name}\"\n         assert a.identical(b), formatting.diff_array_repr(a, b, \"identical\")\n     elif isinstance(a, Dataset | Variable):\n         assert a.identical(b), formatting.diff_dataset_repr(a, b, \"identical\")\ndiff --git a/xarray/tests/test_accessor_dt.py b/xarray/tests/test_accessor_dt.py\nindex 686bce943fa..c73c5d3258f 100644\n--- a/xarray/tests/test_accessor_dt.py\n+++ b/xarray/tests/test_accessor_dt.py\n@@ -97,6 +97,7 @@ def test_field_access(self, field) -> None:\n                 actual = getattr(self.data.time.dt, field)\n         else:\n             actual = getattr(self.data.time.dt, field)\n+        assert not isinstance(actual.variable, xr.IndexVariable)\n \n         assert expected.dtype == actual.dtype\n         assert_identical(expected, actual)\ndiff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 9feab73d3d1..e58ead259cd 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -7202,3 +7202,17 @@ def test_lazy_data_variable_not_loaded():\n     da = xr.DataArray(v)\n     # No data needs to be accessed, so no error should be raised\n     xr.DataArray(da)\n+\n+\n+def test_unstack_index_var() -> None:\n+    source = xr.DataArray(range(2), dims=[\"x\"], coords=[[\"a\", \"b\"]])\n+    da = source.x\n+    da = da.assign_coords(y=(\"x\", [\"c\", \"d\"]), z=(\"x\", [\"e\", \"f\"]))\n+    da = da.set_index(x=[\"y\", \"z\"])\n+    actual = da.unstack(\"x\")\n+    expected = xr.DataArray(\n+        np.array([[\"a\", np.nan], [np.nan, \"b\"]], dtype=object),\n+        coords={\"y\": [\"c\", \"d\"], \"z\": [\"e\", \"f\"]},\n+        name=\"x\",\n+    )\n+    assert_identical(actual, expected)\n",
  "base_commit": "d33e4ad9407591cc7287973b0f8da47cae396004",
  "head_commit": "2d587490882641336636a99fd2f0568a0063d532",
  "created_at": 1724994167000,
  "version": "2024.05",
  "duration_changes": "[{\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.013187061995267868, \"head\": 0.01340169832110405}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.0872400626540184, \"head\": 1.0569395199418068}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7891708090901375, \"head\": 0.6929995082318783}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.27059297636151314, \"head\": 0.2772935666143894}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.013200268149375916, \"head\": 0.013155326247215271}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.1716100759804249, \"head\": 1.0973208025097847}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7925576269626617, \"head\": 0.7976241856813431}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.17948688194155693, \"head\": 0.2772672586143017}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.01269981637597084, \"head\": 0.01396142691373825}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.0495442301034927, \"head\": 1.0590508431196213}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7996737621724606, \"head\": 0.7645933590829372}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.19145959243178368, \"head\": 0.18221206218004227}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.01519457995891571, \"head\": 0.013566546142101288}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.1054966524243355, \"head\": 1.2243908904492855}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.6960611157119274, \"head\": 0.6736947447061539}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.34314099326729774, \"head\": 0.29310640692710876}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.014101080596446991, \"head\": 0.012801628559827805}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.1122758835554123, \"head\": 1.0043065436184406}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.8044237084686756, \"head\": 0.7818470858037472}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.206358402967453, \"head\": 0.30197229236364365}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.013150956481695175, \"head\": 0.017351467162370682}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.070850893855095, \"head\": 1.0856425054371357}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7041077725589275, \"head\": 0.7910823114216328}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.3690053001046181, \"head\": 0.2828022688627243}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.014164242893457413, \"head\": 0.01295449584722519}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.0823998413980007, \"head\": 1.138927660882473}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.8714474551379681, \"head\": 0.6688811518251896}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.18994099274277687, \"head\": 0.27937278896570206}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.01420673355460167, \"head\": 0.012915559113025665}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.1865649037063122, \"head\": 1.078399918973446}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.8279087394475937, \"head\": 0.6732110753655434}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.19099439680576324, \"head\": 0.19446662440896034}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.013697255402803421, \"head\": 0.012960903346538544}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.0882315672934055, \"head\": 1.1302806288003922}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.6863135807216167, \"head\": 0.7785726152360439}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.29148828983306885, \"head\": 0.2848973609507084}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.012827157974243164, \"head\": 0.013198155909776688}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.0719694904983044, \"head\": 1.0189333818852901}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7884713113307953, \"head\": 0.7216329015791416}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.2695174291729927, \"head\": 0.2937190420925617}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.013181865215301514, \"head\": 0.013000190258026123}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.1279852129518986, \"head\": 1.0092069394886494}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7969301268458366, \"head\": 0.6252230703830719}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.18636737391352654, \"head\": 0.32985034957528114}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.014183830469846725, \"head\": 0.013308718800544739}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.2424398623406887, \"head\": 1.0606251806020737}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.6955387555062771, \"head\": 0.689173586666584}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.27639777958393097, \"head\": 0.2690836675465107}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.013910084962844849, \"head\": 0.01296764612197876}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.1265381574630737, \"head\": 1.0594924315810204}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7024048082530499, \"head\": 0.6057082191109657}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.27218328788876534, \"head\": 0.328857209533453}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.01281408965587616, \"head\": 0.013136696070432663}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.135359700769186, \"head\": 1.0810357108712196}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7769318483769894, \"head\": 0.7168649435043335}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.17941532656550407, \"head\": 0.32087694108486176}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.01331312209367752, \"head\": 0.014128230512142181}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.1528160125017166, \"head\": 1.1466952376067638}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7970603778958321, \"head\": 0.7084253877401352}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.2797102928161621, \"head\": 0.3080356605350971}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.012585751712322235, \"head\": 0.012795183807611465}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.0475903637707233, \"head\": 1.0573417693376541}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.6149276383221149, \"head\": 0.7054690532386303}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.3330290615558624, \"head\": 0.32649651169776917}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.012703493237495422, \"head\": 0.013094853609800339}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.0682278722524643, \"head\": 1.067387443035841}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.6997370310127735, \"head\": 0.7800445817410946}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.21233933046460152, \"head\": 0.32273565232753754}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.013286560773849487, \"head\": 0.013880234211683273}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.0293001011013985, \"head\": 1.1938850805163383}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.6202892512083054, \"head\": 0.7840364202857018}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.33546435460448265, \"head\": 0.25734733417630196}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.012797649949789047, \"head\": 0.013710584491491318}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.173226784914732, \"head\": 1.1466034576296806}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7990289069712162, \"head\": 0.793438371270895}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.1846449226140976, \"head\": 0.27250785753130913}}, {\"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]\": {\"base\": 0.012898020446300507, \"head\": 0.013440098613500595}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]\": {\"base\": 1.1231694519519806, \"head\": 1.0577367320656776}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]\": {\"base\": 0.7954105548560619, \"head\": 0.6616575121879578}, \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\": {\"base\": 0.2631031386554241, \"head\": 0.26167261227965355}}]",
  "efficiency_test": [
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_construct[1-False]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-2-False-1]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-sum-3-3-True-1]",
    "xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask"
  ],
  "patch_functions": "{\"xarray/core/accessor_dt.py\": [\"TimeAccessor._date_field\", \"TimeAccessor._tslib_round_accessor\"], \"xarray/core/variable.py\": [\"Variable.unstack\", \"Variable._unstack_once\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/core/accessor_dt.py': ['TimeAccessor._date_field', 'TimeAccessor._tslib_round_accessor'], 'xarray/core/variable.py': ['Variable.unstack', 'Variable._unstack_once']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/common.py\": [\"Dataset.isnull\", \"full_like\"], \"xarray/core/dataarray.py\": [\"DataArray.values\", \"DataArray.reduce\", \"DataArray.dims\", \"DataArray.rolling\"], \"xarray/namedarray/core.py\": [\"Variable.dtype\", \"NamedArray.shape\", \"Variable.attrs\", \"Variable.dims\", \"Variable.chunk\", \"Variable.chunks\", \"Variable.reduce\"], \"xarray/core/duck_array_ops.py\": [\"isnull\", \"mean\"], \"xarray/core/rolling.py\": [\"DatasetRolling.method\", \"DataArrayRolling.reduce\", \"DataArrayRolling.construct\", \"DatasetRolling.construct\", \"DatasetRolling.reduce\"], \"xarray/core/dataset.py\": [\"Dataset.rolling\", \"from_dataframe\", \"Dataset.data_vars\", \"Dataset.sizes\", \"Dataset.to_dataarray\"], \"xarray/core/_aggregations.py\": [\"DataArray.sum\", \"Dataset.sum\", \"Dataset.mean\", \"DataArray.all\"], \"xarray/core/variable.py\": [\"Variable.data\", \"Variable.reduce\", \"Variable.chunk\", \"Variable\", \"Variable.values\"], \"xarray/namedarray/pycompat.py\": [\"array_type\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/common.py': ['Dataset.isnull', 'full_like'], 'xarray/core/dataarray.py': ['DataArray.values', 'DataArray.reduce', 'DataArray.dims', 'DataArray.rolling'], 'xarray/namedarray/core.py': ['Variable.dtype', 'NamedArray.shape', 'Variable.attrs', 'Variable.dims', 'Variable.chunk', 'Variable.chunks', 'Variable.reduce'], 'xarray/core/duck_array_ops.py': ['isnull', 'mean'], 'xarray/core/rolling.py': ['DatasetRolling.method', 'DataArrayRolling.reduce', 'DataArrayRolling.construct', 'DatasetRolling.construct', 'DatasetRolling.reduce'], 'xarray/core/dataset.py': ['Dataset.rolling', 'from_dataframe', 'Dataset.data_vars', 'Dataset.sizes', 'Dataset.to_dataarray'], 'xarray/core/_aggregations.py': ['DataArray.sum', 'Dataset.sum', 'Dataset.mean', 'DataArray.all'], 'xarray/core/variable.py': ['Variable.data', 'Variable.reduce', 'Variable.chunk', 'Variable', 'Variable.values'], 'xarray/namedarray/pycompat.py': ['array_type']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.0037500000000000007
}