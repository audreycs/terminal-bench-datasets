{
  "repo": "psf/requests",
  "instance_id": "psf__requests-3036",
  "patch": "diff --git a/HISTORY.rst b/HISTORY.rst\nindex 1fa26b7fb2..969ad843e1 100644\n--- a/HISTORY.rst\n+++ b/HISTORY.rst\n@@ -9,6 +9,8 @@ Release History\n **Bugfixes**\n \n - Don't use redirect_cache if allow_redirects=False\n+- When passed objects that throw exceptions from ``tell()``, send them via\n+  chunked transfer encoding instead of failing.\n \n 2.9.1 (2015-12-21)\n ++++++++++++++++++\ndiff --git a/requests/utils.py b/requests/utils.py\nindex c5c3fd01d9..16f7b98f16 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -83,7 +83,14 @@ def super_len(o):\n                 )\n \n     if hasattr(o, 'tell'):\n-        current_position = o.tell()\n+        try:\n+            current_position = o.tell()\n+        except (OSError, IOError):\n+            # This can happen in some weird situations, such as when the file\n+            # is actually a special file descriptor like stdin. In this\n+            # instance, we don't know what the length is, so set it to zero and\n+            # let requests chunk it instead.\n+            current_position = total_length\n \n     return max(0, total_length - current_position)\n \n",
  "test_patch": "diff --git a/tests/test_utils.py b/tests/test_utils.py\nindex 5a50e36625..24b40b96e1 100644\n--- a/tests/test_utils.py\n+++ b/tests/test_utils.py\n@@ -15,7 +15,6 @@\n \n \n class TestSuperLen:\n-\n     @pytest.mark.parametrize(\n         'stream, value', (\n             (StringIO.StringIO, 'Test'),\n@@ -33,6 +32,20 @@ def test_super_len_correctly_calculates_len_of_partially_read_file(self):\n         s.write('foobarbogus')\n         assert super_len(s) == 0\n \n+    @pytest.mark.parametrize('error', [IOError, OSError])\n+    def test_super_len_handles_files_raising_weird_errors_in_tell(self, error):\n+        \"\"\"\n+        If tell() raises errors, assume the cursor is at position zero.\n+        \"\"\"\n+        class BoomFile(object):\n+            def __len__(self):\n+                return 5\n+\n+            def tell(self):\n+                raise error()\n+\n+        assert super_len(BoomFile()) == 0\n+\n \n class TestGetEnvironProxies:\n     \"\"\"Ensures that IP addresses are correctly matches with ranges\n",
  "base_commit": "4f378b0e1a2f5f60e2e57daaec80081483f7150e",
  "head_commit": "90a166d44ae2d6b0887140f64c0c79051fd8c0f3",
  "created_at": 1457339632000,
  "version": "2.9",
  "duration_changes": "[{\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.11665607616305351, \"head\": 0.0029378049075603485}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.02517334371805191, \"head\": 0.0028356127440929413}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.063577551394701, \"head\": 0.0028503984212875366}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.002813149243593216, \"head\": 0.002881087362766266}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.003782905638217926, \"head\": 0.002887461334466934}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.002855859696865082, \"head\": 0.002848435193300247}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0028063692152500153, \"head\": 0.00289023295044899}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0029446035623550415, \"head\": 0.0028201304376125336}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0028643161058425903, \"head\": 0.00287073478102684}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0029539428651332855, \"head\": 0.002885177731513977}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0029580816626548767, \"head\": 0.0028597265481948853}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.049107011407613754, \"head\": 0.0029344074428081512}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0029175132513046265, \"head\": 0.0028128810226917267}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0029443465173244476, \"head\": 0.002856779843568802}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.002883646637201309, \"head\": 0.002848677337169647}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.002878144383430481, \"head\": 0.0029375851154327393}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.002894412726163864, \"head\": 0.002820245921611786}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0028419233858585358, \"head\": 0.0028534457087516785}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.002868063747882843, \"head\": 0.00293109193444252}}, {\"tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]\": {\"base\": 0.0028850436210632324, \"head\": 0.002800155431032181}}]",
  "efficiency_test": [
    "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]"
  ],
  "patch_functions": "{\"requests/utils.py\": [\"super_len\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'requests/utils.py': ['super_len']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"requests/api.py\": [\"get\"], \"requests/hooks.py\": [\"default_hooks\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'requests/api.py': ['get'], 'requests/hooks.py': ['default_hooks']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.003
}