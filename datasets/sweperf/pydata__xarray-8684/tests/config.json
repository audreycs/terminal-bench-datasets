{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-8684",
  "patch": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 1b0f2f18efb..5c957dcb882 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -28,10 +28,13 @@ New Features\n   By `Mathias Hauser <https://github.com/mathause>`_.\n - Add :py:meth:`NamedArray.expand_dims`, :py:meth:`NamedArray.permute_dims` and :py:meth:`NamedArray.broadcast_to`\n   (:pull:`8380`) By `Anderson Banihirwe <https://github.com/andersy005>`_.\n-\n - Xarray now defers to flox's `heuristics <https://flox.readthedocs.io/en/latest/implementation.html#heuristics>`_\n   to set default `method` for groupby problems. This only applies to ``flox>=0.9``.\n   By `Deepak Cherian <https://github.com/dcherian>`_.\n+- All `quantile` methods (e.g. :py:meth:`DataArray.quantile`) now use `numbagg`\n+  for the calculation of nanquantiles (i.e., `skipna=True`) if it is installed.\n+  This is currently limited to the linear interpolation method (`method='linear'`).\n+  (:issue:`7377`, :pull:`8684`) By `Marco Wolsza <https://github.com/maawoo>`_.\n \n Breaking changes\n ~~~~~~~~~~~~~~~~\ndiff --git a/xarray/core/nputils.py b/xarray/core/nputils.py\nindex 0151d715f6f..84642d09f18 100644\n--- a/xarray/core/nputils.py\n+++ b/xarray/core/nputils.py\n@@ -195,6 +195,14 @@ def f(values, axis=None, **kwargs):\n             and values.dtype.kind in \"uifc\"\n             # and values.dtype.isnative\n             and (dtype is None or np.dtype(dtype) == values.dtype)\n+            # numbagg.nanquantile only available after 0.8.0 and with linear method\n+            and (\n+                name != \"nanquantile\"\n+                or (\n+                    pycompat.mod_version(\"numbagg\") >= Version(\"0.8.0\")\n+                    and kwargs.get(\"method\", \"linear\") == \"linear\"\n+                )\n+            )\n         ):\n             import numbagg\n \n@@ -206,6 +214,9 @@ def f(values, axis=None, **kwargs):\n                 # to ddof=1 above.\n                 if pycompat.mod_version(\"numbagg\") < Version(\"0.7.0\"):\n                     kwargs.pop(\"ddof\", None)\n+                if name == \"nanquantile\":\n+                    kwargs[\"quantiles\"] = kwargs.pop(\"q\")\n+                    kwargs.pop(\"method\", None)\n                 return nba_func(values, axis=axis, **kwargs)\n         if (\n             _BOTTLENECK_AVAILABLE\n@@ -285,3 +296,4 @@ def least_squares(lhs, rhs, rcond=None, skipna=False):\n nancumprod = _create_method(\"nancumprod\")\n nanargmin = _create_method(\"nanargmin\")\n nanargmax = _create_method(\"nanargmax\")\n+nanquantile = _create_method(\"nanquantile\")\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex a39981bb8fc..6b07fcd44a4 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1992,7 +1992,7 @@ def quantile(\n             method = interpolation\n \n         if skipna or (skipna is None and self.dtype.kind in \"cfO\"):\n-            _quantile_func = np.nanquantile\n+            _quantile_func = nputils.nanquantile\n         else:\n             _quantile_func = np.quantile\n \n",
  "test_patch": "diff --git a/xarray/tests/conftest.py b/xarray/tests/conftest.py\nindex 9c10bd6d18a..7c30759e499 100644\n--- a/xarray/tests/conftest.py\n+++ b/xarray/tests/conftest.py\n@@ -14,9 +14,11 @@ def backend(request):\n     return request.param\n \n \n-@pytest.fixture(params=[\"numbagg\", \"bottleneck\"])\n+@pytest.fixture(params=[\"numbagg\", \"bottleneck\", None])\n def compute_backend(request):\n-    if request.param == \"bottleneck\":\n+    if request.param is None:\n+        options = dict(use_bottleneck=False, use_numbagg=False)\n+    elif request.param == \"bottleneck\":\n         options = dict(use_bottleneck=True, use_numbagg=False)\n     elif request.param == \"numbagg\":\n         options = dict(use_bottleneck=False, use_numbagg=True)\ndiff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 4b279745d16..38d57c393c2 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2888,12 +2888,13 @@ def test_reduce_out(self) -> None:\n         with pytest.raises(TypeError):\n             orig.mean(out=np.ones(orig.shape))\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\"skipna\", [True, False, None])\n     @pytest.mark.parametrize(\"q\", [0.25, [0.50], [0.25, 0.75]])\n     @pytest.mark.parametrize(\n         \"axis, dim\", zip([None, 0, [0], [0, 1]], [None, \"x\", [\"x\"], [\"x\", \"y\"]])\n     )\n-    def test_quantile(self, q, axis, dim, skipna) -> None:\n+    def test_quantile(self, q, axis, dim, skipna, compute_backend) -> None:\n         va = self.va.copy(deep=True)\n         va[0, 0] = np.nan\n \ndiff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cc6d583cdf6..d370d523757 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -5612,9 +5612,10 @@ def test_reduce_keepdims(self) -> None:\n         )\n         assert_identical(expected, actual)\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\"skipna\", [True, False, None])\n     @pytest.mark.parametrize(\"q\", [0.25, [0.50], [0.25, 0.75]])\n-    def test_quantile(self, q, skipna) -> None:\n+    def test_quantile(self, q, skipna, compute_backend) -> None:\n         ds = create_test_data(seed=123)\n         ds.var1.data[0, 0] = np.nan\n \n@@ -5635,8 +5636,9 @@ def test_quantile(self, q, skipna) -> None:\n         assert \"dim3\" in ds_quantile.dims\n         assert all(d not in ds_quantile.dims for d in dim)\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\"skipna\", [True, False])\n-    def test_quantile_skipna(self, skipna) -> None:\n+    def test_quantile_skipna(self, skipna, compute_backend) -> None:\n         q = 0.1\n         dim = \"time\"\n         ds = Dataset({\"a\": ([dim], np.arange(0, 11))})\ndiff --git a/xarray/tests/test_units.py b/xarray/tests/test_units.py\nindex 0bd454866c3..f2a036f02b7 100644\n--- a/xarray/tests/test_units.py\n+++ b/xarray/tests/test_units.py\n@@ -2014,6 +2014,7 @@ def test_squeeze(self, dim, dtype):\n         assert_units_equal(expected, actual)\n         assert_identical(expected, actual)\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\n         \"func\",\n         (\n@@ -2035,7 +2036,7 @@ def test_squeeze(self, dim, dtype):\n         ),\n         ids=repr,\n     )\n-    def test_computation(self, func, dtype):\n+    def test_computation(self, func, dtype, compute_backend):\n         base_unit = unit_registry.m\n         array = np.linspace(0, 5, 5 * 10).reshape(5, 10).astype(dtype) * base_unit\n         variable = xr.Variable((\"x\", \"y\"), array)\n@@ -3767,6 +3768,7 @@ def test_differentiate_integrate(self, func, variant, dtype):\n         assert_units_equal(expected, actual)\n         assert_identical(expected, actual)\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\n         \"variant\",\n         (\n@@ -3787,7 +3789,7 @@ def test_differentiate_integrate(self, func, variant, dtype):\n         ),\n         ids=repr,\n     )\n-    def test_computation(self, func, variant, dtype):\n+    def test_computation(self, func, variant, dtype, compute_backend):\n         unit = unit_registry.m\n \n         variants = {\n@@ -3893,6 +3895,7 @@ def test_resample(self, dtype):\n         assert_units_equal(expected, actual)\n         assert_identical(expected, actual)\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\n         \"variant\",\n         (\n@@ -3913,7 +3916,7 @@ def test_resample(self, dtype):\n         ),\n         ids=repr,\n     )\n-    def test_grouped_operations(self, func, variant, dtype):\n+    def test_grouped_operations(self, func, variant, dtype, compute_backend):\n         unit = unit_registry.m\n \n         variants = {\n@@ -5250,6 +5253,7 @@ def test_interp_reindex_like_indexing(self, func, unit, error, dtype):\n         assert_units_equal(expected, actual)\n         assert_equal(expected, actual)\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\n         \"func\",\n         (\n@@ -5272,7 +5276,7 @@ def test_interp_reindex_like_indexing(self, func, unit, error, dtype):\n             \"coords\",\n         ),\n     )\n-    def test_computation(self, func, variant, dtype):\n+    def test_computation(self, func, variant, dtype, compute_backend):\n         variants = {\n             \"data\": ((unit_registry.degK, unit_registry.Pa), 1, 1),\n             \"dims\": ((1, 1), unit_registry.m, 1),\n@@ -5404,6 +5408,7 @@ def test_resample(self, variant, dtype):\n         assert_units_equal(expected, actual)\n         assert_equal(expected, actual)\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\n         \"func\",\n         (\n@@ -5425,7 +5430,7 @@ def test_resample(self, variant, dtype):\n             \"coords\",\n         ),\n     )\n-    def test_grouped_operations(self, func, variant, dtype):\n+    def test_grouped_operations(self, func, variant, dtype, compute_backend):\n         variants = {\n             \"data\": ((unit_registry.degK, unit_registry.Pa), 1, 1),\n             \"dims\": ((1, 1), unit_registry.m, 1),\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex fb083586415..2ce76c68103 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -1842,13 +1842,15 @@ def test_quantile_chunked_dim_error(self):\n         with pytest.raises(ValueError, match=r\"consists of multiple chunks\"):\n             v.quantile(0.5, dim=\"x\")\n \n+    @pytest.mark.parametrize(\"compute_backend\", [\"numbagg\", None], indirect=True)\n     @pytest.mark.parametrize(\"q\", [-0.1, 1.1, [2], [0.25, 2]])\n-    def test_quantile_out_of_bounds(self, q):\n+    def test_quantile_out_of_bounds(self, q, compute_backend):\n         v = Variable([\"x\", \"y\"], self.d)\n \n         # escape special characters\n         with pytest.raises(\n-            ValueError, match=r\"Quantiles must be in the range \\[0, 1\\]\"\n+            ValueError,\n+            match=r\"(Q|q)uantiles must be in the range \\[0, 1\\]\",\n         ):\n             v.quantile(q, dim=\"x\")\n \n",
  "base_commit": "f33a632bf87ec29dd9346f9b01ad4eec2194f72a",
  "head_commit": "18ef827afd0f4b35a014ab987ca559eddece98bb",
  "created_at": 1706641195000,
  "version": "2023.07",
  "duration_changes": "[{\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014151439070701599, \"head\": 0.01416817307472229}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012515496462583542, \"head\": 0.012493632733821869}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.18918084353208542, \"head\": 0.07808772474527359}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.025778837502002716, \"head\": 0.0254100002348423}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.012727994471788406, \"head\": 0.012717824429273605}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.007002830505371094, \"head\": 0.007114972919225693}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.9958375506103039, \"head\": 1.010731991380453}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.06008625775575638, \"head\": 0.06003155559301376}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013857528567314148, \"head\": 0.014040019363164902}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04623108729720116, \"head\": 0.04640477895736694}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.0196613110601902, \"head\": 0.018861830234527588}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.031086556613445282, \"head\": 0.031191304326057434}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.0271456241607666, \"head\": 0.025577794760465622}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.027835864573717117, \"head\": 0.025905176997184753}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.025747336447238922, \"head\": 0.024251285940408707}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.02461422234773636, \"head\": 0.023931242525577545}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.012263674288988113, \"head\": 0.011469617486000061}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.028396017849445343, \"head\": 0.026020318269729614}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.040348343551158905, \"head\": 0.03833836689591408}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.026088185608386993, \"head\": 0.02482324093580246}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015572130680084229, \"head\": 0.015478577464818954}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.037359584122896194, \"head\": 0.03712381049990654}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.032419390976428986, \"head\": 0.032883238047361374}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007749304175376892, \"head\": 0.007828447967767715}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.031094852834939957, \"head\": 0.0318637490272522}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.01451180875301361, \"head\": 0.014248784631490707}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011867035180330276, \"head\": 0.012048255652189255}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.017670180648565292, \"head\": 0.014174513518810272}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.01428244635462761, \"head\": 0.012454569339752197}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.08346827700734138, \"head\": 0.013704311102628708}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.10424584522843361, \"head\": 0.024969521909952164}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.013758964836597443, \"head\": 0.01354467123746872}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.007445111870765686, \"head\": 0.008244391530752182}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.9421868249773979, \"head\": 1.1049998067319393}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05758008733391762, \"head\": 0.06068607419729233}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.0135795958340168, \"head\": 0.014692779630422592}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04596297815442085, \"head\": 0.050071198493242264}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.018405970185995102, \"head\": 0.02040494978427887}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.032206445932388306, \"head\": 0.03362887725234032}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.02548391744494438, \"head\": 0.03008946031332016}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.026450209319591522, \"head\": 0.027157224714756012}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.024683877825737, \"head\": 0.025894146412611008}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.02323516458272934, \"head\": 0.025265228003263474}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011220905929803848, \"head\": 0.01208406314253807}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.025950606912374496, \"head\": 0.027152229100465775}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03741201013326645, \"head\": 0.04286208003759384}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.02458437904715538, \"head\": 0.027289044111967087}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015302930027246475, \"head\": 0.01669132709503174}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.037855181843042374, \"head\": 0.03867275267839432}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03197392448782921, \"head\": 0.03388644754886627}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007678009569644928, \"head\": 0.008018840104341507}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.03146824240684509, \"head\": 0.032747186720371246}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.014828260987997055, \"head\": 0.01514086127281189}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011969290673732758, \"head\": 0.012628909200429916}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014036096632480621, \"head\": 0.014117706567049026}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012488435953855515, \"head\": 0.012738466262817383}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.12385004386305809, \"head\": 0.11050800234079361}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.026579439640045166, \"head\": 0.026385467499494553}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.0124763622879982, \"head\": 0.012864246964454651}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.0068759918212890625, \"head\": 0.006940580904483795}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.9524516277015209, \"head\": 0.9862891361117363}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05724474415183067, \"head\": 0.05722389742732048}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.014926634728908539, \"head\": 0.013378370553255081}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04756984859704971, \"head\": 0.04525943472981453}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.018328126519918442, \"head\": 0.01798102632164955}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.03813653439283371, \"head\": 0.02914833277463913}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.03526923432946205, \"head\": 0.02500169351696968}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.028095941990613937, \"head\": 0.024189837276935577}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.027133602648973465, \"head\": 0.023520857095718384}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.024418547749519348, \"head\": 0.02323915809392929}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.0113692507147789, \"head\": 0.011167798191308975}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.025412674993276596, \"head\": 0.025243960320949554}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.04262430965900421, \"head\": 0.036628179252147675}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.0244709774851799, \"head\": 0.02424810826778412}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.01516309380531311, \"head\": 0.015217464417219162}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.04237052798271179, \"head\": 0.03563491255044937}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03178351745009422, \"head\": 0.03170647844672203}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007310681045055389, \"head\": 0.007468998432159424}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.02957085520029068, \"head\": 0.029978152364492416}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.015157420188188553, \"head\": 0.013962548226118088}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.01223081722855568, \"head\": 0.011890709400177002}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014531496912240982, \"head\": 0.015177503228187561}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.01262151449918747, \"head\": 0.016865842044353485}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.01053791493177414, \"head\": 0.09064819663763046}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.025436483323574066, \"head\": 0.02745794504880905}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.012703508138656616, \"head\": 0.013296343386173248}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.007044218480587006, \"head\": 0.007207594811916351}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0102960839867592, \"head\": 0.9861192107200623}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05890505760908127, \"head\": 0.058549344539642334}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013461895287036896, \"head\": 0.014186296612024307}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04811733216047287, \"head\": 0.05400184541940689}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.018154408782720566, \"head\": 0.01871197298169136}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.031518418341875076, \"head\": 0.032457321882247925}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.026769619435071945, \"head\": 0.03057403489947319}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.02692997083067894, \"head\": 0.03234010189771652}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.02356259897351265, \"head\": 0.0306352861225605}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.02348744496703148, \"head\": 0.025612153112888336}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.0115148164331913, \"head\": 0.011955905705690384}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.026139885187149048, \"head\": 0.03401762992143631}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.037432778626680374, \"head\": 0.04012974351644516}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.024680960923433304, \"head\": 0.02584175392985344}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.018074557185173035, \"head\": 0.016067203134298325}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03982831537723541, \"head\": 0.042103394865989685}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.032419461756944656, \"head\": 0.03759264945983887}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007287934422492981, \"head\": 0.008817791938781738}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.032653313130140305, \"head\": 0.03355222940444946}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.01391075924038887, \"head\": 0.01424439623951912}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011793002486228943, \"head\": 0.011770844459533691}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.01428443193435669, \"head\": 0.014329876750707626}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.01279284805059433, \"head\": 0.013085585087537766}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.01129532977938652, \"head\": 0.10837214812636375}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.025988779962062836, \"head\": 0.027630586177110672}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.013023972511291504, \"head\": 0.013109441846609116}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.006984293460845947, \"head\": 0.007161267101764679}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0132340043783188, \"head\": 1.0587392039597034}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.058413244783878326, \"head\": 0.05738658085465431}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013168904930353165, \"head\": 0.014305640012025833}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.045397236943244934, \"head\": 0.05279414355754852}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.019182972609996796, \"head\": 0.019003976136446}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.030407991260290146, \"head\": 0.03434103727340698}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.025006461888551712, \"head\": 0.025683213025331497}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.031260401010513306, \"head\": 0.025545354932546616}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.02406417205929756, \"head\": 0.024501703679561615}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.023649971932172775, \"head\": 0.023684829473495483}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011531483381986618, \"head\": 0.011389046907424927}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.02649099752306938, \"head\": 0.025367379188537598}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.038604360073804855, \"head\": 0.039178360253572464}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.024570271372795105, \"head\": 0.024645764380693436}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015472393482923508, \"head\": 0.017158254981040955}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.036542028188705444, \"head\": 0.03741542622447014}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03265095874667168, \"head\": 0.033499304205179214}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007544908672571182, \"head\": 0.0074621327221393585}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.030663758516311646, \"head\": 0.032035622745752335}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.013758953660726547, \"head\": 0.014130849391222}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.01157311350107193, \"head\": 0.012299340218305588}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.013905096799135208, \"head\": 0.014151837676763535}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012385409325361252, \"head\": 0.01216275617480278}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.10548591986298561, \"head\": 0.011344652622938156}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.03659142926335335, \"head\": 0.027299027889966965}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.019880715757608414, \"head\": 0.01354348286986351}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.011357694864273071, \"head\": 0.007349740713834763}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0220615454018116, \"head\": 1.0774873159825802}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05836348608136177, \"head\": 0.07823877409100533}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013569258153438568, \"head\": 0.014612454921007156}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.05251636356115341, \"head\": 0.05729588493704796}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.0184297077357769, \"head\": 0.024049419909715652}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.031098611652851105, \"head\": 0.03604000806808472}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.029030539095401764, \"head\": 0.026050806045532227}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.025731366127729416, \"head\": 0.034763481467962265}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.02429201826453209, \"head\": 0.02508692443370819}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.026947427541017532, \"head\": 0.02455408126115799}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.012548994272947311, \"head\": 0.019334811717271805}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.026703812181949615, \"head\": 0.026197399944067}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03868767246603966, \"head\": 0.03911071643233299}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.028044577687978745, \"head\": 0.028021320700645447}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015721626579761505, \"head\": 0.01587393507361412}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03698650375008583, \"head\": 0.03790454566478729}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.032870419323444366, \"head\": 0.03261302039027214}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.0076674968004226685, \"head\": 0.008113272488117218}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.03157202899456024, \"head\": 0.0321393646299839}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.014205340296030045, \"head\": 0.014165282249450684}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.01200273260474205, \"head\": 0.011794399470090866}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.015237987041473389, \"head\": 0.014031186699867249}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012128818780183792, \"head\": 0.012421533465385437}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.08457548916339874, \"head\": 0.012349437922239304}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.10282234475016594, \"head\": 0.02698417380452156}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.013210132718086243, \"head\": 0.013096876442432404}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.0069274865090847015, \"head\": 0.007223423570394516}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.031674426048994, \"head\": 1.026973832398653}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.060393404215574265, \"head\": 0.058873679488897324}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013392332941293716, \"head\": 0.013301532715559006}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04438498243689537, \"head\": 0.045992180705070496}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.017862949520349503, \"head\": 0.01833655685186386}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.028851982206106186, \"head\": 0.030079971998929977}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.0251007117331028, \"head\": 0.025312058627605438}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.0267309732735157, \"head\": 0.034288208931684494}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.024534743279218674, \"head\": 0.02363843470811844}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.0238262340426445, \"head\": 0.023443419486284256}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.01145058125257492, \"head\": 0.013048313558101654}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.025904912501573563, \"head\": 0.025576692074537277}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03988907113671303, \"head\": 0.036938443779945374}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.0246528759598732, \"head\": 0.024790577590465546}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015443671494722366, \"head\": 0.01617574319243431}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03620079159736633, \"head\": 0.03652093932032585}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03173037990927696, \"head\": 0.031710606068372726}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007327597588300705, \"head\": 0.007334310561418533}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.029995623975992203, \"head\": 0.03390413150191307}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.013882603496313095, \"head\": 0.013871748000383377}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.012099824845790863, \"head\": 0.01180490106344223}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014873690903186798, \"head\": 0.016325123608112335}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.01237250491976738, \"head\": 0.013458605855703354}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.09972461685538292, \"head\": 0.07128420099616051}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.02644038200378418, \"head\": 0.10835647583007812}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.014013994485139847, \"head\": 0.013249773532152176}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.00721600279211998, \"head\": 0.007049795240163803}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.001402035355568, \"head\": 1.0694258958101273}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05906980484724045, \"head\": 0.057608213275671005}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013978473842144012, \"head\": 0.014389846473932266}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04626788944005966, \"head\": 0.047752585262060165}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.019327715039253235, \"head\": 0.019275467842817307}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.03177298977971077, \"head\": 0.031366728246212006}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.025595098733901978, \"head\": 0.025943774729967117}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.02562708780169487, \"head\": 0.0306534543633461}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.025289300829172134, \"head\": 0.023979421705007553}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.024106048047542572, \"head\": 0.02608896791934967}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011561702936887741, \"head\": 0.011756490916013718}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.026094116270542145, \"head\": 0.025980893522500992}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.039307255297899246, \"head\": 0.039626333862543106}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.025332238525152206, \"head\": 0.024890076369047165}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015490401536226273, \"head\": 0.015263393521308899}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03660830110311508, \"head\": 0.03575119748711586}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.032272256910800934, \"head\": 0.032105859369039536}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007564704865217209, \"head\": 0.00782029703259468}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.0314474031329155, \"head\": 0.030347947031259537}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.014033567160367966, \"head\": 0.014059994369745255}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011676639318466187, \"head\": 0.01178441196680069}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014433752745389938, \"head\": 0.015099544078111649}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012268058955669403, \"head\": 0.012456700205802917}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.11324327811598778, \"head\": 0.11547403037548065}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.029616322368383408, \"head\": 0.02780074253678322}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.013213958591222763, \"head\": 0.013659227639436722}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.00717751681804657, \"head\": 0.007632523775100708}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.9687247984111309, \"head\": 1.0386274345219135}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05704156309366226, \"head\": 0.05705861374735832}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013761434704065323, \"head\": 0.013630915433168411}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04567159712314606, \"head\": 0.04629197344183922}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.018308155238628387, \"head\": 0.018007438629865646}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.041698772460222244, \"head\": 0.030529506504535675}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.02572191134095192, \"head\": 0.03066597878932953}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.02494833618402481, \"head\": 0.0259438157081604}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.027198415249586105, \"head\": 0.023985721170902252}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.024213038384914398, \"head\": 0.026442933827638626}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011434201151132584, \"head\": 0.016957808285951614}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.025426533073186874, \"head\": 0.026778869330883026}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.039416518062353134, \"head\": 0.040509458631277084}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.025677844882011414, \"head\": 0.02887886017560959}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015495076775550842, \"head\": 0.016518358141183853}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.038259003311395645, \"head\": 0.0376063734292984}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03265068680047989, \"head\": 0.04729735851287842}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007536284625530243, \"head\": 0.008273430168628693}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.03070330247282982, \"head\": 0.031998589634895325}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.01396619901061058, \"head\": 0.014366831630468369}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011722862720489502, \"head\": 0.01354943960905075}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.015055891126394272, \"head\": 0.014264781028032303}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012923765927553177, \"head\": 0.012633897364139557}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.1580161303281784, \"head\": 0.11324810236692429}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.02613849937915802, \"head\": 0.029141481965780258}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.013283338397741318, \"head\": 0.014631621539592743}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.007040351629257202, \"head\": 0.007606562227010727}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.9724896475672722, \"head\": 1.0238358154892921}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.055676545947790146, \"head\": 0.07522816583514214}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013691406697034836, \"head\": 0.01375650241971016}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.045976243913173676, \"head\": 0.046629466116428375}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.0179479718208313, \"head\": 0.02423993870615959}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.03087298572063446, \"head\": 0.036816876381635666}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.02612454444169998, \"head\": 0.027705714106559753}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.02542297914624214, \"head\": 0.024371840059757233}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.02393188327550888, \"head\": 0.0230872742831707}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.023971784859895706, \"head\": 0.027896177023649216}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011338956654071808, \"head\": 0.011207636445760727}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.025544095784425735, \"head\": 0.025285009294748306}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03730570524930954, \"head\": 0.03773222118616104}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.02459794655442238, \"head\": 0.02593117207288742}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015264257788658142, \"head\": 0.015396714210510254}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03626250848174095, \"head\": 0.03649406507611275}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.0325770303606987, \"head\": 0.03468187898397446}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007663071155548096, \"head\": 0.008069027215242386}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.031565237790346146, \"head\": 0.03114500269293785}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.013892482966184616, \"head\": 0.014265812933444977}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.01172678917646408, \"head\": 0.012175120413303375}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.01435452327132225, \"head\": 0.014572039246559143}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.01270611584186554, \"head\": 0.012716297060251236}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.10787186771631241, \"head\": 0.12152522057294846}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.02889052778482437, \"head\": 0.02802693098783493}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.012567825615406036, \"head\": 0.014089956879615784}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.00693889707326889, \"head\": 0.007704496383666992}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.9674336016178131, \"head\": 1.0895539596676826}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05715573951601982, \"head\": 0.062424104660749435}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013839412480592728, \"head\": 0.014674615114927292}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04610669985413551, \"head\": 0.048266515135765076}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.018247436732053757, \"head\": 0.020656529814004898}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.030772898346185684, \"head\": 0.03443878889083862}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.025355089455842972, \"head\": 0.027203690260648727}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.024661004543304443, \"head\": 0.028830256313085556}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.02405324950814247, \"head\": 0.024601079523563385}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.02416893094778061, \"head\": 0.024664297699928284}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011537406593561172, \"head\": 0.011763613671064377}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.025911185890436172, \"head\": 0.026386238634586334}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03804095461964607, \"head\": 0.03887242078781128}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.02507450059056282, \"head\": 0.02497364580631256}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015768807381391525, \"head\": 0.016135986894369125}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.0360584557056427, \"head\": 0.03679916262626648}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03280350938439369, \"head\": 0.032494496554136276}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007293395698070526, \"head\": 0.007478192448616028}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.03148029372096062, \"head\": 0.032543327659368515}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.01398048922419548, \"head\": 0.013839375227689743}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011814095079898834, \"head\": 0.011796705424785614}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014018923044204712, \"head\": 0.014210246503353119}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.01233973354101181, \"head\": 0.012434229254722595}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.011101704090833664, \"head\": 0.12231462076306343}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.1089797131717205, \"head\": 0.0257546566426754}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.012870058417320251, \"head\": 0.012756910175085068}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.007153041660785675, \"head\": 0.006970483809709549}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0107671618461609, \"head\": 1.0105415768921375}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.058939334005117416, \"head\": 0.0668502226471901}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.014139808714389801, \"head\": 0.015168074518442154}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.045787736773490906, \"head\": 0.04767778515815735}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.027423828840255737, \"head\": 0.018464036285877228}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.03406045585870743, \"head\": 0.03240260109305382}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.026014987379312515, \"head\": 0.02764231339097023}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.029794897884130478, \"head\": 0.02564508095383644}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.026995405554771423, \"head\": 0.02377161756157875}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.02353515475988388, \"head\": 0.024013806134462357}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011213026940822601, \"head\": 0.01177234947681427}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.02706804871559143, \"head\": 0.026092924177646637}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03928850218653679, \"head\": 0.04188375174999237}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.024718381464481354, \"head\": 0.02796032652258873}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015575401484966278, \"head\": 0.015290141105651855}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.039433401077985764, \"head\": 0.0378529392182827}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03233032301068306, \"head\": 0.03326065093278885}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007546171545982361, \"head\": 0.007790379226207733}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.031660404056310654, \"head\": 0.03054669126868248}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.014547314494848251, \"head\": 0.013761062175035477}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.012035753577947617, \"head\": 0.011528946459293365}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014223534613847733, \"head\": 0.015152044594287872}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012648053467273712, \"head\": 0.013075105845928192}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.10353947803378105, \"head\": 0.11005760356783867}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.08545488491654396, \"head\": 0.025985639542341232}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.01283976435661316, \"head\": 0.01289169117808342}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.007127400487661362, \"head\": 0.007084179669618607}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.9600524269044399, \"head\": 1.017096009105444}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.0590154193341732, \"head\": 0.06251676008105278}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.014524891972541809, \"head\": 0.014895617961883545}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.0543203167617321, \"head\": 0.06095969304442406}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.02469165250658989, \"head\": 0.024617571383714676}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.03222263976931572, \"head\": 0.04012579470872879}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.028372444212436676, \"head\": 0.031040214002132416}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.026219524443149567, \"head\": 0.025446005165576935}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.025204714387655258, \"head\": 0.028858136385679245}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.02565828710794449, \"head\": 0.026461858302354813}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.012228675186634064, \"head\": 0.011622466146945953}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.026445720344781876, \"head\": 0.026115968823432922}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.039587732404470444, \"head\": 0.044782426208257675}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.024816706776618958, \"head\": 0.02622080221772194}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015178944915533066, \"head\": 0.01571197435259819}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03583652898669243, \"head\": 0.039214927703142166}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03328809514641762, \"head\": 0.03337576240301132}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007651228457689285, \"head\": 0.007850892841815948}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.03045566752552986, \"head\": 0.03128938376903534}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.013874977827072144, \"head\": 0.014253836125135422}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011903844773769379, \"head\": 0.0119638592004776}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014253534376621246, \"head\": 0.013991821557283401}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012624811381101608, \"head\": 0.012765713036060333}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.1254146359860897, \"head\": 0.10106353834271431}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.026254799216985703, \"head\": 0.026798684149980545}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.013005916029214859, \"head\": 0.012832429260015488}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.007291853427886963, \"head\": 0.007070813328027725}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0126412510871887, \"head\": 0.9971861317753792}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05801251903176308, \"head\": 0.05746685713529587}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.014000404626131058, \"head\": 0.013863872736692429}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04665331915020943, \"head\": 0.04907834529876709}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.019260678440332413, \"head\": 0.01892809197306633}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.030895158648490906, \"head\": 0.04009775072336197}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.02873542532324791, \"head\": 0.02617323398590088}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.025147687643766403, \"head\": 0.02928968146443367}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.023500435054302216, \"head\": 0.02530369907617569}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.02918265387415886, \"head\": 0.023332539945840836}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011770974844694138, \"head\": 0.011271174997091293}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.025297045707702637, \"head\": 0.025137603282928467}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.037405386567115784, \"head\": 0.04016568139195442}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.025292370468378067, \"head\": 0.024733569473028183}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015705399215221405, \"head\": 0.015212737023830414}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03692936524748802, \"head\": 0.037982285022735596}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03237302601337433, \"head\": 0.032485831528902054}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007621098309755325, \"head\": 0.007425222545862198}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.030880369246006012, \"head\": 0.032726090401411057}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.013957805931568146, \"head\": 0.014714773744344711}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011791523545980453, \"head\": 0.011745188385248184}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014855198562145233, \"head\": 0.014501918107271194}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.01261112466454506, \"head\": 0.012647558003664017}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.18505799025297165, \"head\": 0.1966102011501789}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.037551071494817734, \"head\": 0.025428500026464462}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.01284906268119812, \"head\": 0.012974247336387634}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.00693628191947937, \"head\": 0.006970401853322983}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.9842391945421696, \"head\": 1.0279980264604092}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05798474699258804, \"head\": 0.057341109961271286}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.014346297830343246, \"head\": 0.013612739741802216}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.048943255096673965, \"head\": 0.04788670316338539}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.019468609243631363, \"head\": 0.01740531250834465}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.031116530299186707, \"head\": 0.030232932418584824}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.026925433427095413, \"head\": 0.02590746432542801}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.027769360691308975, \"head\": 0.024914011359214783}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.031507398933172226, \"head\": 0.023199155926704407}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.026368170976638794, \"head\": 0.02318771556019783}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011364281177520752, \"head\": 0.013568494468927383}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.03251376003026962, \"head\": 0.028558645397424698}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03794348984956741, \"head\": 0.037857234477996826}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.024548109620809555, \"head\": 0.02503090351819992}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.01527971401810646, \"head\": 0.015569467097520828}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.039171505719423294, \"head\": 0.043975524604320526}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03215732052922249, \"head\": 0.03594299778342247}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007418811321258545, \"head\": 0.00829901173710823}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.03434683755040169, \"head\": 0.032111406326293945}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.013713445514440536, \"head\": 0.014636971056461334}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011595692485570908, \"head\": 0.012099072337150574}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014734357595443726, \"head\": 0.014454640448093414}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012332733720541, \"head\": 0.012491375207901001}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.014129936695098877, \"head\": 0.17762251198291779}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.025157976895570755, \"head\": 0.026792094111442566}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.012665927410125732, \"head\": 0.013070765882730484}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.006759900599718094, \"head\": 0.007115088403224945}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 0.991284191608429, \"head\": 1.034585926681757}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.059719108045101166, \"head\": 0.0576719231903553}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.01365135982632637, \"head\": 0.01455695927143097}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04628913104534149, \"head\": 0.04795299842953682}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.0187394879758358, \"head\": 0.018894989043474197}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.031127411872148514, \"head\": 0.033330388367176056}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.025434888899326324, \"head\": 0.02668447047472}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.025286991149187088, \"head\": 0.02701055258512497}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.024709634482860565, \"head\": 0.024763930588960648}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.023772839456796646, \"head\": 0.023921620100736618}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011574514210224152, \"head\": 0.011454015970230103}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.025787681341171265, \"head\": 0.030084870755672455}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03863660618662834, \"head\": 0.04070265218615532}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.02449573203921318, \"head\": 0.025398951023817062}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015314485877752304, \"head\": 0.015690430998802185}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.038613881915807724, \"head\": 0.0369919016957283}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03243718668818474, \"head\": 0.03331580385565758}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007293146103620529, \"head\": 0.008153323084115982}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.030675161629915237, \"head\": 0.03199540451169014}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.01423727348446846, \"head\": 0.014582600444555283}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011704929172992706, \"head\": 0.012215375900268555}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.01420728862285614, \"head\": 0.014550454914569855}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.01245523989200592, \"head\": 0.012913227081298828}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.19660674780607224, \"head\": 0.013230077922344208}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.027544986456632614, \"head\": 0.11346572265028954}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.012884467840194702, \"head\": 0.013547595590353012}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.0071389339864254, \"head\": 0.007171623408794403}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0051023662090302, \"head\": 0.9909780248999596}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.060350868850946426, \"head\": 0.06038828566670418}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.013179704546928406, \"head\": 0.014388691633939743}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04860290512442589, \"head\": 0.04619089141488075}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.0187373049557209, \"head\": 0.018230125308036804}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.02860572189092636, \"head\": 0.032700687646865845}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.02510412409901619, \"head\": 0.026164360344409943}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.027283553034067154, \"head\": 0.02548857405781746}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.02476496994495392, \"head\": 0.029160209000110626}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.024504899978637695, \"head\": 0.025872118771076202}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.01192554458975792, \"head\": 0.01194697991013527}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.02632525935769081, \"head\": 0.02660229429602623}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.04132116958498955, \"head\": 0.03981303423643112}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.025456953793764114, \"head\": 0.025653809309005737}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015748612582683563, \"head\": 0.015510838478803635}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03941311687231064, \"head\": 0.03805765509605408}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.032614078372716904, \"head\": 0.03325452655553818}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007520690560340881, \"head\": 0.009147070348262787}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.03873429819941521, \"head\": 0.03297806903719902}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.014754574745893478, \"head\": 0.015675466507673264}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011829197406768799, \"head\": 0.012138590216636658}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.013922397047281265, \"head\": 0.014217235147953033}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012483213096857071, \"head\": 0.013069681823253632}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.011202104389667511, \"head\": 0.01689009740948677}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.03383390232920647, \"head\": 0.025249093770980835}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.013576369732618332, \"head\": 0.012394823133945465}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.00727115198969841, \"head\": 0.0069602057337760925}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0227586664259434, \"head\": 0.976755827665329}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.058388955891132355, \"head\": 0.05960027128458023}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.014393359422683716, \"head\": 0.01375780999660492}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.04686656966805458, \"head\": 0.04561148211359978}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.019059468060731888, \"head\": 0.021846305578947067}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.03268146514892578, \"head\": 0.03114958107471466}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.025308892130851746, \"head\": 0.025527838617563248}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.025247149169445038, \"head\": 0.028148125857114792}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.024663861840963364, \"head\": 0.027226626873016357}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.02445754036307335, \"head\": 0.02397359535098076}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.013828575611114502, \"head\": 0.011468518525362015}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.026773102581501007, \"head\": 0.025942571461200714}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.03946560248732567, \"head\": 0.038143862038850784}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.025021661072969437, \"head\": 0.024720892310142517}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.015311986207962036, \"head\": 0.0156736820936203}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.042034633457660675, \"head\": 0.03733907267451286}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.033100858330726624, \"head\": 0.03286568447947502}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.00814342126250267, \"head\": 0.00778898224234581}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.0324786975979805, \"head\": 0.03608473017811775}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.014245238155126572, \"head\": 0.014186572283506393}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011855315417051315, \"head\": 0.011811815202236176}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.013991173356771469, \"head\": 0.014417458325624466}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012440353631973267, \"head\": 0.012694552540779114}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.20139749720692635, \"head\": 0.18751539662480354}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.03090457245707512, \"head\": 0.02824511006474495}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.012492150068283081, \"head\": 0.01299285888671875}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.006969273090362549, \"head\": 0.007113073021173477}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0758214220404625, \"head\": 1.0161421857774258}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.057923972606658936, \"head\": 0.056585196405649185}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.015522748231887817, \"head\": 0.0140950046479702}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.046093255281448364, \"head\": 0.04496084898710251}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.02132822573184967, \"head\": 0.017355594784021378}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.04038189724087715, \"head\": 0.02902793139219284}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.026596222072839737, \"head\": 0.025343425571918488}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.034962963312864304, \"head\": 0.025397244840860367}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.025299202650785446, \"head\": 0.024380281567573547}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.023885756731033325, \"head\": 0.023000475019216537}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.011422175914049149, \"head\": 0.011113077402114868}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.02923094481229782, \"head\": 0.02540329471230507}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.039428502321243286, \"head\": 0.03763816878199577}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.02467692270874977, \"head\": 0.024786513298749924}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.018910039216279984, \"head\": 0.015314314514398575}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.03821427747607231, \"head\": 0.0365590900182724}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03229695186018944, \"head\": 0.03226866200566292}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.007280368357896805, \"head\": 0.007510218769311905}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.039624642580747604, \"head\": 0.030545305460691452}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.013724736869335175, \"head\": 0.015864603221416473}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.011607639491558075, \"head\": 0.011622082442045212}}, {\"xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]\": {\"base\": 0.014941129833459854, \"head\": 0.0179082453250885}, \"xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]\": {\"base\": 0.012750636786222458, \"head\": 0.01353050023317337}, \"xarray/tests/test_computation.py::test_cov[None-0-0]\": {\"base\": 0.10309567302465439, \"head\": 0.08656049519777298}, \"xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]\": {\"base\": 0.027862966060638428, \"head\": 0.024835027754306793}, \"xarray/tests/test_computation.py::test_vectorize_dask\": {\"base\": 0.018891334533691406, \"head\": 0.012523841112852097}, \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\": {\"base\": 0.00872870534658432, \"head\": 0.006965775042772293}, \"xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]\": {\"base\": 1.0264941602945328, \"head\": 0.9725283682346344}, \"xarray/tests/test_dataset.py::test_clip[1-dask]\": {\"base\": 0.05829639360308647, \"head\": 0.05790448561310768}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]\": {\"base\": 0.01392722874879837, \"head\": 0.013351697474718094}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]\": {\"base\": 0.046691689640283585, \"head\": 0.0445404089987278}, \"xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]\": {\"base\": 0.018271498382091522, \"head\": 0.01800171658396721}, \"xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]\": {\"base\": 0.029413778334856033, \"head\": 0.032217055559158325}, \"xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]\": {\"base\": 0.027242228388786316, \"head\": 0.025003544986248016}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]\": {\"base\": 0.02808043360710144, \"head\": 0.02389433979988098}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]\": {\"base\": 0.025154590606689453, \"head\": 0.0270439013838768}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]\": {\"base\": 0.025373533368110657, \"head\": 0.023841068148612976}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]\": {\"base\": 0.012275032699108124, \"head\": 0.011265359818935394}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]\": {\"base\": 0.026552241295576096, \"head\": 0.02522365376353264}, \"xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]\": {\"base\": 0.04037700966000557, \"head\": 0.03738081827759743}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]\": {\"base\": 0.026023346930742264, \"head\": 0.025140799582004547}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]\": {\"base\": 0.01664796471595764, \"head\": 0.0153866708278656}, \"xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]\": {\"base\": 0.04070945084095001, \"head\": 0.03541891649365425}, \"xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]\": {\"base\": 0.03424002602696419, \"head\": 0.03378540650010109}, \"xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs\": {\"base\": 0.008129924535751343, \"head\": 0.007635477930307388}, \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\": {\"base\": 0.031232770532369614, \"head\": 0.030382685363292694}, \"xarray/tests/test_options.py::TestAttrRetention::test_display_style_html\": {\"base\": 0.015697848051786423, \"head\": 0.013922929763793945}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]\": {\"base\": 0.012187406420707703, \"head\": 0.01184362918138504}}]",
  "efficiency_test": [
    "xarray/tests/test_backends_api.py::TestPreferredChunks::test_join_chunks[shape6-pref_chunks6-req_chunks6]",
    "xarray/tests/test_backends_api.py::TestPreferredChunks::test_split_chunks[shape2-pref_chunks2-req_chunks2]",
    "xarray/tests/test_computation.py::test_cov[None-0-0]",
    "xarray/tests/test_computation.py::test_polyfit_polyval_integration[1D-timedelta-dask]",
    "xarray/tests/test_computation.py::test_vectorize_dask",
    "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack",
    "xarray/tests/test_dask.py::test_map_blocks_mixed_type_inputs[obj1]",
    "xarray/tests/test_dataset.py::test_clip[1-dask]",
    "xarray/tests/test_duck_array_ops.py::test_argmin_max[x-False-min-True-False-float32-1]",
    "xarray/tests/test_duck_array_ops.py::test_argmin_max[x-True-min-True-True-str-2]",
    "xarray/tests/test_duck_array_ops.py::test_argmin_max[y-True-max-True-False-bool-2]",
    "xarray/tests/test_duck_array_ops.py::test_dask_gradient[2-0]",
    "xarray/tests/test_duck_array_ops.py::test_datetime_to_numeric_datetime64[True]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-bool-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-prod-True-float32-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[False-False-x-sum-True-int-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[False-True-None-sum-True-int-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[None-False-None-sum-True-float32-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[None-True-x-sum-True-float32-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[True-False-x-sum-True-bool-1]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[True-True-None-prod-True-int-1]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[True-True-x-prod-True-bool-2]",
    "xarray/tests/test_duck_array_ops.py::test_min_count_specific[b-prod-True]",
    "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs",
    "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]",
    "xarray/tests/test_options.py::TestAttrRetention::test_display_style_html",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-min-1-1-False-2]"
  ],
  "patch_functions": "{\"xarray/core/nputils.py\": [\"_create_method\", \"_create_method.f\"], \"xarray/core/variable.py\": [\"Variable.quantile\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/core/nputils.py': ['_create_method', '_create_method.f'], 'xarray/core/variable.py': ['Variable.quantile']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/dataset.py\": [\"Dataset.stack\", \"Dataset.rolling\", \"Dataset.coords\", \"Dataset.attrs\", \"Dataset._repr_html_\", \"Dataset.interp\", \"Dataset.polyfit\", \"Dataset.compute\", \"Dataset.isel\", \"Dataset\", \"Dataset.chunk\", \"Dataset.data_vars\", \"Dataset.drop_vars\", \"Dataset.resample\", \"Dataset.sizes\", \"Dataset.variables\"], \"xarray/core/_aggregations.py\": [\"Dataset.min\", \"DataArray.max\", \"DataArray.prod\", \"Dataset.mean\", \"DataArray.min\", \"Dataset.max\", \"DataArray.sum\"], \"xarray/core/variable.py\": [\"Variable.transpose\", \"Variable.compute\", \"IndexVariable.chunk\", \"Variable.isel\", \"IndexVariable.isel\", \"Variable.stack\", \"concat\", \"Variable.reduce\", \"Variable\", \"Variable.chunk\", \"Variable.values\"], \"xarray/core/duck_array_ops.py\": [\"datetime_to_numeric\", \"reshape\", \"mean\", \"astype\", \"notnull\", \"where\", \"last\"], \"xarray/core/dataarray.py\": [\"DataArray.coords\", \"DataArray.variable\", \"DataArray.compute\", \"DataArray\", \"DataArray.polyfit\", \"DataArray.values\", \"DataArray.chunks\", \"DataArray.transpose\", \"DataArray.stack\", \"DataArray.reduce\", \"DataArray.rolling\", \"DataArray.to_series\", \"DataArray.drop_vars\", \"DataArray.dims\", \"DataArray.isel\", \"DataArray.chunk\", \"DataArray.xindexes\", \"DataArray.data\", \"DataArray.attrs\", \"DataArray.to_dataset\", \"DataArray.interp\", \"DataArray.ndim\"], \"xarray/core/rolling.py\": [\"DataArrayRolling.method\", \"DatasetRolling.reduce\", \"DataArrayRolling.reduce\", \"DatasetRolling.method\"], \"xarray/core/common.py\": [\"DataArray.where\", \"DataArray.notnull\", \"Dataset.clip\"], \"xarray/core/groupby.py\": [\"DatasetResample.last\"], \"xarray/core/options.py\": [\"set_options\"], \"xarray/core/computation.py\": [\"apply_ufunc\", \"cov\", \"polyval\"], \"xarray/core/indexing.py\": [\"BasicIndexer.tuple\", \"OuterIndexer.tuple\"], \"xarray/core/indexes.py\": [\"PandasIndex.isel\", \"stack\"], \"xarray/core/missing.py\": [\"interp\"], \"xarray/core/dtypes.py\": [\"maybe_promote\"], \"xarray/core/pycompat.py\": [\"array_type\"], \"xarray/core/parallel.py\": [\"map_blocks\"], \"xarray/core/concat.py\": [\"concat\"], \"xarray/core/merge.py\": [\"append\"], \"xarray/backends/api.py\": [\"open_dataset\"], \"xarray/util/deprecation_helpers.py\": [\"inner\"], \"xarray/core/alignment.py\": [\"broadcast\"], \"xarray/namedarray/core.py\": [\"Variable.reduce\"], \"xarray/core/daskmanager.py\": [\"DaskManager.compute\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/dataset.py': ['Dataset.stack', 'Dataset.rolling', 'Dataset.coords', 'Dataset.attrs', 'Dataset._repr_html_', 'Dataset.interp', 'Dataset.polyfit', 'Dataset.compute', 'Dataset.isel', 'Dataset', 'Dataset.chunk', 'Dataset.data_vars', 'Dataset.drop_vars', 'Dataset.resample', 'Dataset.sizes', 'Dataset.variables'], 'xarray/core/_aggregations.py': ['Dataset.min', 'DataArray.max', 'DataArray.prod', 'Dataset.mean', 'DataArray.min', 'Dataset.max', 'DataArray.sum'], 'xarray/core/variable.py': ['Variable.transpose', 'Variable.compute', 'IndexVariable.chunk', 'Variable.isel', 'IndexVariable.isel', 'Variable.stack', 'concat', 'Variable.reduce', 'Variable', 'Variable.chunk', 'Variable.values'], 'xarray/core/duck_array_ops.py': ['datetime_to_numeric', 'reshape', 'mean', 'astype', 'notnull', 'where', 'last'], 'xarray/core/dataarray.py': ['DataArray.coords', 'DataArray.variable', 'DataArray.compute', 'DataArray', 'DataArray.polyfit', 'DataArray.values', 'DataArray.chunks', 'DataArray.transpose', 'DataArray.stack', 'DataArray.reduce', 'DataArray.rolling', 'DataArray.to_series', 'DataArray.drop_vars', 'DataArray.dims', 'DataArray.isel', 'DataArray.chunk', 'DataArray.xindexes', 'DataArray.data', 'DataArray.attrs', 'DataArray.to_dataset', 'DataArray.interp', 'DataArray.ndim'], 'xarray/core/rolling.py': ['DataArrayRolling.method', 'DatasetRolling.reduce', 'DataArrayRolling.reduce', 'DatasetRolling.method'], 'xarray/core/common.py': ['DataArray.where', 'DataArray.notnull', 'Dataset.clip'], 'xarray/core/groupby.py': ['DatasetResample.last'], 'xarray/core/options.py': ['set_options'], 'xarray/core/computation.py': ['apply_ufunc', 'cov', 'polyval'], 'xarray/core/indexing.py': ['BasicIndexer.tuple', 'OuterIndexer.tuple'], 'xarray/core/indexes.py': ['PandasIndex.isel', 'stack'], 'xarray/core/missing.py': ['interp'], 'xarray/core/dtypes.py': ['maybe_promote'], 'xarray/core/pycompat.py': ['array_type'], 'xarray/core/parallel.py': ['map_blocks'], 'xarray/core/concat.py': ['concat'], 'xarray/core/merge.py': ['append'], 'xarray/backends/api.py': ['open_dataset'], 'xarray/util/deprecation_helpers.py': ['inner'], 'xarray/core/alignment.py': ['broadcast'], 'xarray/namedarray/core.py': ['Variable.reduce'], 'xarray/core/daskmanager.py': ['DaskManager.compute']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 3.7037037037037037e-05
}