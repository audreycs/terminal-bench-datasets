{
  "repo": "pydata/xarray",
  "instance_id": "pydata__xarray-9407",
  "patch": "diff --git a/xarray/backends/api.py b/xarray/backends/api.py\nindex 2c95a7b6bf3..9eb6d78b055 100644\n--- a/xarray/backends/api.py\n+++ b/xarray/backends/api.py\n@@ -167,7 +167,7 @@ def check_name(name: Hashable):\n         check_name(k)\n \n \n-def _validate_attrs(dataset, invalid_netcdf=False):\n+def _validate_attrs(dataset, engine, invalid_netcdf=False):\n     \"\"\"`attrs` must have a string key and a value which is either: a number,\n     a string, an ndarray, a list/tuple of numbers/strings, or a numpy.bool_.\n \n@@ -177,8 +177,8 @@ def _validate_attrs(dataset, invalid_netcdf=False):\n     `invalid_netcdf=True`.\n     \"\"\"\n \n-    valid_types = (str, Number, np.ndarray, np.number, list, tuple)\n-    if invalid_netcdf:\n+    valid_types = (str, Number, np.ndarray, np.number, list, tuple, bytes)\n+    if invalid_netcdf and engine == \"h5netcdf\":\n         valid_types += (np.bool_,)\n \n     def check_attr(name, value, valid_types):\n@@ -202,6 +202,23 @@ def check_attr(name, value, valid_types):\n                 f\"{', '.join([vtype.__name__ for vtype in valid_types])}\"\n             )\n \n+        if isinstance(value, bytes) and engine == \"h5netcdf\":\n+            try:\n+                value.decode(\"utf-8\")\n+            except UnicodeDecodeError as e:\n+                raise ValueError(\n+                    f\"Invalid value provided for attribute '{name!r}': {value!r}. \"\n+                    \"Only binary data derived from UTF-8 encoded strings is allowed \"\n+                    f\"for the '{engine}' engine. Consider using the 'netcdf4' engine.\"\n+                ) from e\n+\n+            if b\"\\x00\" in value:\n+                raise ValueError(\n+                    f\"Invalid value provided for attribute '{name!r}': {value!r}. \"\n+                    f\"Null characters are not permitted for the '{engine}' engine. \"\n+                    \"Consider using the 'netcdf4' engine.\"\n+                )\n+\n     # Check attrs on the dataset itself\n     for k, v in dataset.attrs.items():\n         check_attr(k, v, valid_types)\n@@ -1353,7 +1370,7 @@ def to_netcdf(\n \n     # validate Dataset keys, DataArray names, and attr keys/values\n     _validate_dataset_names(dataset)\n-    _validate_attrs(dataset, invalid_netcdf=invalid_netcdf and engine == \"h5netcdf\")\n+    _validate_attrs(dataset, engine, invalid_netcdf)\n \n     try:\n         store_open = WRITEABLE_STORES[engine]\n",
  "test_patch": "diff --git a/xarray/tests/conftest.py b/xarray/tests/conftest.py\nindex a32b0e08bea..85f968b19a6 100644\n--- a/xarray/tests/conftest.py\n+++ b/xarray/tests/conftest.py\n@@ -139,6 +139,26 @@ def d(request, backend, type) -> DataArray | Dataset:\n         raise ValueError\n \n \n+@pytest.fixture\n+def byte_attrs_dataset():\n+    \"\"\"For testing issue #9407\"\"\"\n+    null_byte = b\"\\x00\"\n+    other_bytes = bytes(range(1, 256))\n+    ds = Dataset({\"x\": 1}, coords={\"x_coord\": [1]})\n+    ds[\"x\"].attrs[\"null_byte\"] = null_byte\n+    ds[\"x\"].attrs[\"other_bytes\"] = other_bytes\n+\n+    expected = ds.copy()\n+    expected[\"x\"].attrs[\"null_byte\"] = \"\"\n+    expected[\"x\"].attrs[\"other_bytes\"] = other_bytes.decode(errors=\"replace\")\n+\n+    return {\n+        \"input\": ds,\n+        \"expected\": expected,\n+        \"h5netcdf_error\": r\"Invalid value provided for attribute .*: .*\\. Null characters .*\",\n+    }\n+\n+\n @pytest.fixture(scope=\"module\")\n def create_test_datatree():\n     \"\"\"\ndiff --git a/xarray/tests/test_backends.py b/xarray/tests/test_backends.py\nindex 94b90979ac3..2e906b2286d 100644\n--- a/xarray/tests/test_backends.py\n+++ b/xarray/tests/test_backends.py\n@@ -1404,6 +1404,13 @@ def test_refresh_from_disk(self) -> None:\n                     a.close()\n                     b.close()\n \n+    def test_byte_attrs(self, byte_attrs_dataset: dict[str, Any]) -> None:\n+        # test for issue #9407\n+        input = byte_attrs_dataset[\"input\"]\n+        expected = byte_attrs_dataset[\"expected\"]\n+        with self.roundtrip(input) as actual:\n+            assert_identical(actual, expected)\n+\n \n _counter = itertools.count()\n \n@@ -3861,6 +3868,10 @@ def test_decode_utf8_warning(self) -> None:\n                 assert ds.title == title\n                 assert \"attribute 'title' of h5netcdf object '/'\" in str(w[0].message)\n \n+    def test_byte_attrs(self, byte_attrs_dataset: dict[str, Any]) -> None:\n+        with pytest.raises(ValueError, match=byte_attrs_dataset[\"h5netcdf_error\"]):\n+            super().test_byte_attrs(byte_attrs_dataset)\n+\n \n @requires_h5netcdf\n @requires_netCDF4\n",
  "base_commit": "12d8cfa317b1a08748cb6a0a1b10a6efe3a7d3d2",
  "head_commit": "c2472ef01d7dd35cadd71c3bc3ed2a5fde271ff7",
  "created_at": 1724813530000,
  "version": "2024.05",
  "duration_changes": "[{\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.0472162626683712, \"head\": 0.05264359340071678}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.020755760371685028, \"head\": 0.021305400878190994}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.024661757051944733, \"head\": 0.028478875756263733}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7269815169274807, \"head\": 1.801308512687683}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 1.0102241821587086, \"head\": 0.8127185963094234}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.9840877801179886, \"head\": 0.9204805493354797}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.829867172986269, \"head\": 0.9025477804243565}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.2257155440747738, \"head\": 0.31098003685474396}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.173923745751381, \"head\": 1.1065583229064941}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6916958652436733, \"head\": 0.5004726313054562}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.04748084768652916, \"head\": 0.05054037645459175}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.02092849463224411, \"head\": 0.020192068070173264}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.0250236876308918, \"head\": 0.023594986647367477}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.8973637856543064, \"head\": 1.8179058395326138}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.7976588644087315, \"head\": 0.8052355088293552}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 1.0883985608816147, \"head\": 1.0951458141207695}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.8108781985938549, \"head\": 0.905016228556633}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.20346244797110558, \"head\": 0.29185500368475914}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.1905254647135735, \"head\": 1.0081601068377495}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.5115309171378613, \"head\": 0.5245533809065819}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.05075736343860626, \"head\": 0.047271065413951874}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.020765606313943863, \"head\": 0.0205991193652153}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.025303710252046585, \"head\": 0.023738358169794083}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7469422295689583, \"head\": 1.7355924546718597}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 1.0648732110857964, \"head\": 0.9031731374561787}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.9179749935865402, \"head\": 0.9928735978901386}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.8944533430039883, \"head\": 0.9187570288777351}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.20217778161168098, \"head\": 0.3736025467514992}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.1006298772990704, \"head\": 1.0949208848178387}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.5996443443000317, \"head\": 0.7011394649744034}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.04837922751903534, \"head\": 0.04750828817486763}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.020899929106235504, \"head\": 0.020705118775367737}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.024552781134843826, \"head\": 0.024607229977846146}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7304688952863216, \"head\": 1.719625286757946}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9010985568165779, \"head\": 0.7953057922422886}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.8983961492776871, \"head\": 0.9010592848062515}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.9018502086400986, \"head\": 0.9116407446563244}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.2955702133476734, \"head\": 0.3750138692557812}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 0.9132966883480549, \"head\": 1.0160600617527962}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.7839995920658112, \"head\": 0.49862415716052055}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.051851850003004074, \"head\": 0.04976554960012436}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.021013043820858, \"head\": 0.020693860948085785}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.02477359026670456, \"head\": 0.025055982172489166}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.720102146267891, \"head\": 1.8106288202106953}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9868223555386066, \"head\": 0.8199596777558327}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.8900497406721115, \"head\": 0.9544341154396534}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.9929056242108345, \"head\": 0.9227300994098186}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.29076501727104187, \"head\": 0.4234780929982662}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.004548542201519, \"head\": 0.965721845626831}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6927840821444988, \"head\": 0.7964189052581787}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.050026264041662216, \"head\": 0.04835406690835953}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.02057761698961258, \"head\": 0.021486084908246994}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.02432064712047577, \"head\": 0.026612836867570877}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7342475391924381, \"head\": 1.7726955451071262}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9970604814589024, \"head\": 0.9701758399605751}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.9987956658005714, \"head\": 0.8982718698680401}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.9954398535192013, \"head\": 0.8957450650632381}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.28871601447463036, \"head\": 0.302502054721117}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.0922298058867455, \"head\": 1.0904531925916672}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.5889689698815346, \"head\": 0.7032556384801865}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.0472528412938118, \"head\": 0.051526643335819244}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.019945483654737473, \"head\": 0.02473742514848709}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.028313003480434418, \"head\": 0.028436753898859024}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7740271426737309, \"head\": 1.817024789750576}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9114693105220795, \"head\": 0.9145086966454983}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.9019385352730751, \"head\": 0.8927937969565392}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.8998306393623352, \"head\": 0.9212977848947048}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.2967524863779545, \"head\": 0.3723747394979}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.1060699671506882, \"head\": 1.0957713648676872}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6006704829633236, \"head\": 0.7086305767297745}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.0473882332444191, \"head\": 0.05299939215183258}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.020857691764831543, \"head\": 0.023622341454029083}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.02483532577753067, \"head\": 0.024912606924772263}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.801207147538662, \"head\": 1.8137666173279285}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.8845870569348335, \"head\": 0.9186436124145985}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.8939706869423389, \"head\": 1.090633139014244}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.8907699882984161, \"head\": 0.9820103719830513}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.20650408789515495, \"head\": 0.2980394624173641}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.099870901554823, \"head\": 1.193461112678051}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6079071462154388, \"head\": 0.608120996505022}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.04940348118543625, \"head\": 0.05019248649477959}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.02102181315422058, \"head\": 0.020751304924488068}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.02429768070578575, \"head\": 0.024387627840042114}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7302748784422874, \"head\": 1.779356449842453}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9111499339342117, \"head\": 1.0030776858329773}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 1.0084785409271717, \"head\": 0.7853909805417061}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.8854231908917427, \"head\": 0.9903766922652721}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.30941394343972206, \"head\": 0.4036494977772236}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.0021124221384525, \"head\": 1.087419144809246}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6986538581550121, \"head\": 0.5925103425979614}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.05264284834265709, \"head\": 0.04748791828751564}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.021781649440526962, \"head\": 0.0203961543738842}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.026505284011363983, \"head\": 0.02492520958185196}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.6592932678759098, \"head\": 1.7063281685113907}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9252552390098572, \"head\": 0.9012598767876625}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.9159624613821507, \"head\": 1.0033388063311577}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 1.0836069770157337, \"head\": 0.8959025107324123}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.21367716044187546, \"head\": 0.39360644668340683}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.1918969042599201, \"head\": 1.0876506119966507}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6043791770935059, \"head\": 0.50723797082901}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.04812908545136452, \"head\": 0.04811948537826538}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.01986353099346161, \"head\": 0.02045474201440811}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.026057440787553787, \"head\": 0.02439676970243454}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7049925550818443, \"head\": 1.8048204071819782}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9903196431696415, \"head\": 0.9041541069746017}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.993051178753376, \"head\": 0.9011468924582005}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.8974558524787426, \"head\": 0.9103172682225704}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.305716197937727, \"head\": 0.30726928263902664}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.009811282157898, \"head\": 1.0910884365439415}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.5980694033205509, \"head\": 0.5185511261224747}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.04702680557966232, \"head\": 0.047885164618492126}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.02062378078699112, \"head\": 0.020773280411958694}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.024686962366104126, \"head\": 0.024503476917743683}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.72260233014822, \"head\": 1.712786391377449}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9714208245277405, \"head\": 0.9792059771716595}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 1.0113392062485218, \"head\": 0.990057535469532}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.9094808027148247, \"head\": 0.9333389401435852}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.37373610958456993, \"head\": 0.36042189225554466}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.1830726340413094, \"head\": 1.1027383841574192}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.49869296327233315, \"head\": 0.6907455064356327}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.05104437097907066, \"head\": 0.06438520178198814}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.029615312814712524, \"head\": 0.020376235246658325}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.026136226952075958, \"head\": 0.03363548964262009}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.838554736226797, \"head\": 1.7007502764463425}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.8986409716308117, \"head\": 0.9117135219275951}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 1.0004765763878822, \"head\": 0.9062104523181915}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.8984318189322948, \"head\": 0.8129719160497189}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.20704849436879158, \"head\": 0.2798512391746044}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.1968294903635979, \"head\": 1.1982362233102322}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6014008149504662, \"head\": 0.5140309147536755}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.051897015422582626, \"head\": 0.048648491501808167}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.02055426314473152, \"head\": 0.020787768065929413}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.03382866829633713, \"head\": 0.02504662051796913}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.716012004762888, \"head\": 1.7709256000816822}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9886206239461899, \"head\": 0.9087629839777946}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 1.0800507478415966, \"head\": 1.0834900699555874}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.9938135221600533, \"head\": 0.9966782629489899}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.31616871803998947, \"head\": 0.20735740661621094}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.081126019358635, \"head\": 0.9884663000702858}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.48847533389925957, \"head\": 0.7081217207014561}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.05412973091006279, \"head\": 0.04825767129659653}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.02070966362953186, \"head\": 0.020384062081575394}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.02454281598329544, \"head\": 0.024364333599805832}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.635087177157402, \"head\": 1.8321144841611385}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9217569530010223, \"head\": 1.008765161037445}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.999833233654499, \"head\": 0.9023473300039768}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.8045279905200005, \"head\": 0.9063313528895378}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.22849778831005096, \"head\": 0.3045005835592747}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.1012648865580559, \"head\": 1.0878440253436565}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6986337937414646, \"head\": 0.5083227902650833}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.06155259162187576, \"head\": 0.046925872564315796}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.020474862307310104, \"head\": 0.021044019609689713}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.02964925765991211, \"head\": 0.02505519613623619}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.8087435476481915, \"head\": 1.719795823097229}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9683039784431458, \"head\": 1.0580452606081963}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.9135740697383881, \"head\": 0.898501880466938}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.9944533854722977, \"head\": 1.0025388523936272}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.30586522817611694, \"head\": 0.3925166502594948}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.011526983231306, \"head\": 1.0007701367139816}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6972051784396172, \"head\": 0.6046567820012569}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.05091483145952225, \"head\": 0.050378743559122086}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.020993471145629883, \"head\": 0.0213484950363636}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.02491062879562378, \"head\": 0.025171462446451187}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7305980436503887, \"head\": 1.7557078935205936}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9968934953212738, \"head\": 1.0004011541604996}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.9779919758439064, \"head\": 0.904321700334549}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.9167792089283466, \"head\": 0.9859955310821533}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.2838905267417431, \"head\": 0.39517542347311974}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 0.9973788745701313, \"head\": 1.0086753219366074}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6972578577697277, \"head\": 0.5984200201928616}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.04796565696597099, \"head\": 0.048463184386491776}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.021459881216287613, \"head\": 0.020468469709157944}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.02533702179789543, \"head\": 0.024680227041244507}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.6585878171026707, \"head\": 1.7161506190896034}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9274801500141621, \"head\": 0.8997299484908581}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.9059126675128937, \"head\": 0.9119355082511902}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 1.0847233533859253, \"head\": 0.8958439715206623}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.30485091730952263, \"head\": 0.2981557063758373}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 0.9980771131813526, \"head\": 1.0957771465182304}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.689220268279314, \"head\": 0.5096651874482632}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.04852244630455971, \"head\": 0.04826141893863678}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.020977113395929337, \"head\": 0.021284867078065872}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.026294145733118057, \"head\": 0.02527669072151184}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.6982801109552383, \"head\": 1.7892770506441593}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.9094605259597301, \"head\": 0.9002997688949108}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 1.0976927652955055, \"head\": 0.9920544810593128}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.7894147634506226, \"head\": 0.9966894127428532}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.30200500041246414, \"head\": 0.30210331082344055}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.192239686846733, \"head\": 0.9896805547177792}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.5164272338151932, \"head\": 0.6167748607695103}}, {\"xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]\": {\"base\": 0.049788422882556915, \"head\": 0.04887800291180611}, \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\": {\"base\": 0.022398915141820908, \"head\": 0.02087576314806938}, \"xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]\": {\"base\": 0.025856364518404007, \"head\": 0.02498185634613037}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]\": {\"base\": 1.7417031489312649, \"head\": 1.7321462780237198}, \"xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]\": {\"base\": 0.8294798843562603, \"head\": 0.8777766190469265}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]\": {\"base\": 0.8916395008563995, \"head\": 0.9944205470383167}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]\": {\"base\": 0.9346475414931774, \"head\": 0.9901701956987381}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]\": {\"base\": 0.40059592574834824, \"head\": 0.3948356322944164}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]\": {\"base\": 1.0036095082759857, \"head\": 1.0024661757051945}, \"xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]\": {\"base\": 0.6842633076012135, \"head\": 0.6897472180426121}}]",
  "efficiency_test": [
    "xarray/tests/test_backends.py::TestNetCDF4ViaDaskData::test_roundtrip_mask_and_scale[dtype0-create_unsigned_false_masked_scaled_data-create_encoded_unsigned_false_masked_scaled_data]",
    "xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]",
    "xarray/tests/test_duck_array_ops.py::test_min_count[False-True-x-prod-True-int-2]",
    "xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-2-False-1]",
    "xarray/tests/test_rolling.py::TestDataArrayRolling::test_rolling_reduce[numbagg-numpy-mean-4-None-True-1]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-1-2-True-2]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-2-2-False-2]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_reduce[numpy-mean-3-None-False-1]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z1-1-None-sum]",
    "xarray/tests/test_rolling.py::TestDatasetRolling::test_rolling_wrapped_bottleneck[1-numbagg-numpy-z2-1-None-sum]"
  ],
  "patch_functions": "{\"xarray/backends/api.py\": [\"_validate_attrs\", \"to_netcdf\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'xarray/backends/api.py': ['_validate_attrs', 'to_netcdf']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"xarray/core/merge.py\": [\"append\"], \"xarray/namedarray/core.py\": [\"IndexVariable.dtype\", \"IndexVariable.attrs\", \"Variable.chunk\", \"Variable.reduce\"], \"xarray/core/dataset.py\": [\"Dataset.chunk\", \"Dataset.to_netcdf\", \"Dataset.rolling\", \"Dataset.coords\", \"Dataset.attrs\", \"Dataset.data_vars\", \"Dataset.sizes\", \"Dataset.compute\", \"Dataset.variables\"], \"xarray/core/dataarray.py\": [\"DataArray.values\", \"DataArray.reduce\", \"DataArray.data\", \"DataArray.dims\", \"DataArray.rolling\", \"DataArray.isel\", \"DataArray.to_series\", \"DataArray.coords\", \"DataArray.attrs\", \"DataArray.chunk\", \"DataArray.encoding\", \"DataArray.compute\", \"DataArray\", \"DataArray.ndim\"], \"xarray/core/common.py\": [\"DataArray.isnull\", \"DataArray.sizes\"], \"xarray/core/variable.py\": [\"Variable.transpose\", \"Variable.compute\", \"Variable.identical\", \"IndexVariable.encoding\", \"Variable.isel\", \"IndexVariable.chunk\", \"Variable\", \"Variable.reduce\", \"Variable.chunk\", \"concat\"], \"xarray/core/rolling.py\": [\"DatasetRolling.method\", \"DataArrayRolling.method\", \"DataArrayRolling.reduce\", \"DatasetRolling.reduce\"], \"xarray/core/indexing.py\": [\"NumpyIndexingAdapter.transpose\"], \"xarray/core/_aggregations.py\": [\"DataArray.prod\", \"DataArray.sum\"], \"xarray/backends/api.py\": [\"open_dataset\"], \"xarray/namedarray/daskmanager.py\": [\"DaskManager.compute\"], \"xarray/util/deprecation_helpers.py\": [\"inner\", \"wrapper\"], \"xarray/core/dtypes.py\": [\"maybe_promote\"], \"xarray/namedarray/pycompat.py\": [\"array_type\"], \"xarray/core/concat.py\": [\"concat\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'xarray/core/merge.py': ['append'], 'xarray/namedarray/core.py': ['IndexVariable.dtype', 'IndexVariable.attrs', 'Variable.chunk', 'Variable.reduce'], 'xarray/core/dataset.py': ['Dataset.chunk', 'Dataset.to_netcdf', 'Dataset.rolling', 'Dataset.coords', 'Dataset.attrs', 'Dataset.data_vars', 'Dataset.sizes', 'Dataset.compute', 'Dataset.variables'], 'xarray/core/dataarray.py': ['DataArray.values', 'DataArray.reduce', 'DataArray.data', 'DataArray.dims', 'DataArray.rolling', 'DataArray.isel', 'DataArray.to_series', 'DataArray.coords', 'DataArray.attrs', 'DataArray.chunk', 'DataArray.encoding', 'DataArray.compute', 'DataArray', 'DataArray.ndim'], 'xarray/core/common.py': ['DataArray.isnull', 'DataArray.sizes'], 'xarray/core/variable.py': ['Variable.transpose', 'Variable.compute', 'Variable.identical', 'IndexVariable.encoding', 'Variable.isel', 'IndexVariable.chunk', 'Variable', 'Variable.reduce', 'Variable.chunk', 'concat'], 'xarray/core/rolling.py': ['DatasetRolling.method', 'DataArrayRolling.method', 'DataArrayRolling.reduce', 'DatasetRolling.reduce'], 'xarray/core/indexing.py': ['NumpyIndexingAdapter.transpose'], 'xarray/core/_aggregations.py': ['DataArray.prod', 'DataArray.sum'], 'xarray/backends/api.py': ['open_dataset'], 'xarray/namedarray/daskmanager.py': ['DaskManager.compute'], 'xarray/util/deprecation_helpers.py': ['inner', 'wrapper'], 'xarray/core/dtypes.py': ['maybe_promote'], 'xarray/namedarray/pycompat.py': ['array_type'], 'xarray/core/concat.py': ['concat']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.0001
}