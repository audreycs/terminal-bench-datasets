{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-27666",
  "patch": "diff --git a/sympy/assumptions/handlers/calculus.py b/sympy/assumptions/handlers/calculus.py\nindex 263bed6da00c..c685b16cfe35 100644\n--- a/sympy/assumptions/handlers/calculus.py\n+++ b/sympy/assumptions/handlers/calculus.py\n@@ -4,7 +4,7 @@\n \"\"\"\n \n from sympy.assumptions import Q, ask\n-from sympy.core import Add, Mul, Pow, Symbol\n+from sympy.core import Expr, Add, Mul, Pow, Symbol\n from sympy.core.numbers import (NegativeInfinity, GoldenRatio,\n     Infinity, Exp1, ComplexInfinity, ImaginaryUnit, NaN, Number, Pi, E,\n     TribonacciConstant)\n@@ -227,9 +227,12 @@ def _(expr, assumptions):\n # InfinitePredicate\n \n \n-@InfinitePredicate.register_many(ComplexInfinity, Infinity, NegativeInfinity)\n+@InfinitePredicate.register(Expr)\n def _(expr, assumptions):\n-    return True\n+    is_finite = Q.finite(expr)._eval_ask(assumptions)\n+    if is_finite is None:\n+        return None\n+    return not is_finite\n \n \n # PositiveInfinitePredicate\n",
  "test_patch": "diff --git a/sympy/assumptions/tests/test_query.py b/sympy/assumptions/tests/test_query.py\nindex 4bf385d8575b..9b43e1762184 100644\n--- a/sympy/assumptions/tests/test_query.py\n+++ b/sympy/assumptions/tests/test_query.py\n@@ -1107,6 +1107,20 @@ def test_bounded():\n     assert ask(Q.finite(cos(x) + sin(x))) is True\n \n \n+def test_unbounded():\n+    assert ask(Q.infinite(I * oo)) is True\n+    assert ask(Q.infinite(1 + I*oo)) is True\n+    assert ask(Q.infinite(3 * (I * oo))) is True\n+    assert ask(Q.infinite(-I * oo)) is True\n+    assert ask(Q.infinite(1 + zoo)) is True\n+    assert ask(Q.infinite(I * zoo)) is True\n+    assert ask(Q.infinite(x / y), Q.infinite(x) & Q.finite(y) & ~Q.zero(y)) is True\n+    assert ask(Q.infinite(I * oo - I * oo)) is None\n+    assert ask(Q.infinite(x * I * oo)) is None\n+    assert ask(Q.infinite(1 / x), Q.finite(x) & ~Q.zero(x)) is False\n+    assert ask(Q.infinite(1 / (I * oo))) is False\n+\n+\n def test_issue_27441():\n     # https://github.com/sympy/sympy/issues/27441\n     assert ask(Q.composite(y), Q.integer(y) & Q.positive(y) & ~Q.prime(y)) is None\n",
  "base_commit": "ee3c38aea07e53d42808dd89f1bf6fe5823ec6b8",
  "head_commit": "a021d8d9a0da6582a518c1bb9bcad79057c6b36f",
  "created_at": 1740612897000,
  "version": "1.14",
  "duration_changes": "[{\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13847638294100761, \"head\": 0.13153984397649765}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.2787257507443428, \"head\": 0.1286313235759735}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.132431272417307, \"head\": 0.4489270746707916}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13910159468650818, \"head\": 0.13126039132475853}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.24341082200407982, \"head\": 0.12979863211512566}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.5708494186401367, \"head\": 0.4457854554057121}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13954168558120728, \"head\": 0.13210701942443848}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.28687822446227074, \"head\": 0.13102683797478676}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.4672119282186031, \"head\": 0.45328012853860855}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.14177746325731277, \"head\": 0.13244002684950829}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.22787835448980331, \"head\": 0.13038288056850433}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.1865916065871716, \"head\": 0.4465106502175331}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.1391700655221939, \"head\": 0.1323421522974968}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.2171955220401287, \"head\": 0.13122502341866493}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.0385181158781052, \"head\": 0.4487237296998501}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.1394692324101925, \"head\": 0.1312493085861206}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.28484126925468445, \"head\": 0.12778735533356667}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.2140701934695244, \"head\": 0.44342871382832527}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.1388678066432476, \"head\": 0.1321977600455284}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.21544064953923225, \"head\": 0.12883131206035614}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.00166829302907, \"head\": 0.44858572259545326}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.14059805124998093, \"head\": 0.1322559379041195}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.19521446526050568, \"head\": 0.12983118742704391}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.0149918384850025, \"head\": 0.4515202194452286}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13999713957309723, \"head\": 0.13178321346640587}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.26220327243208885, \"head\": 0.1289931945502758}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.203758779913187, \"head\": 0.4508812092244625}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.14001426473259926, \"head\": 0.13125210255384445}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.25184185430407524, \"head\": 0.1288507655262947}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.145867746323347, \"head\": 0.44604773819446564}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13925189152359962, \"head\": 0.1307472214102745}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.2940415069460869, \"head\": 0.12743818014860153}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.2859567552804947, \"head\": 0.4460323490202427}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13813207298517227, \"head\": 0.13059107959270477}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.16941968351602554, \"head\": 0.1281151920557022}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.1263572983443737, \"head\": 0.4474121816456318}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.14126534759998322, \"head\": 0.13196881115436554}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.21947529539465904, \"head\": 0.12884194031357765}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.399544596672058, \"head\": 0.44747908040881157}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13823957741260529, \"head\": 0.13174820691347122}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.29434632882475853, \"head\": 0.12970498949289322}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.4707322791218758, \"head\": 0.4475875608623028}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.1386314444243908, \"head\": 0.13129612430930138}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.21828636154532433, \"head\": 0.1294878013432026}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.7779411040246487, \"head\": 0.44558846205472946}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13908126577734947, \"head\": 0.13185837119817734}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.2189418263733387, \"head\": 0.12896652147173882}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.3018474988639355, \"head\": 0.45149755105376244}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13980745524168015, \"head\": 0.1313626915216446}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.1941012516617775, \"head\": 0.128835067152977}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.3291007243096828, \"head\": 0.44597378745675087}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.14098871499300003, \"head\": 0.13299361988902092}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.3121529221534729, \"head\": 0.13095887005329132}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.09896906837821, \"head\": 0.45279743149876595}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13874756172299385, \"head\": 0.13265734538435936}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.22182325646281242, \"head\": 0.12929854914546013}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.3748641833662987, \"head\": 0.45239217206835747}}, {\"sympy/assumptions/tests/test_refine.py::test_issue_refine_9384\": {\"base\": 0.13936306908726692, \"head\": 0.13120514526963234}, \"sympy/assumptions/tests/test_rel_queries.py::test_equality\": {\"base\": 0.1701064556837082, \"head\": 0.12806357815861702}, \"sympy/core/tests/test_relational.py::test_is_eq\": {\"base\": 1.7753047868609428, \"head\": 0.4465069808065891}}]",
  "efficiency_test": [
    "sympy/assumptions/tests/test_refine.py::test_issue_refine_9384",
    "sympy/assumptions/tests/test_rel_queries.py::test_equality",
    "sympy/core/tests/test_relational.py::test_is_eq"
  ],
  "patch_functions": "{\"sympy/assumptions/handlers/calculus.py\": [\"_\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/assumptions/handlers/calculus.py': ['_']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/assumptions/ask.py\": [\"ask\", \"AssumptionKeys.positive\", \"AssumptionKeys.eq\", \"AssumptionKeys.extended_negative\", \"AssumptionKeys.extended_real\", \"AssumptionKeys.nonzero\", \"AssumptionKeys.extended_positive\", \"AssumptionKeys.negative\", \"AssumptionKeys.zero\", \"AssumptionKeys.finite\", \"AssumptionKeys.infinite\"], \"sympy/core/relational.py\": [\"is_neq\", \"is_eq\"], \"sympy/core/sympify.py\": [\"_sympify\", \"sympify\"], \"sympy/core/decorators.py\": [\"Symbol._func\"], \"sympy/multipledispatch/core.py\": [\"dispatch\", \"_\"], \"sympy/assumptions/refine.py\": [\"refine\"], \"sympy/core/symbol.py\": [\"symbols\"], \"sympy/multipledispatch/dispatcher.py\": [\"Dispatcher.dispatch\"], \"sympy/core/logic.py\": [\"fuzzy_and\"], \"sympy/core/basic.py\": [\"Pow.args\"], \"sympy/utilities/decorator.py\": [\"AssumptionKeys.accessor\"], \"sympy/functions/elementary/piecewise.py\": [\"Piecewise\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/assumptions/ask.py': ['ask', 'AssumptionKeys.positive', 'AssumptionKeys.eq', 'AssumptionKeys.extended_negative', 'AssumptionKeys.extended_real', 'AssumptionKeys.nonzero', 'AssumptionKeys.extended_positive', 'AssumptionKeys.negative', 'AssumptionKeys.zero', 'AssumptionKeys.finite', 'AssumptionKeys.infinite'], 'sympy/core/relational.py': ['is_neq', 'is_eq'], 'sympy/core/sympify.py': ['_sympify', 'sympify'], 'sympy/core/decorators.py': ['Symbol._func'], 'sympy/multipledispatch/core.py': ['dispatch', '_'], 'sympy/assumptions/refine.py': ['refine'], 'sympy/core/symbol.py': ['symbols'], 'sympy/multipledispatch/dispatcher.py': ['Dispatcher.dispatch'], 'sympy/core/logic.py': ['fuzzy_and'], 'sympy/core/basic.py': ['Pow.args'], 'sympy/utilities/decorator.py': ['AssumptionKeys.accessor'], 'sympy/functions/elementary/piecewise.py': ['Piecewise']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.35700000000000026
}