{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-26848",
  "patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex a29b8298010f..f502625c7ea9 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -3241,7 +3241,8 @@ def aseries(self, x=None, n=6, bound=0, hir=False):\n             logw = log(1/res)\n \n         s = func.series(k, 0, n)\n-\n+        from sympy.core.function import expand_mul\n+        s = expand_mul(s)\n         # Hierarchical series\n         if hir:\n             return s.subs(k, exp(logw))\ndiff --git a/sympy/series/gruntz.py b/sympy/series/gruntz.py\nindex 407df70fdc4d..0bf3bf3e50b1 100644\n--- a/sympy/series/gruntz.py\n+++ b/sympy/series/gruntz.py\n@@ -118,7 +118,7 @@\n \"\"\"\n from functools import reduce\n \n-from sympy.core import Basic, S, Mul, PoleError, expand_mul\n+from sympy.core import Basic, S, Mul, PoleError\n from sympy.core.cache import cacheit\n from sympy.core.intfunc import ilcm\n from sympy.core.numbers import I, oo\n@@ -550,6 +550,11 @@ def mrv_leadterm(e, x):\n     #\n     w = Dummy(\"w\", positive=True)\n     f, logw = rewrite(exps, Omega, x, w)\n+\n+    # Ensure expressions of the form exp(log(...)) don't get simplified automatically in the previous steps.\n+    # see: https://github.com/sympy/sympy/issues/15323#issuecomment-478639399\n+    f = f.replace(lambda f: f.is_Pow and f.has(x), lambda f: exp(log(f.base)*f.exp))\n+\n     try:\n         lt = f.leadterm(w, logx=logw)\n     except (NotImplementedError, PoleError, ValueError):\n@@ -657,7 +662,7 @@ def rewrite(e, Omega, x, wsym):\n             if not isinstance(rewrites[var], exp):\n                 raise ValueError(\"Value should be exp\")\n             arg = rewrites[var].args[0]\n-        O2.append((var, exp((arg - c*g.exp).expand())*wsym**c))\n+        O2.append((var, exp((arg - c*g.exp))*wsym**c))\n \n     # Remember that Omega contains subexpressions of \"e\". So now we find\n     # them in \"e\" and substitute them for our rewriting, stored in O2\n@@ -688,7 +693,6 @@ def rewrite(e, Omega, x, wsym):\n     # -exp(p/(p + 1)) + exp(-p**2/(p + 1) + p). No current simplification\n     # methods reduce this to 0 while not expanding polynomials.\n     f = bottom_up(f, lambda w: getattr(w, 'normal', lambda: w)())\n-    f = expand_mul(f)\n \n     return f, logw\n \n",
  "test_patch": "diff --git a/sympy/series/tests/test_aseries.py b/sympy/series/tests/test_aseries.py\nindex 055d6b8aef23..cae0ac0a43f2 100644\n--- a/sympy/series/tests/test_aseries.py\n+++ b/sympy/series/tests/test_aseries.py\n@@ -1,6 +1,5 @@\n from sympy.core.function import PoleError\n from sympy.core.numbers import oo\n-from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.functions.elementary.exponential import (exp, log)\n from sympy.functions.elementary.miscellaneous import sqrt\n@@ -32,9 +31,9 @@ def test_simple():\n \n     e3 = lambda x:exp(exp(exp(x)))\n     e = e3(x)/e3(x - 1/e3(x))\n-    assert e.aseries(x, n=3) == 1 + exp(x + exp(x))*exp(-exp(exp(x)))\\\n-            + ((-exp(x)/2 - S.Half)*exp(x + exp(x))\\\n-            + exp(2*x + 2*exp(x))/2)*exp(-2*exp(exp(x))) + O(exp(-3*exp(exp(x))), (x, oo))\n+    assert e.aseries(x, n=3) == 1 + exp(2*x + 2*exp(x))*exp(-2*exp(exp(x)))/2\\\n+            - exp(2*x + exp(x))*exp(-2*exp(exp(x)))/2 - exp(x + exp(x))*exp(-2*exp(exp(x)))/2\\\n+            + exp(x + exp(x))*exp(-exp(exp(x))) + O(exp(-3*exp(exp(x))), (x, oo))\n \n     e = exp(exp(x)) * (exp(sin(1/x + 1/exp(exp(x)))) - exp(sin(1/x)))\n     assert e.aseries(x, n=4) == -1/(2*x**3) + 1/x + 1 + O(x**(-4), (x, oo))\ndiff --git a/sympy/series/tests/test_gruntz.py b/sympy/series/tests/test_gruntz.py\nindex 4565c876085b..c11d243c7c1e 100644\n--- a/sympy/series/tests/test_gruntz.py\n+++ b/sympy/series/tests/test_gruntz.py\n@@ -5,7 +5,6 @@\n from sympy.functions.elementary.exponential import (exp, log)\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.trigonometric import (acot, atan, cos, sin)\n-from sympy.functions.elementary.complexes import sign as _sign\n from sympy.functions.special.error_functions import (Ei, erf)\n from sympy.functions.special.gamma_functions import (digamma, gamma, loggamma)\n from sympy.functions.special.zeta_functions import zeta\n@@ -314,7 +313,7 @@ def test_rewrite1():\n     e = exp(x + 1/x)\n     assert mrewrite(mrv(e, x), x, m) == (1/m, -x - 1/x)\n     e = 1/exp(-x + exp(-x)) - exp(x)\n-    assert mrewrite(mrv(e, x), x, m) == (1/(m*exp(m)) - 1/m, -x)\n+    assert mrewrite(mrv(e, x), x, m) == ((-m*exp(m) + m)*exp(-m)/m**2, -x)\n \n \n def test_rewrite2():\n@@ -329,7 +328,7 @@ def test_rewrite3():\n     e = exp(-x + 1/x**2) - exp(x + 1/x)\n     #both of these are correct and should be equivalent:\n     assert mrewrite(mrv(e, x), x, m) in [(-1/m + m*exp(\n-        1/x + 1/x**2), -x - 1/x), (m - 1/m*exp(1/x + x**(-2)), x**(-2) - x)]\n+        (x**2 + x)/x**3), -x - 1/x), ((m**2 - exp((x**2 + x)/x**3))/m, x**(-2) - x)]\n \n \n def test_mrv_leadterm1():\n@@ -404,7 +403,7 @@ def test_gruntz_I():\n     assert gruntz(I*x, x, oo) == I*oo\n     assert gruntz(y*I*x, x, oo) == y*I*oo\n     assert gruntz(y*3*I*x, x, oo) == y*I*oo\n-    assert gruntz(y*3*sin(I)*x, x, oo).simplify().rewrite(_sign) == _sign(y)*I*oo\n+    assert gruntz(y*3*sin(I)*x, x, oo) == y*I*oo\n \n \n def test_issue_4814():\ndiff --git a/sympy/series/tests/test_limits.py b/sympy/series/tests/test_limits.py\nindex ac28ad3eafbf..4f2760f8e82a 100644\n--- a/sympy/series/tests/test_limits.py\n+++ b/sympy/series/tests/test_limits.py\n@@ -1417,3 +1417,10 @@ def test_issue_26250():\n def test_issue_26916():\n     assert limit(Ei(x)*exp(-x), x, +oo) == 0\n     assert limit(Ei(x)*exp(-x), x, -oo) == 0\n+\n+\n+def test_issue_22982_15323():\n+    assert limit((log(E + 1/x) - 1)**(1 - sqrt(E + 1/x)), x, oo) == oo\n+    assert limit((1 - 1/x)**x*(log(1 - 1/x) + 1/(x*(1 - 1/x))), x, 1, dir='+') == 1\n+    assert limit((log(E + 1/x) )**(1 - sqrt(E + 1/x)), x, oo) == 1\n+    assert limit((log(E + 1/x) - 1)**(- sqrt(E + 1/x)), x, oo) == oo\n",
  "base_commit": "9a3c4653658031a7323c4e58bd821acb8a4e8f43",
  "head_commit": "c1069997123cc205f9e1e0677336c6a7d1cc2b1c",
  "created_at": 1721719415000,
  "version": "1.14",
  "duration_changes": "[{\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 7.446892037987709, \"head\": 4.264367878437042}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.275245234370232, \"head\": 2.2779081240296364}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.2649918645620346, \"head\": 0.24365825578570366}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.316670048981905, \"head\": 0.2700730040669441}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.5706326887011528, \"head\": 0.5899091213941574}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 6.105494171380997, \"head\": 2.605182610452175}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 7.331974565982819, \"head\": 4.243577864021063}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.215968646109104, \"head\": 2.2482557334005833}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.26295841857790947, \"head\": 0.24017183110117912}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.3581116795539856, \"head\": 0.2675090953707695}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.391704447567463, \"head\": 0.5872586295008659}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 6.017082300037146, \"head\": 2.569951679557562}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 7.443220876157284, \"head\": 4.26684246212244}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.267032254487276, \"head\": 2.2802456095814705}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.2705710679292679, \"head\": 0.24306939542293549}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.3409617505967617, \"head\": 0.26807374879717827}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.7638571374118328, \"head\": 0.5912183187901974}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.997631885111332, \"head\": 2.6174681298434734}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 7.345744017511606, \"head\": 4.239017833024263}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.240389432758093, \"head\": 2.267093989998102}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.2662389427423477, \"head\": 0.24550160020589828}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.32326629757881165, \"head\": 0.2681770510971546}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.7267089448869228, \"head\": 0.5992421768605709}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 6.0800067111849785, \"head\": 2.5678717270493507}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 7.383111856877804, \"head\": 4.218668647110462}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.327495511621237, \"head\": 2.280701272189617}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.2669709697365761, \"head\": 0.24234389886260033}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.3181547373533249, \"head\": 0.2667269743978977}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.4304248616099358, \"head\": 0.6002994179725647}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 6.0869653932750225, \"head\": 2.5909610874950886}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 7.028992887586355, \"head\": 4.254845704883337}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.14813880994916, \"head\": 2.2436728663742542}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.26786429062485695, \"head\": 0.2651343606412411}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.3200998976826668, \"head\": 0.2688225135207176}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.497672874480486, \"head\": 0.5921538285911083}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.856449496001005, \"head\": 2.5751760229468346}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.95964964479208, \"head\": 4.228701319545507}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.033315539360046, \"head\": 2.270324543118477}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.2488551028072834, \"head\": 0.24166109412908554}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.30435674637556076, \"head\": 0.2678908035159111}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.534470971673727, \"head\": 0.58689184486866}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.887512736022472, \"head\": 2.5813307128846645}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.9535908699035645, \"head\": 4.3030379340052605}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.9521477557718754, \"head\": 2.285512935370207}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.25471095740795135, \"head\": 0.2458629533648491}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.3039661981165409, \"head\": 0.26859938725829124}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.3461072966456413, \"head\": 0.5990153700113297}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.706410314887762, \"head\": 2.606943476945162}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.922899905592203, \"head\": 4.238235391676426}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.120343718677759, \"head\": 2.238572720438242}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.25417763367295265, \"head\": 0.24367502331733704}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.30462226644158363, \"head\": 0.2671332508325577}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.6160130053758621, \"head\": 0.5883517749607563}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.70966475084424, \"head\": 2.6045146211981773}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.923967156559229, \"head\": 4.232440810650587}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.9922230504453182, \"head\": 2.294768624007702}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.24841225892305374, \"head\": 0.2417101077735424}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.2936287559568882, \"head\": 0.26897644624114037}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.474017221480608, \"head\": 0.5969728529453278}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.648267108947039, \"head\": 2.5951331071555614}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.842489972710609, \"head\": 4.266711171716452}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.9872071966528893, \"head\": 2.2826890610158443}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.24618304893374443, \"head\": 0.23890934884548187}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.2961616665124893, \"head\": 0.26849786192178726}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.622795645147562, \"head\": 0.6019004695117474}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.571435894817114, \"head\": 2.595731593668461}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.9834896735847, \"head\": 4.253564581274986}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.06823194026947, \"head\": 2.263165447860956}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.2525249868631363, \"head\": 0.24266310036182404}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.3160841725766659, \"head\": 0.2693061791360378}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.5327539443969727, \"head\": 0.594313558191061}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.908693470060825, \"head\": 2.610987778753042}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.93456943705678, \"head\": 4.278596043586731}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.024484738707542, \"head\": 2.3198997005820274}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.24864090234041214, \"head\": 0.2406143918633461}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.29821259900927544, \"head\": 0.26673921570181847}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.3344683535397053, \"head\": 0.5934395864605904}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.685339096933603, \"head\": 2.602264676243067}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.850300021469593, \"head\": 4.248377501964569}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.976665858179331, \"head\": 2.277562391012907}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.2475874274969101, \"head\": 0.2433740273118019}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.29646874964237213, \"head\": 0.26887019351124763}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.4594192430377007, \"head\": 0.5916748456656933}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.635580353438854, \"head\": 2.579759068787098}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.82234164327383, \"head\": 4.290547467768192}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.998045813292265, \"head\": 2.2912913262844086}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.2393634393811226, \"head\": 0.2471206597983837}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.29526228830218315, \"head\": 0.267632644623518}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.483320526778698, \"head\": 0.6035707928240299}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.837284054607153, \"head\": 2.631623513996601}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.873679619282484, \"head\": 4.24611571803689}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.973345283418894, \"head\": 2.2545360140502453}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.24224160239100456, \"head\": 0.23805110156536102}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.29644326865673065, \"head\": 0.2682408206164837}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.61110994592309, \"head\": 0.5986317619681358}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.571730889379978, \"head\": 2.5606332942843437}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.8107650578022, \"head\": 4.280330508947372}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.95891372859478, \"head\": 2.2856139950454235}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.24637718498706818, \"head\": 0.23878351598978043}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.29562927037477493, \"head\": 0.26738888025283813}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.6013413444161415, \"head\": 0.6004823707044125}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.76919100433588, \"head\": 2.613673571497202}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.749341264367104, \"head\": 4.292056426405907}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.9203053899109364, \"head\": 2.275304738432169}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.23604273051023483, \"head\": 0.261770598590374}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.301081757992506, \"head\": 0.29580892622470856}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.5856793746352196, \"head\": 0.6391818821430206}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.720581386238337, \"head\": 2.666319891810417}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.782923735678196, \"head\": 4.257395640015602}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 3.9306079484522343, \"head\": 2.305161412805319}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.24884938821196556, \"head\": 0.23897887393832207}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.3054611161351204, \"head\": 0.26993048563599586}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.3067384213209152, \"head\": 0.6011946760118008}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.598074462264776, \"head\": 2.5874644927680492}}, {\"sympy/concrete/tests/test_gosper.py::test_gosper_sum\": {\"base\": 6.844525758177042, \"head\": 4.262181755155325}, \"sympy/concrete/tests/test_sums_products.py::test_issue_10973\": {\"base\": 4.013946272432804, \"head\": 2.2875575721263885}, \"sympy/integrals/tests/test_integrals.py::test_issue_15285\": {\"base\": 0.24294821918010712, \"head\": 0.2437726929783821}, \"sympy/matrices/tests/test_matrixbase.py::test_refine\": {\"base\": 0.29576388001441956, \"head\": 0.2673773877322674}, \"sympy/series/tests/test_limitseq.py::test_issue_10382\": {\"base\": 1.6128465719521046, \"head\": 0.6030242741107941}, \"sympy/series/tests/test_limitseq.py::test_limit_seq\": {\"base\": 5.616708442568779, \"head\": 2.703519769012928}}]",
  "efficiency_test": [
    "sympy/concrete/tests/test_gosper.py::test_gosper_sum",
    "sympy/concrete/tests/test_sums_products.py::test_issue_10973",
    "sympy/integrals/tests/test_integrals.py::test_issue_15285",
    "sympy/matrices/tests/test_matrixbase.py::test_refine",
    "sympy/series/tests/test_limitseq.py::test_issue_10382",
    "sympy/series/tests/test_limitseq.py::test_limit_seq"
  ],
  "patch_functions": "{\"sympy/core/expr.py\": [\"Expr.aseries\"], \"sympy/series/gruntz.py\": [\"rewrite\", \"mrv_leadterm\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/core/expr.py': ['Expr.aseries'], 'sympy/series/gruntz.py': ['rewrite', 'mrv_leadterm']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/assumptions/ask.py\": [\"AssumptionKeys.real\", \"AssumptionKeys.positive\", \"AssumptionKeys.negative\"], \"sympy/series/limitseq.py\": [\"limit_seq\", \"<genexpr>\"], \"sympy/concrete/summations.py\": [\"Sum\", \"Sum.is_convergent\"], \"sympy/functions/combinatorial/factorials.py\": [\"binomial\", \"factorial\"], \"sympy/functions/combinatorial/numbers.py\": [\"fibonacci\", \"harmonic\"], \"sympy/matrices/matrixbase.py\": [\"MutableDenseMatrix.refine\"], \"sympy/functions/special/gamma_functions.py\": [\"gamma\"], \"sympy/core/decorators.py\": [\"Symbol._func\"], \"sympy/functions/elementary/exponential.py\": [\"log\", \"exp\", \"exp.exp\"], \"sympy/core/sympify.py\": [\"sympify\"], \"sympy/polys/rationaltools.py\": [\"together\"], \"sympy/assumptions/refine.py\": [\"refine\"], \"sympy/core/expr.py\": [\"Pow.together\"], \"sympy/core/cache.py\": [\"wrapper\"], \"sympy/concrete/gosper.py\": [\"gosper_sum\"], \"sympy/core/symbol.py\": [\"symbols\", \"Symbol\"], \"sympy/functions/elementary/miscellaneous.py\": [\"sqrt\"], \"sympy/utilities/decorator.py\": [\"AssumptionKeys.accessor\"], \"sympy/core/basic.py\": [\"Mul.simplify\"], \"sympy/functions/elementary/complexes.py\": [\"Abs\"], \"sympy/simplify/simplify.py\": [\"simplify\"], \"sympy/integrals/integrals.py\": [\"integrate\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/assumptions/ask.py': ['AssumptionKeys.real', 'AssumptionKeys.positive', 'AssumptionKeys.negative'], 'sympy/series/limitseq.py': ['limit_seq', '<genexpr>'], 'sympy/concrete/summations.py': ['Sum', 'Sum.is_convergent'], 'sympy/functions/combinatorial/factorials.py': ['binomial', 'factorial'], 'sympy/functions/combinatorial/numbers.py': ['fibonacci', 'harmonic'], 'sympy/matrices/matrixbase.py': ['MutableDenseMatrix.refine'], 'sympy/functions/special/gamma_functions.py': ['gamma'], 'sympy/core/decorators.py': ['Symbol._func'], 'sympy/functions/elementary/exponential.py': ['log', 'exp', 'exp.exp'], 'sympy/core/sympify.py': ['sympify'], 'sympy/polys/rationaltools.py': ['together'], 'sympy/assumptions/refine.py': ['refine'], 'sympy/core/expr.py': ['Pow.together'], 'sympy/core/cache.py': ['wrapper'], 'sympy/concrete/gosper.py': ['gosper_sum'], 'sympy/core/symbol.py': ['symbols', 'Symbol'], 'sympy/functions/elementary/miscellaneous.py': ['sqrt'], 'sympy/utilities/decorator.py': ['AssumptionKeys.accessor'], 'sympy/core/basic.py': ['Mul.simplify'], 'sympy/functions/elementary/complexes.py': ['Abs'], 'sympy/simplify/simplify.py': ['simplify'], 'sympy/integrals/integrals.py': ['integrate']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.34533333333333355
}