{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-26546",
  "patch": "diff --git a/.mailmap b/.mailmap\nindex 2b868286fc0f..4c0988c98177 100644\n--- a/.mailmap\n+++ b/.mailmap\n@@ -881,6 +881,7 @@ Liwei Cai <cai.lw123@gmail.com>\n Ljubi\u0161a Mo\u0107i\u0107 <3rdslasher@gmail.com>\n Lokesh Sharma <lokeshhsharma@gmail.com> <your_email@youremail.com>\n Longqi Wang <iqgnol@gmail.com>\n+Lorenz Winkler <lorenz.winkler@tuwien.ac.at>\n Lorenzo Contento <lorenzo.contento@gmail.com> Lorenzo Contento <lcontento@users.noreply.github.com>\n Lorenzo Contento <lorenzo.contento@gmail.com> lcontento <lcontento@users.noreply.github.com>\n Louis Abraham <louis.abraham@yahoo.fr> <louisabraham@users.noreply.github.com>\ndiff --git a/sympy/core/power.py b/sympy/core/power.py\nindex b8676164ec3c..02eb307fd655 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -560,6 +560,8 @@ def _eval_is_extended_real(self):\n                     return ok\n \n         if real_b is False and real_e: # we already know it's not imag\n+            if isinstance(self.exp, Rational) and self.exp.p == 1:\n+                return False\n             from sympy.functions.elementary.complexes import arg\n             i = arg(self.base)*self.exp/S.Pi\n             if i.is_complex: # finite\n@@ -1837,6 +1839,6 @@ def _eval_difference_delta(self, n, step):\n power.add((object, object), Pow)\n \n from .add import Add\n-from .numbers import Integer\n+from .numbers import Integer, Rational\n from .mul import Mul, _keep_coeff\n from .symbol import Symbol, Dummy, symbols\n",
  "test_patch": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 8279c9f43fde..9dcc828d854c 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -555,7 +555,7 @@ def test_issue_14815():\n     assert sqrt(x).is_extended_negative is False\n     x = Symbol('x', extended_real=True)\n     assert sqrt(x).is_extended_negative is False\n-    assert sqrt(zoo, evaluate=False).is_extended_negative is None\n+    assert sqrt(zoo, evaluate=False).is_extended_negative is False\n     assert sqrt(nan, evaluate=False).is_extended_negative is None\n \n \n@@ -651,3 +651,13 @@ def test_powers_of_I():\n def test_issue_23918():\n     b = S(2)/3\n     assert (b**x).as_base_exp() == (1/b, -x)\n+\n+\n+def test_issue_26546():\n+    x = Symbol('x', real=True)\n+    assert x.is_extended_real is True\n+    assert sqrt(x+I).is_extended_real is False\n+    assert Pow(x+I, S.Half).is_extended_real is False\n+    assert Pow(x+I, Rational(1,2)).is_extended_real is False\n+    assert Pow(x+I, Rational(1,13)).is_extended_real is False\n+    assert Pow(x+I, Rational(2,3)).is_extended_real is None\n",
  "base_commit": "68b548d79d43004a1c68990fedd9933384256d20",
  "head_commit": "e676709a3f5805acd6b7a9bf19c71c4497a46c3f",
  "created_at": 1714132571000,
  "version": "1.13",
  "duration_changes": "[{\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9482822306454182, \"head\": 0.2500270865857601}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9418998807668686, \"head\": 0.24995999038219452}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9571058712899685, \"head\": 0.25146492198109627}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9446558207273483, \"head\": 0.25460001826286316}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9443674795329571, \"head\": 0.2523552142083645}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.969868253916502, \"head\": 0.3198021501302719}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9580796621739864, \"head\": 0.2497379630804062}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9371053278446198, \"head\": 0.25357460230588913}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9418176412582397, \"head\": 0.25658921897411346}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9431157223880291, \"head\": 0.24915790930390358}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9407847784459591, \"head\": 0.3260927237570286}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9343982674181461, \"head\": 0.25177136808633804}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9361539371311665, \"head\": 0.2501796931028366}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9432430937886238, \"head\": 0.251793060451746}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9384704120457172, \"head\": 0.3221522122621536}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9466283097863197, \"head\": 0.26200995594263077}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9560142047703266, \"head\": 0.2592685893177986}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9472949430346489, \"head\": 0.25175029039382935}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9427897296845913, \"head\": 0.32345323637127876}}, {\"sympy/solvers/tests/test_solveset.py::test_issue_14454\": {\"base\": 0.9411138258874416, \"head\": 0.250465027987957}}]",
  "efficiency_test": [
    "sympy/solvers/tests/test_solveset.py::test_issue_14454"
  ],
  "patch_functions": "{\"sympy/core/power.py\": [\"Pow._eval_is_extended_real\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/core/power.py': ['Pow._eval_is_extended_real']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/core/decorators.py\": [\"Symbol._func\"], \"sympy/solvers/solveset.py\": [\"invert_real\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/core/decorators.py': ['Symbol._func'], 'sympy/solvers/solveset.py': ['invert_real']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.7310000000000005
}