{
  "repo": "sympy/sympy",
  "instance_id": "sympy__sympy-26693",
  "patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 3f4f462150e6..9f7c9ccce8de 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -1002,7 +1002,7 @@ def coeff_exp(term, x):\n             except ValueError:\n                 a, b = s.removeO().as_leading_term(t, cdir=1), S.Zero\n \n-        p = (z/(a*t**b) - 1)._eval_nseries(t, n=n, logx=logx, cdir=1)\n+        p = (z/(a*t**b) - 1).cancel()._eval_nseries(t, n=n, logx=logx, cdir=1)\n         if p.has(exp):\n             p = logcombine(p)\n         if isinstance(p, Order):\n@@ -1047,14 +1047,13 @@ def mul(d1, d2):\n         while k*d < n:\n             coeff = -S.NegativeOne**k/k\n             for ex in pk:\n-                _ = terms.get(ex, S.Zero) + coeff*pk[ex]\n-                terms[ex] = _.nsimplify()\n+                terms[ex] = terms.get(ex, S.Zero) + coeff*pk[ex]\n             pk = mul(pk, pterms)\n             k += S.One\n \n         res = log(a) - b*log(cdir) + b*logx\n         for ex in terms:\n-            res += terms[ex]*t**(ex)\n+            res += terms[ex].cancel()*t**(ex)\n \n         if a.is_negative and im(z) != 0:\n             from sympy.functions.special.delta_functions import Heaviside\n",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_exponential.py b/sympy/functions/elementary/tests/test_exponential.py\nindex 686ae3b363f1..25d7f4e3431d 100644\n--- a/sympy/functions/elementary/tests/test_exponential.py\n+++ b/sympy/functions/elementary/tests/test_exponential.py\n@@ -524,7 +524,7 @@ def test_log_nseries():\n     assert log(-2*x + (3 - I)*x**2)._eval_nseries(x, 3, None, -1) == -I*pi + log(2) + log(x) - \\\n     x*(S(3)/2 - I/2) + x**2*(-1 + 3*I/4) + O(x**3)\n     assert log(sqrt(-I*x**2 - 3)*sqrt(-I*x**2 - 1) - 2)._eval_nseries(x, 3, None, 1) == -I*pi + \\\n-    log(sqrt(3) + 2) + I*x**2*(-2 + 4*sqrt(3)/3) + O(x**3)\n+    log(sqrt(3) + 2) + 2*sqrt(3)*I*x**2/(3*sqrt(3) + 6) + O(x**3)\n     assert log(-1/(1 - x))._eval_nseries(x, 3, None, 1) == I*pi + x + x**2/2 + O(x**3)\n     assert log(-1/(1 - x))._eval_nseries(x, 3, None, -1) == I*pi + x + x**2/2 + O(x**3)\n \ndiff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 5b4365d8217d..1ad9f1d51598 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -603,12 +603,12 @@ def test_asinh_series():\n def test_asinh_nseries():\n     x = Symbol('x')\n     # Tests concerning branch points\n-    assert asinh(x + I)._eval_nseries(x, 4, None) == I*pi/2 + \\\n-    sqrt(x)*(1 - I) + x**(S(3)/2)*(S(1)/12 + I/12) + x**(S(5)/2)*(-S(3)/160 + 3*I/160) + \\\n-    x**(S(7)/2)*(-S(5)/896 - 5*I/896) + O(x**4)\n+    assert asinh(x + I)._eval_nseries(x, 4, None) == I*pi/2 - \\\n+    sqrt(2)*sqrt(I)*I*sqrt(x) + sqrt(2)*sqrt(I)*x**(S(3)/2)/12 + 3*sqrt(2)*sqrt(I)*I*x**(S(5)/2)/160 - \\\n+    5*sqrt(2)*sqrt(I)*x**(S(7)/2)/896 + O(x**4)\n     assert asinh(x - I)._eval_nseries(x, 4, None) == -I*pi/2 + \\\n-    sqrt(x)*(1 + I) + x**(S(3)/2)*(S(1)/12 - I/12) + x**(S(5)/2)*(-S(3)/160 - 3*I/160) + \\\n-    x**(S(7)/2)*(-S(5)/896 + 5*I/896) + O(x**4)\n+    sqrt(2)*I*sqrt(x)*sqrt(-I) + sqrt(2)*x**(S(3)/2)*sqrt(-I)/12 - \\\n+    3*sqrt(2)*I*x**(S(5)/2)*sqrt(-I)/160 - 5*sqrt(2)*x**(S(7)/2)*sqrt(-I)/896 + O(x**4)\n     # Tests concerning points lying on branch cuts\n     assert asinh(x + 2*I)._eval_nseries(x, 4, None, cdir=1) == I*asin(2) - \\\n     sqrt(3)*I*x/3 + sqrt(3)*x**2/9 + sqrt(3)*I*x**3/18 + O(x**4)\n@@ -619,8 +619,9 @@ def test_asinh_nseries():\n     assert asinh(x - 2*I)._eval_nseries(x, 4, None, cdir=-1) == -I*asin(2) - \\\n     sqrt(3)*I*x/3 - sqrt(3)*x**2/9 + sqrt(3)*I*x**3/18 + O(x**4)\n     # Tests concerning re(ndir) == 0\n-    assert asinh(2*I + I*x - x**2)._eval_nseries(x, 4, None) == I*pi/2 + log(2 - sqrt(3)) - \\\n-    sqrt(3)*x/3 + x**2*(sqrt(3)/9 - sqrt(3)*I/3) + x**3*(-sqrt(3)/18 + 2*sqrt(3)*I/9) + O(x**4)\n+    assert asinh(2*I + I*x - x**2)._eval_nseries(x, 4, None) == I*pi/2 + log(2 - sqrt(3)) + \\\n+    x*(-3 + 2*sqrt(3))/(-6 + 3*sqrt(3)) + x**2*(12 - 36*I + sqrt(3)*(-7 + 21*I))/(-63 + \\\n+    36*sqrt(3)) + x**3*(-168 + sqrt(3)*(97 - 388*I) + 672*I)/(-1746 + 1008*sqrt(3)) + O(x**4)\n \n \n def test_asinh_fdiff():\n@@ -757,8 +758,9 @@ def test_acosh_nseries():\n     assert acosh(1/(I*x - 3))._eval_nseries(x, 4, None, cdir=-1) == acosh(-S(1)/3) - \\\n     sqrt(2)*x/12 - 17*sqrt(2)*I*x**2/576 + 443*sqrt(2)*x**3/41472 + O(x**4)\n     # Tests concerning im(ndir) == 0\n-    assert acosh(-I*x**2 + x - 2)._eval_nseries(x, 4, None) == -I*pi + log(sqrt(3) + 2) - \\\n-    sqrt(3)*x/3 + x**2*(-sqrt(3)/9 + sqrt(3)*I/3) + x**3*(-sqrt(3)/18 + 2*sqrt(3)*I/9) + O(x**4)\n+    assert acosh(-I*x**2 + x - 2)._eval_nseries(x, 4, None) == -I*pi + log(sqrt(3) + 2) + \\\n+    x*(-2*sqrt(3) - 3)/(3*sqrt(3) + 6) + x**2*(-12 + 36*I + sqrt(3)*(-7 + 21*I))/(36*sqrt(3) + \\\n+    63) + x**3*(-168 + 672*I + sqrt(3)*(-97 + 388*I))/(1008*sqrt(3) + 1746) + O(x**4)\n \n \n def test_acosh_fdiff():\n@@ -880,8 +882,9 @@ def test_asech_nseries():\n     assert asech(-I*x - 3)._eval_nseries(x, 4, None) == asech(-3) - sqrt(2)*x/12 + \\\n     17*sqrt(2)*I*x**2/576 + 443*sqrt(2)*x**3/41472 + O(x**4)\n     # Tests concerning im(ndir) == 0\n-    assert asech(-I*x**2 + x - 2)._eval_nseries(x, 3, None) == 2*I*pi/3 + sqrt(3)*I*x/6 + \\\n-    x**2*(sqrt(3)/6 + 7*sqrt(3)*I/72) + O(x**3)\n+    assert asech(-I*x**2 + x - 2)._eval_nseries(x, 3, None) == 2*I*pi/3 + \\\n+    x*(-sqrt(3) + 3*I)/(6*sqrt(3) + 6*I) + x**2*(36 + sqrt(3)*(7 - 12*I) + 21*I)/(72*sqrt(3) - \\\n+    72*I) + O(x**3)\n \n \n def test_asech_rewrite():\n@@ -1002,12 +1005,12 @@ def test_acsch_series():\n def test_acsch_nseries():\n     x = Symbol('x')\n     # Tests concerning branch points\n-    assert acsch(x + I)._eval_nseries(x, 4, None) == -I*pi/2 + I*sqrt(x) + \\\n-    sqrt(x) + 5*I*x**(S(3)/2)/12 - 5*x**(S(3)/2)/12 - 43*I*x**(S(5)/2)/160 - \\\n-    43*x**(S(5)/2)/160 - 177*I*x**(S(7)/2)/896 + 177*x**(S(7)/2)/896 + O(x**4)\n-    assert acsch(x - I)._eval_nseries(x, 4, None) == I*pi/2 - I*sqrt(x) + \\\n-    sqrt(x) - 5*I*x**(S(3)/2)/12 - 5*x**(S(3)/2)/12 + 43*I*x**(S(5)/2)/160 - \\\n-    43*x**(S(5)/2)/160 + 177*I*x**(S(7)/2)/896 + 177*x**(S(7)/2)/896 + O(x**4)\n+    assert acsch(x + I)._eval_nseries(x, 4, None) == -I*pi/2 + \\\n+    sqrt(2)*I*sqrt(x)*sqrt(-I) - 5*x**(S(3)/2)*(1 - I)/12 - \\\n+    43*sqrt(2)*I*x**(S(5)/2)*sqrt(-I)/160 + 177*x**(S(7)/2)*(1 - I)/896 + O(x**4)\n+    assert acsch(x - I)._eval_nseries(x, 4, None) == I*pi/2 - \\\n+    sqrt(2)*sqrt(I)*I*sqrt(x) - 5*x**(S(3)/2)*(1 + I)/12 + \\\n+    43*sqrt(2)*sqrt(I)*I*x**(S(5)/2)/160 + 177*x**(S(7)/2)*(1 + I)/896 + O(x**4)\n     # Tests concerning points lying on branch cuts\n     assert acsch(x + I/2)._eval_nseries(x, 4, None, cdir=1) == -acsch(I/2) - \\\n     I*pi + 4*sqrt(3)*I*x/3 - 8*sqrt(3)*x**2/9 - 16*sqrt(3)*I*x**3/9 + O(x**4)\n@@ -1017,10 +1020,11 @@ def test_acsch_nseries():\n     4*sqrt(3)*I*x/3 - 8*sqrt(3)*x**2/9 + 16*sqrt(3)*I*x**3/9 + O(x**4)\n     assert acsch(x - I/2)._eval_nseries(x, 4, None, cdir=-1) == I*pi + \\\n     acsch(I/2) + 4*sqrt(3)*I*x/3 + 8*sqrt(3)*x**2/9 - 16*sqrt(3)*I*x**3/9 + O(x**4)\n-    # TODO: Tests concerning re(ndir) == 0\n+    # Tests concerning re(ndir) == 0\n     assert acsch(I/2 + I*x - x**2)._eval_nseries(x, 4, None) == -I*pi/2 + \\\n-    log(2 - sqrt(3)) + 4*sqrt(3)*x/3 + x**2*(-8*sqrt(3)/9 + 4*sqrt(3)*I/3) + \\\n-    x**3*(16*sqrt(3)/9 - 16*sqrt(3)*I/9) + O(x**4)\n+    log(2 - sqrt(3)) + x*(12 - 8*sqrt(3))/(-6 + 3*sqrt(3)) + x**2*(-96 + \\\n+    sqrt(3)*(56 - 84*I) + 144*I)/(-63 + 36*sqrt(3)) + x**3*(2688 - 2688*I + \\\n+    sqrt(3)*(-1552 + 1552*I))/(-873 + 504*sqrt(3)) + O(x**4)\n \n \n def test_acsch_rewrite():\n@@ -1540,3 +1544,10 @@ def test_issue_25847():\n     #acsch\n     assert acsch(sin(x)/x).as_leading_term(x) == log(1 + sqrt(2))\n     raises(PoleError, lambda: acsch(exp(1/x)).as_leading_term(x))\n+\n+\n+def test_issue_25175():\n+    x = Symbol('x')\n+    g1 = 2*acosh(1 + 2*x/3) - acosh(S(5)/3 - S(8)/3/(x + 4))\n+    g2 = 2*log(sqrt((x + 4)/3)*(sqrt(x + 3)+sqrt(x))**2/(2*sqrt(x + 3) + sqrt(x)))\n+    assert (g1 - g2).series(x) == O(x**6)\n",
  "base_commit": "73ae5e99aff9bf96675dd90670d637877a2d6041",
  "head_commit": "1f69725138a4c123c9ca4b68746ba79899da9270",
  "created_at": 1718137096000,
  "version": "1.14",
  "duration_changes": "[{\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.396341972053051, \"head\": 1.7289567217230797}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.2517479956150055, \"head\": 1.417383462190628}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.2540431544184685, \"head\": 2.053371947258711}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.390765868127346, \"head\": 1.7743679024279118}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.187996558845043, \"head\": 1.3425788395106792}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.2902315743267536, \"head\": 1.9730127565562725}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.4307324402034283, \"head\": 1.8018436878919601}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.2550783455371857, \"head\": 1.3934712819755077}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.2922673635184765, \"head\": 1.9593675509095192}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.4560793451964855, \"head\": 1.7638326436281204}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.2697392478585243, \"head\": 1.3085505478084087}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.3440560661256313, \"head\": 1.9816892892122269}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.4188668243587017, \"head\": 1.859430130571127}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.2093474827706814, \"head\": 1.3969964310526848}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.256256390362978, \"head\": 1.9628985933959484}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.46604723110795, \"head\": 1.67739312723279}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.256763219833374, \"head\": 1.3420101776719093}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.283532924950123, \"head\": 1.963290747255087}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.4216953963041306, \"head\": 1.880308173596859}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.2529639340937138, \"head\": 1.349510908126831}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.265025421977043, \"head\": 1.963727630674839}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.431451115757227, \"head\": 1.8376971557736397}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.231391679495573, \"head\": 1.540491808205843}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.2765109091997147, \"head\": 1.999265167862177}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.4267775863409042, \"head\": 1.7712738662958145}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.1650175787508488, \"head\": 1.3684316501021385}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.2545656114816666, \"head\": 1.9658480621874332}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.417069982737303, \"head\": 1.7811234593391418}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.301072981208563, \"head\": 1.4734980836510658}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.241662371903658, \"head\": 2.064425691962242}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.4397269412875175, \"head\": 1.8317265398800373}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.227749913930893, \"head\": 1.4718509688973427}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.262387201189995, \"head\": 1.968070961534977}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.419233053922653, \"head\": 1.7838514931499958}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.206009518355131, \"head\": 1.4031115248799324}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.2508296817541122, \"head\": 2.0186632350087166}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.370651423931122, \"head\": 1.8682041466236115}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.2280600257217884, \"head\": 1.5664768442511559}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.1272195652127266, \"head\": 2.012597795575857}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.2986784018576145, \"head\": 1.7680045925080776}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.1354929134249687, \"head\": 1.4329639673233032}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.0624756067991257, \"head\": 2.0277073830366135}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.2623420134186745, \"head\": 1.7273142710328102}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.076368611305952, \"head\": 1.4116142503917217}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.1961743012070656, \"head\": 1.9820658564567566}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.2494862489402294, \"head\": 1.7879663705825806}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.05420645698905, \"head\": 1.451389767229557}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.024116139858961, \"head\": 2.1110942885279655}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.2814094312489033, \"head\": 1.7764583565294743}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.0390739813447, \"head\": 1.3938314877450466}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.045039840042591, \"head\": 1.9982531890273094}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.2750329077243805, \"head\": 1.7552025318145752}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.1218400821089745, \"head\": 1.4359115213155746}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.028070118278265, \"head\": 2.0377398021519184}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.2154150009155273, \"head\": 1.681359488517046}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.047081034630537, \"head\": 1.359101738780737}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.1776766777038574, \"head\": 1.9690534956753254}}, {\"sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries\": {\"base\": 2.228392142802477, \"head\": 1.792303029447794}, \"sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries\": {\"base\": 2.0477409660816193, \"head\": 1.477853212505579}, \"sympy/functions/special/tests/test_gamma_functions.py::test_loggamma\": {\"base\": 3.0112363137304783, \"head\": 2.064550928771496}}]",
  "efficiency_test": [
    "sympy/functions/elementary/tests/test_trigonometric.py::test_acos_nseries",
    "sympy/functions/elementary/tests/test_trigonometric.py::test_acsc_nseries",
    "sympy/functions/special/tests/test_gamma_functions.py::test_loggamma"
  ],
  "patch_functions": "{\"sympy/functions/elementary/exponential.py\": [\"log._eval_nseries\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sympy/functions/elementary/exponential.py': ['log._eval_nseries']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sympy/core/add.py\": [\"Add._eval_nseries\", \"Add.removeO\"], \"sympy/functions/elementary/trigonometric.py\": [\"acsc._eval_nseries\", \"cos\", \"acos._eval_nseries\", \"sin\", \"acos\", \"acsc\", \"sin._eval_nseries\", \"cos._eval_nseries\"], \"sympy/series/limits.py\": [\"Limit.doit\"], \"sympy/core/function.py\": [\"loggamma._eval_nseries\", \"acos._eval_nseries\", \"expand_func\", \"acsc._eval_nseries\"], \"sympy/core/basic.py\": [\"Mul.rewrite\", \"Integer.doit\", \"log.doit\"], \"sympy/core/expr.py\": [\"loggamma.nseries\", \"Symbol.removeO\", \"Add.diff\", \"One.expand\", \"Symbol._eval_nseries\", \"Zero.cancel\", \"NegativeOne.getn\", \"One._eval_nseries\", \"loggamma.series\"], \"sympy/core/mul.py\": [\"Mul._eval_nseries\"], \"sympy/series/gruntz.py\": [\"rewrite\"], \"sympy/functions/special/gamma_functions.py\": [\"gamma.fdiff\", \"gamma\", \"loggamma._eval_nseries\", \"loggamma\", \"polygamma\", \"gamma._eval_nseries\", \"polygamma.fdiff\", \"loggamma.fdiff\"], \"sympy/core/decorators.py\": [\"Symbol._func\"], \"sympy/core/power.py\": [\"Pow._eval_nseries\"], \"sympy/core/sympify.py\": [\"sympify\"], \"sympy/functions/elementary/exponential.py\": [\"log\", \"exp._eval_nseries\", \"exp\", \"log._eval_nseries\", \"exp.exp\"], \"sympy/core/cache.py\": [\"wrapper\"], \"sympy/core/symbol.py\": [\"symbols\", \"Symbol\"], \"sympy/functions/elementary/miscellaneous.py\": [\"sqrt\"], \"sympy/core/numbers.py\": [\"Rational\"], \"sympy/polys/rings.py\": [\"PolyElement.cancel\"], \"sympy/polys/polytools.py\": [\"cancel\"], \"sympy/core/operations.py\": [\"Add.doit\"], \"sympy/functions/elementary/complexes.py\": [\"conjugate\"], \"sympy/concrete/summations.py\": [\"Sum.doit\"], \"sympy/series/order.py\": [\"Order.removeO\"], \"sympy/core/evalf.py\": [\"NegativeOne.evalf\"], \"sympy/core/assumptions.py\": [\"Symbol.getit\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sympy/core/add.py': ['Add._eval_nseries', 'Add.removeO'], 'sympy/functions/elementary/trigonometric.py': ['acsc._eval_nseries', 'cos', 'acos._eval_nseries', 'sin', 'acos', 'acsc', 'sin._eval_nseries', 'cos._eval_nseries'], 'sympy/series/limits.py': ['Limit.doit'], 'sympy/core/function.py': ['loggamma._eval_nseries', 'acos._eval_nseries', 'expand_func', 'acsc._eval_nseries'], 'sympy/core/basic.py': ['Mul.rewrite', 'Integer.doit', 'log.doit'], 'sympy/core/expr.py': ['loggamma.nseries', 'Symbol.removeO', 'Add.diff', 'One.expand', 'Symbol._eval_nseries', 'Zero.cancel', 'NegativeOne.getn', 'One._eval_nseries', 'loggamma.series'], 'sympy/core/mul.py': ['Mul._eval_nseries'], 'sympy/series/gruntz.py': ['rewrite'], 'sympy/functions/special/gamma_functions.py': ['gamma.fdiff', 'gamma', 'loggamma._eval_nseries', 'loggamma', 'polygamma', 'gamma._eval_nseries', 'polygamma.fdiff', 'loggamma.fdiff'], 'sympy/core/decorators.py': ['Symbol._func'], 'sympy/core/power.py': ['Pow._eval_nseries'], 'sympy/core/sympify.py': ['sympify'], 'sympy/functions/elementary/exponential.py': ['log', 'exp._eval_nseries', 'exp', 'log._eval_nseries', 'exp.exp'], 'sympy/core/cache.py': ['wrapper'], 'sympy/core/symbol.py': ['symbols', 'Symbol'], 'sympy/functions/elementary/miscellaneous.py': ['sqrt'], 'sympy/core/numbers.py': ['Rational'], 'sympy/polys/rings.py': ['PolyElement.cancel'], 'sympy/polys/polytools.py': ['cancel'], 'sympy/core/operations.py': ['Add.doit'], 'sympy/functions/elementary/complexes.py': ['conjugate'], 'sympy/concrete/summations.py': ['Sum.doit'], 'sympy/series/order.py': ['Order.removeO'], 'sympy/core/evalf.py': ['NegativeOne.evalf'], 'sympy/core/assumptions.py': ['Symbol.getit']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.3180000000000002
}