{
  "repo": "scikit-learn/scikit-learn",
  "instance_id": "scikit-learn__scikit-learn-12172",
  "patch": "diff --git a/doc/whats_new/v0.20.rst b/doc/whats_new/v0.20.rst\nindex e4ba61eefd65a..34aab000e92f7 100644\n--- a/doc/whats_new/v0.20.rst\n+++ b/doc/whats_new/v0.20.rst\n@@ -23,6 +23,11 @@ enhancements to features released in 0.20.0.\n   those estimators as part of parallel parameter search or cross-validation.\n   :issue:`12122` by :user:`Olivier Grisel <ogrisel>`.\n \n+- |Fix| force the parallelism backend to :code:`threading` for\n+  :class:`neighbors.KDTree` and :class:`neighbors.BallTree` in Python 2.7 to\n+  avoid pickling errors caused by the serialization of their methods.\n+  :issue:`12171` by :user:`Thomas Moreau <tomMoral>`\n+\n .. _changes_0_20:\n \n Version 0.20.0\ndiff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 9f30ba3ebd3fc..dedcc658c0d2f 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -9,6 +9,7 @@\n from functools import partial\n from distutils.version import LooseVersion\n \n+import sys\n import warnings\n from abc import ABCMeta, abstractmethod\n \n@@ -429,7 +430,8 @@ class from an array representing our data set and ask who's\n                 raise ValueError(\n                     \"%s does not work with sparse matrices. Densify the data, \"\n                     \"or set algorithm='brute'\" % self._fit_method)\n-            if LooseVersion(joblib_version) < LooseVersion('0.12'):\n+            if (sys.version_info < (3,) or\n+                    LooseVersion(joblib_version) < LooseVersion('0.12')):\n                 # Deal with change of API in joblib\n                 delayed_query = delayed(self._tree.query,\n                                         check_pickle=False)\n",
  "test_patch": "diff --git a/sklearn/neighbors/tests/test_neighbors.py b/sklearn/neighbors/tests/test_neighbors.py\nindex 9b244cde09536..160f3dc5c5eed 100644\n--- a/sklearn/neighbors/tests/test_neighbors.py\n+++ b/sklearn/neighbors/tests/test_neighbors.py\n@@ -27,6 +27,8 @@\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.validation import check_random_state\n \n+from sklearn.externals.joblib import parallel_backend\n+\n rng = np.random.RandomState(0)\n # load and shuffle iris dataset\n iris = datasets.load_iris()\n@@ -1316,6 +1318,25 @@ def test_same_radius_neighbors_parallel(algorithm):\n     assert_array_almost_equal(graph, graph_parallel)\n \n \n+@pytest.mark.parametrize('backend', ['loky', 'multiprocessing', 'threading'])\n+@pytest.mark.parametrize('algorithm', ALGORITHMS)\n+def test_knn_forcing_backend(backend, algorithm):\n+    # Non-regression test which ensure the knn methods are properly working\n+    # even when forcing the global joblib backend.\n+    with parallel_backend(backend):\n+        X, y = datasets.make_classification(n_samples=30, n_features=5,\n+                                            n_redundant=0, random_state=0)\n+        X_train, X_test, y_train, y_test = train_test_split(X, y)\n+\n+        clf = neighbors.KNeighborsClassifier(n_neighbors=3,\n+                                             algorithm=algorithm,\n+                                             n_jobs=3)\n+        clf.fit(X_train, y_train)\n+        clf.predict(X_test)\n+        clf.kneighbors(X_test)\n+        clf.kneighbors_graph(X_test, mode='distance').toarray()\n+\n+\n def test_dtype_convert():\n     classifier = neighbors.KNeighborsClassifier(n_neighbors=1)\n     CLASSES = 15\n",
  "base_commit": "dbfd872be4d68a6d824bd81ace09420383bf2d7b",
  "head_commit": "b9c3fcbac3f49b196546551554004a2075416ca8",
  "created_at": 1537974356000,
  "version": "0.21",
  "duration_changes": "[{\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.011206675320863724, \"head\": 0.1475275419652462}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.008559297770261765, \"head\": 0.016942471265792847}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.06051943823695183, \"head\": 0.017122019082307816}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.007855784147977829, \"head\": 0.006241772323846817}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.0850488469004631, \"head\": 0.009987592697143555}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008426900953054428, \"head\": 0.008702564984560013}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.019552212208509445, \"head\": 0.019750021398067474}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.011515345424413681, \"head\": 0.02809298411011696}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.008501116186380386, \"head\": 0.13208641484379768}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.08836513757705688, \"head\": 0.029703903943300247}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.0065991319715976715, \"head\": 0.005923822522163391}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.07990117371082306, \"head\": 0.00892607495188713}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.013222362846136093, \"head\": 0.00834057480096817}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.023321401327848434, \"head\": 0.03861568495631218}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.16716870665550232, \"head\": 0.015713106840848923}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006149966269731522, \"head\": 0.08709512650966644}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.012981023639440536, \"head\": 0.10659331828355789}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.005894407629966736, \"head\": 0.0060767605900764465}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.013315394520759583, \"head\": 0.00929797813296318}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.011471081525087357, \"head\": 0.00855378806591034}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.01996331289410591, \"head\": 0.01973697543144226}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.021182887256145477, \"head\": 0.18899917230010033}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.14703503623604774, \"head\": 0.006612379103899002}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.0222044475376606, \"head\": 0.013939730823040009}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.005892936140298843, \"head\": 0.006056491285562515}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.008830465376377106, \"head\": 0.00945814698934555}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008396290242671967, \"head\": 0.00897957757115364}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.019657474011182785, \"head\": 0.04736281558871269}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.024955883622169495, \"head\": 0.00884174183011055}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.032127659767866135, \"head\": 0.0063803307712078094}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.08354838937520981, \"head\": 0.0325758270919323}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.008560959249734879, \"head\": 0.00600983202457428}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.014513164758682251, \"head\": 0.08637793362140656}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.013496439903974533, \"head\": 0.008875656872987747}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.02617296203970909, \"head\": 0.019741099327802658}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.04197080060839653, \"head\": 0.011736415326595306}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.09375462308526039, \"head\": 0.012736085802316666}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.058473747223615646, \"head\": 0.09819693490862846}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.007493637502193451, \"head\": 0.007585465908050537}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.011771287769079208, \"head\": 0.009132187813520432}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008456286042928696, \"head\": 0.008449580520391464}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.019627340137958527, \"head\": 0.019497986882925034}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.07796544954180717, \"head\": 0.009855255484580994}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.045444056391716, \"head\": 0.006718728691339493}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.02158154547214508, \"head\": 0.013635378330945969}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.0059972479939460754, \"head\": 0.0556492954492569}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.009120423346757889, \"head\": 0.009720273315906525}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008520547300577164, \"head\": 0.008571222424507141}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.04890459403395653, \"head\": 0.1208706758916378}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.014164268970489502, \"head\": 0.13741088658571243}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.06513925641775131, \"head\": 0.08673324435949326}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.013654179871082306, \"head\": 0.028720583766698837}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.006092038005590439, \"head\": 0.006158456206321716}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.009332560002803802, \"head\": 0.009466685354709625}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008536513894796371, \"head\": 0.008579939603805542}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.019682176411151886, \"head\": 0.04024732485413551}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.00969211757183075, \"head\": 0.034104038029909134}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.00648677721619606, \"head\": 0.021440356969833374}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.013411853462457657, \"head\": 0.06114437058568001}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.020808767527341843, \"head\": 0.006184201687574387}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.010098561644554138, \"head\": 0.010600131005048752}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008747141808271408, \"head\": 0.00957326591014862}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.08017159625887871, \"head\": 0.07047415897250175}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.021084122359752655, \"head\": 0.02447696402668953}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.034033216536045074, \"head\": 0.13085323199629784}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.08611121773719788, \"head\": 0.017423100769519806}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.005929570645093918, \"head\": 0.005930893123149872}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.009205389767885208, \"head\": 0.009176619350910187}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.009268440306186676, \"head\": 0.008365128189325333}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.022664636373519897, \"head\": 0.04702296108007431}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.009738244116306305, \"head\": 0.012156657874584198}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006821960210800171, \"head\": 0.112905103713274}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.0442504920065403, \"head\": 0.01738991215825081}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.007893819361925125, \"head\": 0.006007350981235504}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.012778542935848236, \"head\": 0.009045302867889404}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.009043879806995392, \"head\": 0.008343573659658432}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.08292661979794502, \"head\": 0.05604923889040947}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.020752277225255966, \"head\": 0.0326276458799839}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.06238861009478569, \"head\": 0.06823810935020447}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.014310326427221298, \"head\": 0.013745445758104324}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.0062781162559986115, \"head\": 0.006264273077249527}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.00960145890712738, \"head\": 0.009617619216442108}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008570197969675064, \"head\": 0.06416162475943565}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.02035786584019661, \"head\": 0.023721247911453247}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.054595619440078735, \"head\": 0.016171470284461975}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.05758453905582428, \"head\": 0.014409296214580536}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.015004537999629974, \"head\": 0.13845058158040047}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.006634902209043503, \"head\": 0.013175856322050095}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.01143249124288559, \"head\": 0.009410951286554337}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008943241089582443, \"head\": 0.008503220975399017}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.021274439990520477, \"head\": 0.019657757133245468}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.024408195167779922, \"head\": 0.030767112970352173}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.009287416934967041, \"head\": 0.08081769570708275}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.01606201007962227, \"head\": 0.02387165278196335}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.05974292755126953, \"head\": 0.041706979274749756}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.009634528309106827, \"head\": 0.014699336141347885}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008606195449829102, \"head\": 0.012562941759824753}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.019776582717895508, \"head\": 0.01963404193520546}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.036297351121902466, \"head\": 0.012875109910964966}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.0748051255941391, \"head\": 0.11410617455840111}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.017621882259845734, \"head\": 0.013169631361961365}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.0075399987399578094, \"head\": 0.005951192229986191}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.012737322598695755, \"head\": 0.009215671569108963}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.046642668545246124, \"head\": 0.008414298295974731}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.02369283139705658, \"head\": 0.019597060978412628}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.06424866989254951, \"head\": 0.10929769650101662}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.08161256834864616, \"head\": 0.00746077299118042}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.0185285285115242, \"head\": 0.013214603066444397}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.006049174815416336, \"head\": 0.006013810634613037}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.009393926709890366, \"head\": 0.04451598599553108}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008470859378576279, \"head\": 0.008547898381948471}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.054181426763534546, \"head\": 0.019836023449897766}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.012743905186653137, \"head\": 0.044249482452869415}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.014996632933616638, \"head\": 0.020746592432260513}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.09954668581485748, \"head\": 0.013430502265691757}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.006765153259038925, \"head\": 0.006012730300426483}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.009753812104463577, \"head\": 0.009107891470193863}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.008632034063339233, \"head\": 0.048742614686489105}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.046869028359651566, \"head\": 0.019689343869686127}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.07432373613119125, \"head\": 0.011533793061971664}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.011632077395915985, \"head\": 0.018059447407722473}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.07453054934740067, \"head\": 0.08832920715212822}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.010369133204221725, \"head\": 0.008392006158828735}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.01347779855132103, \"head\": 0.014846350997686386}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.01054685190320015, \"head\": 0.009348474442958832}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.023380491882562637, \"head\": 0.02034994587302208}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.1262553445994854, \"head\": 0.010979752987623215}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.006742078810930252, \"head\": 0.00944068655371666}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.017451781779527664, \"head\": 0.13523709774017334}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.007434692233800888, \"head\": 0.006164126098155975}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.01256873831152916, \"head\": 0.009203121066093445}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.010964207351207733, \"head\": 0.008596379309892654}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.04584456980228424, \"head\": 0.019711025059223175}}, {\"sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]\": {\"base\": 0.030962057411670685, \"head\": 0.009193364530801773}, \"sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver\": {\"base\": 0.09832793101668358, \"head\": 0.006559368222951889}, \"sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV\": {\"base\": 0.06795798614621162, \"head\": 0.014015953987836838}, \"sklearn/svm/tests/test_svm.py::test_weight\": {\"base\": 0.007784128189086914, \"head\": 0.006152071058750153}, \"sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]\": {\"base\": 0.012724261730909348, \"head\": 0.009619295597076416}, \"sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]\": {\"base\": 0.010872330516576767, \"head\": 0.00874272733926773}, \"sklearn/tests/test_multiclass.py::test_ovr_fit_predict\": {\"base\": 0.019788846373558044, \"head\": 0.07583891972899437}}]",
  "efficiency_test": [
    "sklearn/decomposition/tests/test_pca.py::test_pca_dtype_preservation[auto]",
    "sklearn/decomposition/tests/test_pca.py::test_pca_randomized_solver",
    "sklearn/linear_model/ridge.py::sklearn.linear_model.ridge.RidgeCV",
    "sklearn/svm/tests/test_svm.py::test_weight",
    "sklearn/tests/test_common.py::test_non_meta_estimators[KernelRidge-KernelRidge-check_regressor_data_not_an_array]",
    "sklearn/tests/test_common.py::test_non_meta_estimators[MiniBatchDictionaryLearning-MiniBatchDictionaryLearning-check_dict_unchanged]",
    "sklearn/tests/test_multiclass.py::test_ovr_fit_predict"
  ],
  "patch_functions": "{\"sklearn/neighbors/base.py\": [\"KNeighborsMixin.kneighbors\"]}",
  "problem_statement_oracle": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\n{'sklearn/neighbors/base.py': ['KNeighborsMixin.kneighbors']}\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "test_functions": "{\"sklearn/multiclass.py\": [\"OneVsRestClassifier\", \"OneVsRestClassifier.fit\", \"OneVsRestClassifier.predict\"], \"sklearn/linear_model/ridge.py\": [\"_RidgeGCV._diag_dot\", \"_RidgeGCV._pre_compute_svd\", \"_RidgeGCV._errors_svd\", \"_RidgeGCV._errors_and_values_svd_helper\", \"_RidgeGCV.fit\", \"_RidgeGCV._decomp_diag\"], \"sklearn/utils/estimator_checks.py\": [\"_yield_all_checks\", \"set_checking_parameters\"], \"sklearn/utils/deprecation.py\": [\"wrapped\"], \"sklearn/decomposition/base.py\": [\"PCA.get_precision\", \"PCA.get_covariance\", \"PCA.transform\"], \"sklearn/svm/classes.py\": [\"LinearSVC\", \"SVC\", \"LinearSVC.fit\"], \"sklearn/externals/six.py\": [\"with_metaclass\"], \"sklearn/linear_model/logistic.py\": [\"LogisticRegression.fit\", \"LogisticRegression\"], \"sklearn/utils/validation.py\": [\"check_random_state\", \"check_X_y\"], \"sklearn/datasets/base.py\": [\"load_iris\"], \"sklearn/metrics/scorer.py\": [\"check_scoring\"], \"sklearn/preprocessing/label.py\": [\"LabelBinarizer.fit\", \"LabelEncoder.fit\"], \"sklearn/linear_model/base.py\": [\"LogisticRegression.predict\", \"_RidgeGCV._set_intercept\", \"LinearSVC.predict\", \"_preprocess_data\"], \"sklearn/utils/extmath.py\": [\"safe_sparse_dot\"], \"sklearn/decomposition/pca.py\": [\"PCA.fit_transform\", \"PCA.fit\", \"PCA\"], \"sklearn/datasets/samples_generator.py\": [\"make_classification\"], \"sklearn/svm/base.py\": [\"SVC.fit\", \"SVC.predict\"], \"sklearn/utils/_unittest_backport.py\": [\"TestCase.assertRaises\"], \"sklearn/base.py\": [\"AdaBoostClassifier.get_params\", \"LogisticRegression.set_params\"], \"sklearn/naive_bayes.py\": [\"MultinomialNB.fit\", \"MultinomialNB\"], \"sklearn/metrics/classification.py\": [\"f1_score\"]}",
  "problem_statement_realistic": "Please enhance the computational efficiency and execution speed across the entire repository. The optimization efforts may target one or more objective functions, including but not limited to:\ndefaultdict(<class 'list'>, {'sklearn/multiclass.py': ['OneVsRestClassifier', 'OneVsRestClassifier.fit', 'OneVsRestClassifier.predict'], 'sklearn/linear_model/ridge.py': ['_RidgeGCV._diag_dot', '_RidgeGCV._pre_compute_svd', '_RidgeGCV._errors_svd', '_RidgeGCV._errors_and_values_svd_helper', '_RidgeGCV.fit', '_RidgeGCV._decomp_diag'], 'sklearn/utils/estimator_checks.py': ['_yield_all_checks', 'set_checking_parameters'], 'sklearn/utils/deprecation.py': ['wrapped'], 'sklearn/decomposition/base.py': ['PCA.get_precision', 'PCA.get_covariance', 'PCA.transform'], 'sklearn/svm/classes.py': ['LinearSVC', 'SVC', 'LinearSVC.fit'], 'sklearn/externals/six.py': ['with_metaclass'], 'sklearn/linear_model/logistic.py': ['LogisticRegression.fit', 'LogisticRegression'], 'sklearn/utils/validation.py': ['check_random_state', 'check_X_y'], 'sklearn/datasets/base.py': ['load_iris'], 'sklearn/metrics/scorer.py': ['check_scoring'], 'sklearn/preprocessing/label.py': ['LabelBinarizer.fit', 'LabelEncoder.fit'], 'sklearn/linear_model/base.py': ['LogisticRegression.predict', '_RidgeGCV._set_intercept', 'LinearSVC.predict', '_preprocess_data'], 'sklearn/utils/extmath.py': ['safe_sparse_dot'], 'sklearn/decomposition/pca.py': ['PCA.fit_transform', 'PCA.fit', 'PCA'], 'sklearn/datasets/samples_generator.py': ['make_classification'], 'sklearn/svm/base.py': ['SVC.fit', 'SVC.predict'], 'sklearn/utils/_unittest_backport.py': ['TestCase.assertRaises'], 'sklearn/base.py': ['AdaBoostClassifier.get_params', 'LogisticRegression.set_params'], 'sklearn/naive_bayes.py': ['MultinomialNB.fit', 'MultinomialNB'], 'sklearn/metrics/classification.py': ['f1_score']})\nThe following conditions apply:\n1. Acceleration of at least one objective function is sufficient for success, as performance evaluations will be conducted collectively on all targeted functions.\n2. Optimization may be achieved either directly through modifications to the objective functions or indirectly by improving computationally intensive subroutines upon which they depend.\n3. Optimization efforts should prioritize maximal efficiency gains where feasible.\n4. All existing unit tests must remain unaltered to preserve functional correctness.",
  "human_performance": 0.015571428571428582
}